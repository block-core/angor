@using Angor.Shared.Services
@using Angor.Client.Models
@using Angor.Client.Services
@using Nostr.Client.Messages
@using Nostr.Client.Messages.Metadata
@using QRCoder

@inject IconService IconService;
@inject IClipboardService _clipboardService


<!-- Trigger Button -->
<div class="col-6 text-end">
    <i role="button" @onclick="ShowModal" data-cy="SHOW_QR_CODE">
        <Icon IconName="qr-code"></Icon>
    </i>
</div>
<!-- Modal -->
@if (showModal)
{
    <div class="modal-wrapper">
        <div class="modal fade show d-block" id="qrcodeModal" tabindex="-1" aria-labelledby="qrcodeModalLabel" aria-hidden="true">
            <div class="modal-dialog custom-modal-size">
                <!-- Custom modal size -->
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="coinControlModalLabel">Receive</h5>
                        <span type="button" data-bs-dismiss="modal" @onclick="HideModal"  data-cy="QR_IMAGE_IN_POPUP">
                            <Icon IconName="close-circle"></Icon>
                        </span>
                    </div>
                    <div class="modal-body">
                        <img src="data:image/png;base64,@base64qrcode" class="qrcode-image" alt="QR Code" />
                        <div class="address-container">
                            <div class="d-flex align-items-center">
                                <p id="receive-address" class="address-text mb-0 overflow-x-auto" data-cy="WALLET_ADRESS_IN_QR_POPUP">@Data</p>
                                <i @onclick="CopyToClipboard" class="ms-auto cursor-pointer user-select-none">
                                    <Icon IconName="copy"></Icon>
                                </i>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}
<NotificationComponent @ref="notificationComponent" />

@code {

    [Parameter]
    public string Data { get; set; }

    private string base64qrcode;

    private bool showModal = false;

    public NotificationComponent notificationComponent;

 

    private void ShowModal()
    {
        GenerateQRCode(Data);
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
    }

    public void SetQRCode(string newData)
    {
        Data = newData;
    }

    public void GenerateQRCode(string newData)
    {
        Data = newData;

        base64qrcode = GenerateQRCodeInternal(Data);

        StateHasChanged();
    }

    public static string GenerateQRCodeInternal(string content)
    {
        using QRCodeGenerator qrGenerator = new QRCodeGenerator();
        using QRCodeData qrCodeData = qrGenerator.CreateQrCode(content, QRCodeGenerator.ECCLevel.Q);
        using PngByteQRCode pngByteQRCode = new PngByteQRCode(qrCodeData);
        return Convert.ToBase64String(pngByteQRCode.GetGraphic(10));
    }

    private async Task CopyToClipboard()
    {
        await _clipboardService.WriteTextAsync(Data);
        notificationComponent.ShowNotificationMessage("Copied to clipboard!", 3);

    }
}
