@using Angor.Shared.Services
@using Angor.Client.Models
@using Angor.Client.Services
@using Nostr.Client.Messages
@using Nostr.Client.Messages.Metadata
@using QRCoder

@inject IClipboardService ClipboardService

<!-- Trigger Button -->
<button class="btn btn-secondary qr-button" @onclick="ShowModal">Show QR Code</button>

<!-- Modal -->
@if (_showModal)
{
    <div class="modal fade show d-block" id="qrcodeModal" tabindex="-1" aria-labelledby="qrcodeModalLabel" aria-hidden="true">
        <div class="modal-dialog custom-modal-size">
            <!-- Custom modal size -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="coinControlModalLabel">QR Code</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="HideModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img src="data:image/png;base64,@_base64Qrcode" class="qrcode-image" alt="QR Code" />
                    <div class="address-container">
                        <div class="d-flex align-items-center">
                            <p id="receive-address" class="card-text mb-0">@Data</p>
                            <button class="btn btn-outline-secondary btn-sm address-copy-button" @onclick="CopyToClipboard">
                                <i class="oi oi-file"></i>
                            </button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Data { get; set; }

    private string _base64Qrcode;

    private bool _showModal = false;

    private void ShowModal()
    {
        GenerateQrCode(Data);
        _showModal = true;
    }

    private void HideModal()
    {
        _showModal = false;
    }

    public void SetQrCode(string newData)
    {
        Data = newData;
    }

    public void GenerateQrCode(string newData)
    {
        Data = newData;

        _base64Qrcode = GenerateQrCodeInternal(Data);

        StateHasChanged();
    }

    public static string GenerateQrCodeInternal(string content)
    {
        using QRCodeGenerator qrGenerator = new QRCodeGenerator();
        using QRCodeData qrCodeData = qrGenerator.CreateQrCode(content, QRCodeGenerator.ECCLevel.Q);
        using PngByteQRCode pngByteQrCode = new PngByteQRCode(qrCodeData);
        return Convert.ToBase64String(pngByteQrCode.GetGraphic(10));
    }

    private async Task CopyToClipboard()
    {
        await ClipboardService.WriteTextAsync(Data);

    }
}

<style>
    .custom-modal-size {
        max-width: 450px; /* Adjust this value as needed */
    }

    .modal-content {
        padding: 10px; /* Reduced padding */
    }

    .modal-body {
        padding: 10px; /* Reduced padding */
    }

    .qrcode-image {
        width: 100%; /* Image takes full width of the modal body */
        height: auto; /* Maintain aspect ratio */
    }

</style>