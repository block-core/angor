@using Angor.Shared.Services
@using Angor.Client.Models
@using Nostr.Client.Messages
@using Nostr.Client.Messages.Metadata

@inject IRelayService  RelayService;

<div class="card mb-3">
    @if (InvestmentRequests)
    {
        <div class="card-header bg-success">
            <h4 class="d-flex justify-content-center align-items-center">Pending investment requests</h4>
        </div>
    }
    <div class="card-body">
        <h1 class="card-title">@FounderProject.Metadata?.Name</h1>
        <h2 class="card-subtitle">@FounderProject.ProjectInfo.ProjectIdentifier</h2>
        <p class="card-text">Nostr ID: <a href="/" target="_blank">@FounderProject.ProjectInfo.NostrPubKey</a></p>
        <NavLink href=@($"/view/{FounderProject.ProjectInfo.ProjectIdentifier}") class="btn btn-primary">View Project</NavLink>
    </div>
</div>

@code {

    [Parameter]
    public FounderProject FounderProject { get; set; }

    public bool InvestmentRequests { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await RelayService.ConnectToRelaysAsync();

        if (FounderProject.Metadata == null)
        {
            await RelayService.RequestProjectCreateEventsByPubKeyAsync(FounderProject.ProjectInfo.NostrPubKey, _ =>
            {
                if (_.Kind != NostrKind.Metadata) 
                    return;
                
                var metadata = System.Text.Json.JsonSerializer.Deserialize<NostrMetadata>(_.Content, Angor.Shared.Services.RelayService.settings);
                FounderProject.Metadata = ProjectMetadata.Parse(metadata);
                StateHasChanged();
            });
        }
        
        await RelayService.LookupDirectMessagesForPubKeyAsync(FounderProject.ProjectInfo.NostrPubKey, FounderProject.LastRequestForSignaturesTime, 1,
            _ =>
            {
                if (InvestmentRequests)
                    return;

                InvestmentRequests = true;
                StateHasChanged();
            });
    }
}