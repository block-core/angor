@page "/signatures/{ProjectIdentifier}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Client.Services
@using Angor.Client.Models
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using System.Text.Json
@using Angor.Shared.Services
@using System.Security.Cryptography
@using Angor.Shared.Protocol
@using Angor.Shared.Utilities
@using Nostr.Client.Messages
@using System.Collections.ObjectModel
@using System.Reactive.Linq

@inject IJSRuntime JS

@inject ILogger<Signatures> Logger
@inject IDerivationOperations DerivationOperations
@inject IClientStorage Storage;
@inject ICacheStorage SessionStorage;
@inject ISignService SignService
@inject IInvestorTransactionActions InvestorTransactionActions
@inject IFounderTransactionActions FounderTransactionActions
@inject ISerializer serializer
@inject IEncryptionService encryption
@inject NavMenuState NavMenuState
@inject NostrConversionHelper NostrHelper
@inject INetworkService _networkService
@inject INostrCommunicationFactory _nostrCommunicationFactory
@inject IEncryptionService _encryptionService
@inject IRelayService _RelayService
@inject NavigationManager NavigationManager
@inject IIndexerService indexerService

@inherits BaseComponent

<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}
<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="signature" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Pending Signatures</h5>
            </div>
            <div class="header-actions">
                <button class="btn btn-border-success btn-sm"
                        @onclick="RefreshSignaturesInternal"
                        disabled="@refreshButtonSpinner"
                        title="Refresh">
                    @if (refreshButtonSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <Icon IconName="refresh" Height="24" Width="24" />
                        <span class="button-text ms-2">Refresh</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="row slide-in mt-4">
    <div class="card card-body">
        <p class="mb-0 font-weight-normal text-sm animate-fade-in-delayed">
            Project ID: @ProjectIdentifier
        </p>
    </div>
</div>

<div class="slide-in mt-4">
    @if (!signaturesRequests.Any())
    {
        <div class="card card-body angor-alert-info hover-effect">
            <div class="d-flex align-items-center">
                <span class="me-3 user-select-none animate-rotate">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                </span>
                <span class="text-white" data-cy="projectsGrid">No pending signatures yet...</span>
            </div>
        </div>
    }
    else
    {
        @if (messagesReceived || isLoading)
        {
            <div class="card card-body">
                <div class="d-flex flex-column justify-content-center align-items-center py-5">
                    @if (isLoading)
                    {
                        <div class="text-center mb-4">
                            <h5 class="d-flex align-items-center justify-content-center">
                                <Icon IconName="signature" Width="24" Height="24" class="me-2" />
                                Approving Signatures
                            </h5>
                            <div class="badge bg-primary px-4 py-2 my-3">
                                @numOfSignaturesSigned / @numOfSignatureToSign
                            </div>
                        </div>
                    }
                    <div class="loader"></div>
                </div>
            </div>
        }
        else
        {
            <div class="card card-body">
                <div class="header-container">
                    <div class="header-content">
                        <div class="header-title animate-fade-in">
                            <span class="header-icon-wrapper">
                                <Icon IconName="statistics" Width="32" Height="32" />
                            </span>
                            <h5 class="header-text">Signatures Overview</h5>
                        </div>
                        <div class="header-actions">
                            <button class="btn @(ApproveButtonClass)" @onclick="ApproveAllSignatures" disabled="@ApproveButtonDisabled">
                                <Icon IconName="approved" Width="20" Height="20" />
                                <span class="button-text ms-2">Approve All</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="mt-4 slide-in">
                    @if (signaturesRequests.Any(_ => _ is { SignRecoveryRequest.InvestmentTransactionHex: not null, AmountToInvest: not null }))
                    {
                        <div class="accordion" id="signaturesAccordion">
                            @foreach (var signature in signaturesRequests.Where(_ => _ is { SignRecoveryRequest.InvestmentTransactionHex: not null, AmountToInvest: not null }))
                            {
                                var accordionId = signature.GetHashCode().ToString();
                                <div class="info-card mb-2 shadow-sm border-0 animate-fade-in">
                                    <div class="card-header p-0 bg-transparent">
                                        <div class="d-flex justify-content-between align-items-center p-0">
                                            <!-- Essential Info (Always Visible) -->
                                            <div class="d-flex align-items-center">
                                                <Icon IconName="balance" Width="20" Height="20" Class="me-2" />
                                                <span class="fw-bold text-nowrap">
                                                    @Money.Satoshis(signature.AmountToInvest ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                                </span>
                                                <small class="text-muted ms-3">
                                                    @signature.TimeArrived.FormatDateTime()
                                                </small>
                                            </div>

                                            <!-- Status Badges/Buttons -->
                                            <div class="d-flex align-items-center gap-2">
                                                <!-- Status Badge -->
                                                @if (signature.TimeApproved != null)
                                                {
                                                    @if (signature.Invested != null)
                                                    {
                                                        <div class="badge bg-success d-flex align-items-center"
                                                             title="Approved on @signature.TimeApproved?.FormatDateTime()">
                                                            <Icon IconName="invest" Width="14" Height="14" Class="me-1" />
                                                            <span>Invested</span>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-info d-flex align-items-center"
                                                              title="Approved on @signature.TimeApproved?.FormatDateTime()">
                                                            <Icon IconName="check" Width="14" Height="14" Class="me-1" />
                                                            <span>Approved</span>
                                                        </span>
                                                    }
                                                }

                                                <!-- Action Buttons -->
                                                <div class="d-flex gap-2">
                                                    @if (signature.TimeApproved is null)
                                                    {
                                                        <button class="btn btn-sm btn-border-success animate-scale"
                                                                @onclick="() => ApproveSignatureCheckPassword(signature)"
                                                                disabled="@signaturesRequestsApproving.Any()"
                                                                aria-label="Approve signature">
                                                            @if (signaturesRequestsApproving.ContainsKey(signature))
                                                            {
                                                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                                <span>Approving...</span>
                                                            }
                                                            else
                                                            {
                                                                <Icon IconName="approved" Width="16" Height="16" Class="me-1" />
                                                                <span>Approve</span>
                                                            }
                                                        </button>
                                                    }
                                                    @if (signature.Invested != null)
                                                    {
                                                        <a href="@($"{_networkService.GetPrimaryExplorer().Url}/tx/{signature.Invested.TransactionId}")"
                                                           target="_blank"
                                                           class="btn btn-sm btn-border-success d-flex align-items-center"
                                                           rel="noopener noreferrer">
                                                            <Icon IconName="external-link" Width="16" Height="16" Class="me-1" />
                                                            <span>View TX</span>
                                                        </a>
                                                    }
                                                    <button class="btn btn-sm btn-border-success animate-scale"
                                                            @onclick="() => ShowMessageModal(signature.investorNostrPubKey)"
                                                            aria-label="Message investor">
                                                        @if (pubkeyWithMessages.Contains(signature.investorNostrPubKey))
                                                        {
                                                            <Icon IconName="chat" Width="16" Height="16" Class="me-1" />
                                                            <p>Has messages</p>
                                                        }
                                                        else
                                                        {
                                                            <Icon IconName="chat" Width="16" Height="16" Class="me-1" />
                                                        }
                                                    </button>
                                                    <span class="animate-scale"
                                                          @onclick="() => ToggleAccordion(accordionId)"
                                                          aria-expanded="@(expandedAccordions.Contains(accordionId))"
                                                          aria-label="Toggle details">
                                                        <Icon IconName="@(expandedAccordions.Contains(accordionId) ? "chevron-up" : "chevron-down")" Width="16" />
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Collapsible Content -->
                                    <div class="@(expandedAccordions.Contains(accordionId) ? "show" : "collapse")">
                                        <div class="card-body pt-0 pb-3 px-3 mt-4">
                                            <!-- Investor npub -->
                                            <div class="mb-2">
                                                <label class="form-label small text-muted mb-1">Investor npub</label>
                                                <div class="input-group input-group-sm">
                                                    <input type="text"
                                                           class="form-control form-control-sm text-break"
                                                           value="@NostrHelper.ConvertHexToNpub(signature.investorNostrPubKey)"
                                                           readonly
                                                           aria-label="Investor npub" />
                                                    <button class="btn btn-sm btn-border-success animate-scale"
                                                            @onclick="() => CopyToClipboard(NostrHelper.ConvertHexToNpub(signature.investorNostrPubKey))"
                                                            title="Copy investor npub"
                                                            aria-label="Copy investor npub">
                                                        <Icon IconName="copy" Width="14" Height="14" />
                                                    </button>
                                                </div>
                                            </div>

                                            <!-- Additional npub -->
                                            @if (!string.IsNullOrEmpty(signature.SignRecoveryRequest?.AdditionalNpub))
                                            {
                                                <div class="mb-0">
                                                    <label class="form-label small text-muted mb-1">Additional npub</label>
                                                    <div class="input-group input-group-sm">
                                                        <input type="text"
                                                               class="form-control form-control-sm text-break"
                                                               value="@signature.SignRecoveryRequest.AdditionalNpub"
                                                               readonly
                                                               aria-label="Additional npub" />
                                                        <button class="btn btn-sm btn-border-success animate-scale"
                                                                @onclick="() => CopyToClipboard(signature.SignRecoveryRequest.AdditionalNpub)"
                                                                title="Copy additional npub"
                                                                aria-label="Copy additional npub">
                                                            <Icon IconName="copy" Width="14" Height="14" />
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="card card-body angor-alert-info hover-effect animate-fade-in">
                            <div class="d-flex align-items-center justify-content-center py-4">
                                <span class="me-3 user-select-none animate-rotate">
                                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                                </span>
                                <span class="text-white fs-5" data-cy="no-pending-signatures">No pending signatures yet...</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@if (showMessageModal)
{
    <MessageComponent 
                      OtherUserPubkeyHex="@currentInvestorHexPub"
                      CurrentUserPrvKeyHex="@currentUserPrivateKeyHex"
                      MessageTitle="Investor"
                      OnClose="@OnMessageModalClose"
                      OnNsecRequest="@ShowNsecAndCheckPassword"
                      OnNotification="@((message) => notificationComponent.ShowNotificationMessage(message, 2))"/>
}

@code {
    [Parameter]
    public string ProjectIdentifier { get; set; }

    public FounderProject FounderProject { get; set; }
    private List<SignatureItem> signaturesRequests = new();
    private HashSet<string> expandedAccordions = new();

    private Dictionary<SignatureItem, string> signaturesRequestsApproving = new();

    bool messagesReceived;
    bool scanedForApprovals;

    private bool CanApproveAllSignatures => signaturesRequests != null && signaturesRequests.Any(s => s.SignRecoveryRequest?.InvestmentTransactionHex != null && s.AmountToInvest != null && s.TimeApproved == null);

    private string ApproveButtonClass => CanApproveAllSignatures ? "btn-border-success" : "btn-border";

    private bool ApproveButtonDisabled => !CanApproveAllSignatures;

    private bool isLoading = false;
    private bool refreshButtonSpinner = false;
    private int numOfSignatureToSign = 0;
    private int numOfSignaturesSigned = 0;

    private bool showMessageModal = false;
    private string currentInvestorNpub = "";
    private string currentInvestorHexPub = "";
    private string founderNpub = "";
    private string currentUserPrivateKeyHex = "";
    private string nsecForMessageComponent;

    private ElementReference messagesContainerRef;
    private List<DirectMessage> chatMessages = new();
    private string newMessage = "";
    private bool isLoadingMessages = false;
    private bool isSendingMessage = false;
    private IDisposable messageSubscription;
    private List<ProjectInvestment> investments = new();

    protected override async Task OnInitializedAsync()
    {
        NavMenuState.SetActivePage("founder");

        Logger.LogDebug("OnInitializedAsync");
        if (hasWallet)
        {
            FounderProject = Storage.GetFounderProjects()
                .FirstOrDefault(_ => _.ProjectInfo.ProjectIdentifier == ProjectIdentifier)
                             ?? throw new ArgumentException("The project was not found, try to scan in the founder page");

            await FetchPendingSignatures(FounderProject);

            investments = await indexerService.GetInvestmentsAsync(FounderProject.ProjectInfo.ProjectIdentifier);
            
        }
        Logger.LogDebug("End of OnInitializedAsync");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogDebug("OnAfterRenderAsync");
        await FetchSignaturesCheckPassword();
    }

    protected async Task FetchSignaturesCheckPassword()
    {
        if (signaturesRequests.Any(x => x.AmountToInvest == null))
        {
            if (passwordComponent.HasPassword())
            {
                await FetchSignatures();
            }
            else
            {
                passwordComponent.ShowPassword(FetchSignatures);
            }
        }
    }

    private async Task RefreshSignaturesInternal()
    {
        if (passwordComponent.HasPassword())
        {
            await RefreshSignatures();
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await RefreshSignatures();
            });
        }
    }

    private async Task RefreshSignatures()
    {
        refreshButtonSpinner = true;
        StateHasChanged();

        try
        {
            await FetchPendingSignatures(FounderProject);
            await FetchSignatures();
            await Task.Delay(1000);
        }
        catch (Exception e)
        {
            Logger.LogError($"Error fetching signatures: {e.Message}");
        }
        finally
        {

            refreshButtonSpinner = false;
            StateHasChanged();
        }
    }

    protected async Task FetchSignatures()
    {
        Logger.LogDebug($"handled = {signaturesRequests.Count(x => x.AmountToInvest.HasValue)}, total = {signaturesRequests.Count}");

        if (signaturesRequests.Any(x => x.AmountToInvest == null))
        {
            if (!scanedForApprovals)
            {
                FetchFounderApprovalsSignatures(FounderProject);
                return;
            }

            if (!passwordComponent.HasPassword())
            {
                notificationComponent.ShowErrorMessage("no wallet password");
                return;
            }

            var words = await passwordComponent.GetWalletAsync();

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, FounderProject.ProjectInfo.FounderKey);

            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            foreach (var pendingSignature in signaturesRequests.Where(_ => _.EncryptedMessage != null && _.AmountToInvest == null))
            {
                try
                {
                    var sigResJson = await encryption.DecryptNostrContentAsync(
                        nostrPrivateKeyHex, pendingSignature.investorNostrPubKey, pendingSignature.EncryptedMessage);

                    pendingSignature.SignRecoveryRequest = serializer.Deserialize<SignRecoveryRequest>(sigResJson);
                    if (pendingSignature.SignRecoveryRequest is null)
                    {
                        throw new Exception("Error deserializing signature request");
                    }
                    var investorTrx = _networkConfiguration.GetNetwork().CreateTransaction(pendingSignature.SignRecoveryRequest.InvestmentTransactionHex);

                    // Todo get the actual outputs with taproot type
                    pendingSignature.AmountToInvest = investorTrx.Outputs.AsIndexedOutputs().Skip(2).Take(FounderProject.ProjectInfo.Stages.Count)
                        .Sum(_ => _.TxOut.Value.Satoshi);

                    pendingSignature.Invested = investments.FirstOrDefault(_ => _.TransactionId == investorTrx.GetHash().ToString());
                }
                catch (FormatException fe)
                {
                    Logger.LogError("Format error decrypting transaction hex: {TransactionHex}, Exception: {ExceptionMessage}", pendingSignature?.SignRecoveryRequest?.InvestmentTransactionHex, fe.Message);
                    pendingSignature.SignRecoveryRequest = null;
                }
                catch (CryptographicException ce)
                {
                    Logger.LogError("Cryptographic error decrypting transaction hex: {TransactionHex}, Exception: {ExceptionMessage}", pendingSignature?.SignRecoveryRequest?.InvestmentTransactionHex, ce.Message);
                    pendingSignature.SignRecoveryRequest = null;
                }
                catch (Exception e)
                {
                    Logger.LogError("Error decrypting transaction hex: {TransactionHex}, Exception: {ExceptionMessage}", pendingSignature?.SignRecoveryRequest?.InvestmentTransactionHex, e.Message);
                    pendingSignature.SignRecoveryRequest = null;
                }
            }

            Logger.LogDebug($"Calling StateHasChanged in OnAfterRenderAsync");
            messagesReceived = false;
            StateHasChanged();
        }

        Logger.LogDebug("OnAfterRenderAsync Completed");
        Logger.LogDebug($"Signatures retrieved: {signaturesRequests.Count}");
    }

    private async Task FetchPendingSignatures(FounderProject project)
    {
        await SignService.LookupInvestmentRequestsAsync(project.ProjectInfo.NostrPubKey, null, null,// project.LastRequestForSignaturesTime , async
            (eventId, investorNostrPubKey, encryptedMessage, timeArrived) =>
            {
                Logger.LogDebug($"Sig request event received investorNostrPubKey: {investorNostrPubKey} - timeArrived: {timeArrived}");

                var sigReq = signaturesRequests.FirstOrDefault(_ => _.investorNostrPubKey == investorNostrPubKey);

                if (sigReq != null)
                {
                    if (sigReq.TimeArrived >= timeArrived)
                    {
                        return; //multiple relays could mean the same massage multiple times
                    }

                    Logger.LogDebug($"Sig request event received is replaced");

                    // this is a newer sig request so replace it
                    signaturesRequests.Remove(sigReq);
                }

                Logger.LogDebug($"Sig request event received is new");

                messagesReceived = true;

                var signatureRequest = new SignatureItem
                    {
                        investorNostrPubKey = investorNostrPubKey,
                        TimeArrived = timeArrived,
                        EncryptedMessage = encryptedMessage, //To be encrypted after js interop is loaded
                        EventId = eventId
                    };

                signaturesRequests.Add(signatureRequest);
                Logger.LogDebug($"Added to pendingSignatures");
            },
            () =>
            {
                Logger.LogDebug($"End of messages");
                
                ScanForDmMessages();

                if (!messagesReceived)
                    return;

                Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
            });
    }

    private void FetchFounderApprovalsSignatures(FounderProject project)
    {
        SignService.LookupInvestmentRequestApprovals(project.ProjectInfo.NostrPubKey,
            (investorNostrPubKey, timeApproved, reqEventId) =>
            {
                Logger.LogDebug($"Sig response event received investorNostrPubKey: {investorNostrPubKey} - timeApproved: {timeApproved} - reqEventId: {reqEventId}");

                var signatureRequest = signaturesRequests.FirstOrDefault(_ => _.investorNostrPubKey == investorNostrPubKey);

                if (signatureRequest is null || signatureRequest.TimeApproved != null)
                    return; //multiple relays could mean the same massage multiple times

                if (signatureRequest.TimeArrived > timeApproved)
                {
                    Logger.LogDebug($"The event received is replaced by time");
                    return; // sig of an old request
                }

                if (reqEventId != null && signatureRequest.EventId != reqEventId)
                {
                    Logger.LogDebug($"The event received is replaced by eventid");
                    return; // sig of an old request
                }

                Logger.LogDebug($"The event received is new");

                signatureRequest.TimeApproved = timeApproved;

                Logger.LogDebug($"Added to pendingSignatures");
            },
            () =>
            {
                scanedForApprovals = true;

                if (signaturesRequests.Any(_ => _.TimeApproved != null))
                {
                    var latestApprovedTime = signaturesRequests
                        .Where(x => x.TimeApproved != null)
                        .Max(x => x.TimeArrived);

                    if (FounderProject.LastRequestForSignaturesTime is null || FounderProject.LastRequestForSignaturesTime < latestApprovedTime)
                    {
                        FounderProject.LastRequestForSignaturesTime = latestApprovedTime;
                        Storage.UpdateFounderProject(FounderProject);
                    }
                }

                Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
                Logger.LogDebug($"End of messages on EOSE");
            });
    }

    protected async Task ApproveSignatureCheckPassword(SignatureItem signature)
    {
        if (passwordComponent.HasPassword())
        {
            await ApproveSignature(signature);
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ApproveSignature(signature);
            });
        }
    }

    private async Task ApproveSignature(SignatureItem signature)
    {
        signaturesRequestsApproving.Add(signature, string.Empty);
        StateHasChanged();

        try
        {
            var words = await passwordComponent.GetWalletAsync();

            var operationResult = await PerformSignatureApproval(signature, words);

            if (!operationResult.Success)
            {
                notificationComponent.ShowErrorMessage(operationResult.Message);
            }
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            signaturesRequestsApproving.Remove(signature);
        }

        StateHasChanged();
    }

    private async Task ApproveAllSignatures()
    {
        if (passwordComponent.HasPassword())
        {
            await ProcessSignatures();
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ProcessSignatures();
            });
        }
    }

    private async Task ProcessSignatures()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var pendingSignatures = signaturesRequests
                .Where(s => s.SignRecoveryRequest?.InvestmentTransactionHex != null && s.AmountToInvest != null && s.TimeApproved == null)
                .ToList();

            numOfSignatureToSign = pendingSignatures.Count;
            numOfSignaturesSigned = 0;

            var words = await passwordComponent.GetWalletAsync();

            foreach (var signature in pendingSignatures)
            {
                await PerformSignatureApproval(signature, words);
                numOfSignaturesSigned++;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            isLoading = false;
            passwordComponent.ClearPassword();
        }

        StateHasChanged();
    }

    private async Task<OperationResult> PerformSignatureApproval(SignatureItem signature, WalletWords words)
    {
        try
        {
            var key = DerivationOperations.DeriveFounderRecoveryPrivateKey(words, FounderProject.ProjectInfo.FounderKey);
            var signatureInfo = CreateRecoverySignatures(signature.SignRecoveryRequest.InvestmentTransactionHex, FounderProject.ProjectInfo, Encoders.Hex.EncodeData(key.ToBytes()));

            var sigJson = serializer.Serialize(signatureInfo);

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, FounderProject.ProjectInfo.FounderKey);
            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            var encryptedContent = await encryption.EncryptNostrContentAsync(nostrPrivateKeyHex, signature.investorNostrPubKey, sigJson);

            FounderProject.LastRequestForSignaturesTime = SignService.SendSignaturesToInvestor(encryptedContent, nostrPrivateKeyHex, signature.investorNostrPubKey, signature.EventId);

            Storage.UpdateFounderProject(FounderProject);

            signaturesRequests.Single(_ => _.investorNostrPubKey == signature.investorNostrPubKey && _.TimeApproved is null)
                .TimeApproved = FounderProject.LastRequestForSignaturesTime;

            return new OperationResult { Success = true };
        }
        catch (Exception ex)
        {
            return new OperationResult { Success = false, Message = $"An error occurred: {ex.Message}" };
        }
    }

    private SignatureInfo CreateRecoverySignatures(string transactionHex, ProjectInfo info, string founderSigningPrivateKey)
    {
        var investorTrx = _networkConfiguration.GetNetwork().CreateTransaction(transactionHex);

        // build sigs
        var recoveryTrx = InvestorTransactionActions.BuildRecoverInvestorFundsTransaction(info, investorTrx);
        var sig = FounderTransactionActions.SignInvestorRecoveryTransactions(info, transactionHex, recoveryTrx, founderSigningPrivateKey);

        if (!InvestorTransactionActions.CheckInvestorRecoverySignatures(info, investorTrx, sig))
            throw new InvalidOperationException();

        sig.SignatureType = SignatureInfoType.Recovery;

        return sig;
    }

    public class SignatureItem
    {
        public string investorNostrPubKey { get; set; }

        public long? AmountToInvest { get; set; }

        public DateTime TimeArrived { get; set; }
        public DateTime? TimeApproved { get; set; }

        public SignRecoveryRequest? SignRecoveryRequest { get; set; }
        public string? EncryptedMessage { get; set; }

        public string EventId { get; set; }
        public ProjectInvestment? Invested { get; set; }
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        notificationComponent.ShowNotificationMessage("Copied to clipboard", 2);
    }

    private void ShowMessageModal(string investorNostrPubKey)
    {
        currentInvestorHexPub = investorNostrPubKey;
        currentInvestorNpub = NostrHelper.ConvertHexToNpub(investorNostrPubKey) ?? investorNostrPubKey;

        // Get founder's npub
        founderNpub = NostrHelper.ConvertHexToNpub(FounderProject.ProjectInfo.NostrPubKey) ??
                      FounderProject.ProjectInfo.NostrPubKey;

        // Remove this npub from the HashSet of pubkeys with messages
        pubkeyWithMessages.Remove(investorNostrPubKey);

        var lastScanList = SessionStorage.GetFounderMessagesTimes();
        lastScanList[investorNostrPubKey] = DateTime.UtcNow;
        SessionStorage.SetFounderMessagesTimes(lastScanList);

        // Show Message
        ShowMessageAndCheckPassword();
    }

    private void ShowMessageAndCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ShowMessage();
            });
        }
        else
        {
            _ = ShowMessage();
        }
    }

    private async Task ShowMessage()
    {
        showMessageModal = true;

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var founderNostrPrivateKey = DerivationOperations.DeriveProjectNostrPrivateKey(words, FounderProject.ProjectInfo.FounderKey);
            currentUserPrivateKeyHex = Encoders.Hex.EncodeData(founderNostrPrivateKey.ToBytes());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage("Failed to initialize messaging", ex);
        }
    }

    private void ShowNsecAndCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(async () =>
            {
                await RetrieveAndShowNsec();
            });
        }
        else
        {
            RetrieveAndShowNsec();
        }
    }

    private void OnMessageModalClose()
    {
        showMessageModal = false;
        currentUserPrivateKeyHex = String.Empty;
        StateHasChanged();
    }

    private async Task RetrieveAndShowNsec()
    {
        try
        {
            var words = await passwordComponent.GetWalletAsync();

            if (FounderProject != null)
            {
                var founderNostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, FounderProject.ProjectInfo.FounderKey);
                var nostrHexSecKey = Encoders.Hex.EncodeData(founderNostrPrivateKey.ToBytes());
                var nsecValue = NostrHelper.ConvertHexToNsec(nostrHexSecKey)!;

                nsecForMessageComponent = nsecValue;

                StateHasChanged();
            }
            else
            {
                notificationComponent.ShowErrorMessage("Project information not available");
            }
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage("Failed to retrieve NSEC: " + e.Message);
        }
    }

    HashSet<string> pubkeyWithMessages = new();

    protected void ScanForDmMessages()
    {
        var lastScanList = SessionStorage.GetFounderMessagesTimes();

        foreach (var signatureRequest in signaturesRequests)
        {
            _RelayService.LookupDirectMessagesForPubKey(
                FounderProject.ProjectInfo.NostrPubKey,
                lastScanList.TryGet(signatureRequest.investorNostrPubKey)?.AddSeconds(1),
                1,
                _ =>
                {
                    if (!string.IsNullOrEmpty(_.Pubkey))
                    {
                        pubkeyWithMessages.Add(_.Pubkey);
                    }
                    return Task.CompletedTask;
                }, new[] { signatureRequest.investorNostrPubKey });

        }
    }

    private string GetShortenedNpub(string npub)
    {
        if (string.IsNullOrEmpty(npub) || npub.Length <= 20) return npub;
        return $"{npub.Substring(0, 10)}...{npub.Substring(npub.Length - 10)}";
    }

    private void ToggleAccordion(string accordionId)
    {
        if (expandedAccordions.Contains(accordionId))
        {
            expandedAccordions.Remove(accordionId);
        }
        else
        {
            expandedAccordions.Add(accordionId);
        }
    }

    public void Dispose()
    {
        messageSubscription?.Dispose();
    }
}