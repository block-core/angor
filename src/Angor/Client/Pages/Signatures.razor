@page "/signatures/{ProjectIdentifier}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Client.Services
@using Angor.Shared.ProtocolNew
@using Angor.Client.Models
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using System.Text.Json
@using Angor.Shared.Services
@using System.Security.Cryptography

@inject IJSRuntime JS

@inject ILogger<Signatures> Logger
@inject IDerivationOperations DerivationOperations
@inject IClientStorage Storage;
@inject ISignService SignService
@inject IInvestorTransactionActions InvestorTransactionActions
@inject IFounderTransactionActions FounderTransactionActions
@inject ISerializer serializer
@inject IEncryptionService encryption

@inherits BaseComponent

<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="row slide-in">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between flex-wrap gap-3">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none animate-rotate">
                    <Icon IconName="signature" Height="42" Width="42"/>
                </span>
                <div class="ms-3">
                    <h5 class="mb-0 font-weight-bolder animate-fade-in">
                        Pending Signatures
                    </h5>
                </div>
            </div>
            <button class="btn btn-border mb-0 animate-scale" @onclick="RefreshSignaturesInternal" disabled="@refreshButtonSpinner">
                <i class="@(refreshButtonSpinner ? "rotate-icon" : "")">
                    <Icon IconName="refresh" Width="24" Height="24"></Icon>
                </i>
                <span class="nav-link-text ms-1">Refresh</span>
            </button>
        </div>
        <p class="mb-0 font-weight-normal text-sm text-truncate mt-4 animate-fade-in-delayed">
            Project ID: @ProjectIdentifier
        </p>
    </div>
</div>

<div class="slide-in mt-4">
    @if (!signaturesRequests.Any())
    {
        <div class="row mt-4">
            <div class="card card-body angor-alert-info pt-2 pb-2">
                <div class="d-flex align-items-center">
                    <span class="me-3 user-select-none">
                        <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)"/>
                    </span>
                    <span class="text-white" data-cy="projectsGrid">No pending signatures yet...</span>
                </div>
            </div>
        </div>
    }
    else
    {
        @if (messagesReceived || isLoading)
        {
            <div class="card card-body slide-in mt-4">
                <div class="d-flex justify-content-center align-items-center">
                    <div class="text-center">
                        @if (isLoading)
                        {
                            <h6 class="mb-3">Approving Signatures... @numOfSignaturesSigned / @numOfSignatureToSign</h6>
                        }
                        <div class="loader"></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row g-4">
                <!-- Statistics Cards -->
                <div class="col-md-4">
                    <div class="card card-body p-3 rounded-3 border hover-effect">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Total Requests</h6>
                                <h4 class="mb-0">@signaturesRequests.Count</h4>
                            </div>
                            <div class="stat-icon">
                                <Icon IconName="signature" Height="32" Width="32"/>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card card-body p-3 rounded-3 border hover-effect">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Pending</h6>
                                <h4 class="mb-0">@signaturesRequests.Count(s => s.TimeApproved == null)</h4>
                            </div>
                            <div class="stat-icon">
                                <Icon IconName="pending" Height="32" Width="32"/>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card card-body p-3 rounded-3 border hover-effect">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Approved</h6>
                                <h4 class="mb-0">@signaturesRequests.Count(s => s.TimeApproved != null)</h4>
                            </div>
                            <div class="stat-icon">
                                <Icon IconName="approved" Height="32" Width="32"/>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card card-body slide-in mt-4 hover-effect">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h5 class="card-title mb-0">Signature Requests</h5>
                    <button class="btn @(CanApproveAllSignatures ? "btn-border-success" : "btn-border") animate-scale"
                            @onclick="ApproveAllSignatures" 
                            disabled="@ApproveButtonDisabled">
                        <Icon IconName="approve-all" Width="20" Height="20" class="me-2"/>
                        Approve All
                    </button>
                </div>

                <div class="table-responsive form-control slide-in">
                    <div class="table-container">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7 px-2">Amount</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7 px-2">Received</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7 px-2">Status</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7 px-2">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var signature in signaturesRequests.Where(_ => _ is { TransactionHex: not null, AmountToInvest: not null }))
                                {
                                    <tr>
                                        <td class="align-middle px-2">
                                            <div class="d-flex align-items-center flex-wrap gap-2">
                                                <Icon IconName="bitcoin" Width="24" Height="24"/>
                                                <span class="text-break">@Money.Satoshis(signature.AmountToInvest ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</span>
                                            </div>
                                        </td>
                                        <td class="align-middle px-2">
                                            <span class="text-break">@signature.TimeArrived.ToString("g")</span>
                                        </td>
                                        <td class="align-middle">
                                            @if (signature.TimeApproved is null)
                                            {
                                                <span class="badge bg-warning">Pending</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">Approved</span>
                                            }
                                        </td>
                                        <td class="align-middle">
                                            @if (signature.TimeApproved is null)
                                            {
                                                <button class="btn btn-border-success btn-sm animate-scale" 
                                                        @onclick="() => ApproveSignatureCheckPassword(signature)" 
                                                        disabled="@signaturesRequestsApproving.Any()">
                                                    @if (signaturesRequestsApproving.ContainsKey(signature))
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-2"/>
                                                        <span>Processing...</span>
                                                    }
                                                    else
                                                    {
                                                        <Icon IconName="approve" Width="16" Height="16" class="me-2"/>
                                                        <span>Approve</span>
                                                    }
                                                </button>
                                            }
                                            else
                                            {
                                                <small class="text-muted">
                                                    Approved on @signature.TimeApproved?.ToString("g")
                                                </small>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public string ProjectIdentifier { get; set; }

    public FounderProject FounderProject { get; set; }
    private List<SignatureRequest> signaturesRequests = new();

    
    private Dictionary<SignatureRequest,string> signaturesRequestsApproving = new();

    bool messagesReceived;
    bool scanedForApprovals;

    private bool CanApproveAllSignatures => signaturesRequests != null && signaturesRequests.Any(s => s.TransactionHex != null && s.AmountToInvest != null && s.TimeApproved == null);

    private string ApproveButtonClass => CanApproveAllSignatures ? "btn-border-success" : "btn-border";

    private bool ApproveButtonDisabled => !CanApproveAllSignatures;

    private bool isLoading = false;
    private bool refreshButtonSpinner = false;
    private int numOfSignatureToSign = 0;
    private int numOfSignaturesSigned = 0;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("OnInitializedAsync");
        if (hasWallet)
        {
            FounderProject = Storage.GetFounderProjects()
                .FirstOrDefault(_ => _.ProjectInfo.ProjectIdentifier == ProjectIdentifier)
                             ?? throw new ArgumentException("The project was not found, try to scan in the founder page");

            await FetchPendingSignatures(FounderProject);
        }
        Logger.LogDebug("End of OnInitializedAsync");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogDebug("OnAfterRenderAsync");
        await FetchSignaturesCheckPassword();
    }

    protected async Task FetchSignaturesCheckPassword()
    {
        if (signaturesRequests.Any(x => x.AmountToInvest == null))
        {
            if (passwordComponent.HasPassword())
            {
                await FetchSignatures();
            }
            else
            {
                passwordComponent.ShowPassword(FetchSignatures);
            }
        }
    }

    private async Task RefreshSignaturesInternal()
    {
        if (passwordComponent.HasPassword())
        {
            await RefreshSignatures();
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await RefreshSignatures();
            });
        }
    }

    private async Task RefreshSignatures()
    {
        refreshButtonSpinner = true;
        StateHasChanged();
        
        try
        {
            await FetchPendingSignatures(FounderProject);
            await FetchSignatures();
            await Task.Delay(1000);
        }
        catch (Exception e)
        {
            Logger.LogError($"Error fetching signatures: {e.Message}");
        }
        finally
        {
            
            refreshButtonSpinner = false;
            StateHasChanged();
        }
    }

    protected async Task FetchSignatures()
    {
        Logger.LogDebug($"handled = {signaturesRequests.Count(x => x.AmountToInvest.HasValue)}, total = {signaturesRequests.Count}");

        if (signaturesRequests.Any(x => x.AmountToInvest == null))
        {
            if (!scanedForApprovals)
            {
                FetchFounderApprovalsSignatures(FounderProject);
                return;
            }

            if (!passwordComponent.HasPassword())
            {
                notificationComponent.ShowErrorMessage("no wallet password");
                return;
            }

            var words = await passwordComponent.GetWalletAsync();

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, FounderProject.ProjectIndex);

            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            foreach (var pendingSignature in signaturesRequests.Where(_ => _.EncryptedMessage != null && _.AmountToInvest == null))
            {
                try
                {
                    pendingSignature.TransactionHex = await encryption.DecryptNostrContentAsync(
                        nostrPrivateKeyHex, pendingSignature.investorNostrPubKey, pendingSignature.EncryptedMessage);

                    var investorTrx = _networkConfiguration.GetNetwork().CreateTransaction(pendingSignature.TransactionHex);

                    //Todo get the actual outputs with taproot type
                    pendingSignature.AmountToInvest = investorTrx.Outputs.AsIndexedOutputs().Skip(2).Take(investorTrx.Outputs.Count - 3)
                        .Sum(_ => _.TxOut.Value.Satoshi);
                }
                catch (FormatException fe)
                {
                    Logger.LogError("Format error decrypting transaction hex: {TransactionHex}, Exception: {ExceptionMessage}", pendingSignature?.TransactionHex, fe.Message);
                    pendingSignature.TransactionHex = null;
                }
                catch (CryptographicException ce)
                {
                    Logger.LogError("Cryptographic error decrypting transaction hex: {TransactionHex}, Exception: {ExceptionMessage}", pendingSignature?.TransactionHex, ce.Message);
                    pendingSignature.TransactionHex = null;
                }
                catch (Exception e)
                {
                    Logger.LogError("Error decrypting transaction hex: {TransactionHex}, Exception: {ExceptionMessage}", pendingSignature?.TransactionHex, e.Message);
                    pendingSignature.TransactionHex = null;
                }            }
            Logger.LogDebug($"Calling StateHasChanged in OnAfterRenderAsync");
            messagesReceived = false;
            StateHasChanged();
        }

        Logger.LogDebug("OnAfterRenderAsync Completed");
        Logger.LogDebug($"Signatures retrieved: {signaturesRequests.Count}");
    }

    private async Task FetchPendingSignatures(FounderProject project)
    {
        await SignService.LookupInvestmentRequestsAsync(project.ProjectInfo.NostrPubKey, null, null,// project.LastRequestForSignaturesTime , async
            (eventId, investorNostrPubKey, encryptedMessage, timeArrived) =>
            {
                Logger.LogDebug($"Sig request event received investorNostrPubKey: {investorNostrPubKey} - timeArrived: {timeArrived}");

                var sigReq = signaturesRequests.FirstOrDefault(_ => _.investorNostrPubKey == investorNostrPubKey);

                if (sigReq != null)
                {
                    if (sigReq.TimeArrived >= timeArrived)
                    {
                        return; //multiple relays could mean the same massage multiple times
                    }

                    Logger.LogDebug($"Sig request event received is replaced");

                    // this is a newer sig request so replace it
                    signaturesRequests.Remove(sigReq);
                }

                Logger.LogDebug($"Sig request event received is new");

                messagesReceived = true;

                var signatureRequest = new SignatureRequest
                {
                    investorNostrPubKey = investorNostrPubKey,
                    TimeArrived = timeArrived,
                    EncryptedMessage = encryptedMessage, //To be encrypted after js interop is loaded
                    EventId = eventId
                };

                signaturesRequests.Add(signatureRequest);
                Logger.LogDebug($"Added to pendingSignatures");
            },
            () =>
            {
                Logger.LogDebug($"End of messages");

                if (!messagesReceived)
                    return;

                Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
            });
    }

    private void FetchFounderApprovalsSignatures(FounderProject project)
    {
        SignService.LookupInvestmentRequestApprovals(project.ProjectInfo.NostrPubKey,
            (investorNostrPubKey, timeApproved, reqEventId) =>
            {
                Logger.LogDebug($"Sig response event received investorNostrPubKey: {investorNostrPubKey} - timeApproved: {timeApproved} - reqEventId: {reqEventId}");

                var signatureRequest = signaturesRequests.FirstOrDefault(_ => _.investorNostrPubKey == investorNostrPubKey);

                if (signatureRequest is null || signatureRequest.TimeApproved != null)
                    return; //multiple relays could mean the same massage multiple times

                if (signatureRequest.TimeArrived > timeApproved)
                {
                    Logger.LogDebug($"The event received is replaced by time");
                    return; // sig of an old request
                }

                if (reqEventId != null && signatureRequest.EventId != reqEventId)
                {
                    Logger.LogDebug($"The event received is replaced by eventid");
                    return; // sig of an old request
                }

                Logger.LogDebug($"The event received is new");

                signatureRequest.TimeApproved = timeApproved;

                Logger.LogDebug($"Added to pendingSignatures");
            },
            () =>
            {
                scanedForApprovals = true;

                if (signaturesRequests.Any(_ => _.TimeApproved != null))
                {
                    var latestApprovedTime = signaturesRequests
                        .Where(x => x.TimeApproved != null)
                        .Max(x => x.TimeArrived);

                    if (FounderProject.LastRequestForSignaturesTime is null || FounderProject.LastRequestForSignaturesTime < latestApprovedTime)
                    {
                        FounderProject.LastRequestForSignaturesTime = latestApprovedTime;
                        Storage.UpdateFounderProject(FounderProject);
                    }
                }

                Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
                Logger.LogDebug($"End of messages on EOSE");
            });
    }

    protected async Task ApproveSignatureCheckPassword(SignatureRequest signature)
    {
        if (passwordComponent.HasPassword())
        {
            await ApproveSignature(signature);
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ApproveSignature(signature);
            });
        }
    }

    private async Task ApproveSignature(SignatureRequest signature)
    {
        signaturesRequestsApproving.Add(signature, string.Empty);
        StateHasChanged();

        try
        {
            var words = await passwordComponent.GetWalletAsync();

            var operationResult = await PerformSignatureApproval(signature, words);

            if (!operationResult.Success)
            {
                notificationComponent.ShowErrorMessage(operationResult.Message);
            }
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message,e);
        }
        finally
        {
            signaturesRequestsApproving.Remove(signature);
        }

        StateHasChanged();
    }

    private async Task ApproveAllSignatures()
    {
        if (passwordComponent.HasPassword())
        {
            await ProcessSignatures();
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ProcessSignatures();
            });
        }
    }

    private async Task ProcessSignatures()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var pendingSignatures = signaturesRequests.Where(s => s.TransactionHex != null && s.AmountToInvest != null && s.TimeApproved == null).ToList();
            numOfSignatureToSign = pendingSignatures.Count;
            numOfSignaturesSigned = 0;
        
            var words = await passwordComponent.GetWalletAsync();
        
            foreach (var signature in pendingSignatures)
            {
                await PerformSignatureApproval(signature, words);
                numOfSignaturesSigned++;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message,e);
        }
        finally
        {
            isLoading = false;
            passwordComponent.ClearPassword();
        }
        
        StateHasChanged();
    }

    private async Task<OperationResult> PerformSignatureApproval(SignatureRequest signature, WalletWords words)
    {
        try
        {
            var key = DerivationOperations.DeriveFounderRecoveryPrivateKey(words, FounderProject.ProjectIndex);
            var signatureInfo = signProject(signature.TransactionHex, FounderProject.ProjectInfo, Encoders.Hex.EncodeData(key.ToBytes()));

            var sigJson = serializer.Serialize(signatureInfo);

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, FounderProject.ProjectIndex);
            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            var encryptedContent = await encryption.EncryptNostrContentAsync(
                nostrPrivateKeyHex, signature.investorNostrPubKey, sigJson);

            FounderProject.LastRequestForSignaturesTime = SignService.SendSignaturesToInvestor(encryptedContent, nostrPrivateKeyHex, signature.investorNostrPubKey, signature.EventId);

            Storage.UpdateFounderProject(FounderProject);

            signaturesRequests.Single(_ => _.investorNostrPubKey == signature.investorNostrPubKey && _.TimeApproved is null)
                .TimeApproved = FounderProject.LastRequestForSignaturesTime;

            return new OperationResult { Success = true };
        }
        catch (Exception ex)
        {
            return new OperationResult { Success = false, Message = $"An error occurred: {ex.Message}" };
        }
    }

    private SignatureInfo signProject(string transactionHex, ProjectInfo info, string founderSigningPrivateKey)
    {
        var investorTrx = _networkConfiguration.GetNetwork().CreateTransaction(transactionHex);

        // build sigs
        var recoveryTrx = InvestorTransactionActions.BuildRecoverInvestorFundsTransaction(info, investorTrx);
        var sig = FounderTransactionActions.SignInvestorRecoveryTransactions(info, transactionHex, recoveryTrx, founderSigningPrivateKey);

        if (!InvestorTransactionActions.CheckInvestorRecoverySignatures(info, investorTrx, sig))
            throw new InvalidOperationException();

        return sig;
    }

    public class SignatureRequest
    {
        public string investorNostrPubKey { get; set; }

        public long? AmountToInvest { get; set; }

        public DateTime TimeArrived { get; set; }
        public DateTime? TimeApproved { get; set; }

        public string? TransactionHex { get; set; }
        public string? EncryptedMessage { get; set; }

        public string EventId { get; set; }
    }
}