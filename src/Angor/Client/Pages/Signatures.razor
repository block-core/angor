@page "/signatures/{ProjectIdentifier}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Client.Services
@using Angor.Shared.ProtocolNew
@using Angor.Client.Models
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using System.Text.Json
@using Angor.Shared.Services
@using System.Globalization

@inject IJSRuntime JS

@inject ILogger<Signatures> _Logger
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject ISignService SignService
@inject IInvestorTransactionActions InvestorTransactionActions
@inject IFounderTransactionActions FounderTransactionActions

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<h3>Pending Signatures</h3>

<div class="container mt-4">
    
    Project ID: <span id="transactionID">@ProjectIdentifier</span>

    <NotificationComponent @ref="notificationComponent" />
        
    @if (!signaturesRequests.Any())
    {
        <p><em>No pending signatures yet...</em></p>
    }
    else
    {
        <!-- Signatures Details Section -->
        <div class="row mt-4">
            <div class="col">
                @if (messagesReceived)
                {
                    <div class="loader"></div>
                }
                else
                {
                    <table class="table table-bordered table-hover">
                        <thead>
                        <tr>
                            <th>Investment amount</th>
                            <th>Received at</th>
                            <th>Status</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var signature in signaturesRequests.Where(_ => _ is { TransactionHex: not null, AmountToInvest: not null }))
                        {
                            <tr>
                                <td>@signature.AmountToInvest?.ToString(CultureInfo.CurrentCulture) @network.CoinTicker</td>
                                <td>@signature.TimeArrived.ToString("g")</td>
                                @if (signature.TimeApproved is null)
                                {
                                    <td><button class="btn btn-success" @onclick="() => ApproveSignature(signature)">Approve</button></td>
                                }
                                else
                                {
                                    <td>Approved on - @signature.TimeApproved.ToString()</td>
                                }
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ProjectIdentifier { get; set; }

    public FounderProject FounderProject { get; set; }
    private List<SignatureRequest> signaturesRequests = new();
    private IJSInProcessObjectReference? javascriptNostrToolsModule;
    
    protected override async Task OnInitializedAsync()
    {
        _Logger.LogDebug("OnInitializedAsync");
        if (hasWallet)
        {
            FounderProject = storage.GetFounderProjects()
                .FirstOrDefault(_ => _.ProjectInfo.ProjectIdentifier == ProjectIdentifier)
                             ?? throw new ArgumentException("The project was not found, try to scan in the founder page");

            await FetchPendingSignatures(FounderProject);
        }
        _Logger.LogDebug("End of OnInitializedAsync");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _Logger.LogDebug("OnAfterRenderAsync");
        if (javascriptNostrToolsModule == null && signaturesRequests.Any())
        {
            try
            {
                _Logger.LogDebug("load nostr tools");
                //TODO import the nostr tool module directly to c# class
                javascriptNostrToolsModule = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./NostrToolsMethods.js?version=" + DateTime.UtcNow.Ticks);
            }
            catch (JSException e)
            {
                Console.WriteLine(e);
                notificationComponent.ShowErrorMessage(e.Message);
                return;
            }
        }
        
        _Logger.LogDebug("handled = {Count}, total = {SignaturesRequestsCount}", signaturesRequests.Count(x => x.AmountToInvest.HasValue), signaturesRequests.Count);
        
        if (signaturesRequests.Any(x => x.AmountToInvest == null))
        {
            var nostrPrivateKey = await _derivationOperations.DeriveProjectNostrPrivateKeyAsync(_walletStorage.GetWallet(), FounderProject.ProjectInfo.ProjectIndex);

            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            foreach (var pendingSignature in signaturesRequests.Where(_ => _.AmountToInvest == null))
            {
                pendingSignature.TransactionHex = await javascriptNostrToolsModule.InvokeAsync<string>(
                    "decryptNostr",
                    nostrPrivateKeyHex,
                    pendingSignature.investorPubKey,
                    pendingSignature.TransactionHex);

                try
                {
                    var investorTrx = _networkConfiguration.GetNetwork().CreateTransaction(pendingSignature.TransactionHex);

                    pendingSignature.AmountToInvest = investorTrx.Outputs.AsIndexedOutputs().Skip(2).Take(investorTrx.Outputs.Count - 3) //Todo get the actual outputs with taproot type
                        .Sum(_ => _.TxOut.Value);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    _Logger.LogDebug(pendingSignature.TransactionHex);
                    pendingSignature.TransactionHex = null;
                }
            }
            _Logger.LogDebug($"Calling StateHasChanged in OnAfterRenderAsync");
            messagesReceived = false;
            StateHasChanged();
        }
        
        _Logger.LogDebug("OnAfterRenderAsync Completed");
    }
    
    bool messagesReceived;

    private async Task FetchPendingSignatures(FounderProject project)
    {
        await SignService.LookupInvestmentRequestsAsync(project.ProjectInfo.NostrPubKey, project.LastRequestForSignaturesTime , async 
            (investorPubKey,encryptedMessage, requestTime) =>
        {
            _Logger.LogDebug($"Event received");
            
            if (signaturesRequests.Any(_ => _.investorPubKey == investorPubKey))
                return; //multiple relays could mean the same massage multiple times
            
            _Logger.LogDebug($"Event received is new");
            
            messagesReceived = true;
            
            var signatureRequest = new SignatureRequest
            {
                investorPubKey = investorPubKey,
                TimeArrived = requestTime,
                TransactionHex = encryptedMessage //To be encrypted after js interop is loaded
            };
                
            signaturesRequests.Add(signatureRequest);
            _Logger.LogDebug($"Added to pendingSignatures");
        }, 
            () =>
            {
                _Logger.LogDebug($"End of messages");
                
                if (!messagesReceived) 
                    return;
                
                _Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
            });
    }

    private async Task ApproveSignature(SignatureRequest signature)
    {
        var key = _derivationOperations.DeriveFounderRecoveryPrivateKey(_walletStorage.GetWallet(), FounderProject.ProjectInfo.ProjectIndex);

        var signatureInfo = signProject(signature.TransactionHex, FounderProject.ProjectInfo, Encoders.Hex.EncodeData(key.ToBytes()));
        
        var sigJson = JsonSerializer.Serialize(signatureInfo, RelayService.settings);
        
        var nostrPrivateKey = await _derivationOperations.DeriveProjectNostrPrivateKeyAsync(_walletStorage.GetWallet(), FounderProject.ProjectInfo.ProjectIndex);

        var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());  
        
        var encryptedContent = await javascriptNostrToolsModule.InvokeAsync<string>(
            "encryptNostr",
            nostrPrivateKeyHex,
            signature.investorPubKey,
            sigJson);

        FounderProject.LastRequestForSignaturesTime = SignService.SendSignaturesToInvestor(encryptedContent, nostrPrivateKeyHex, signature.investorPubKey);

        storage.UpdateFounderProject(FounderProject);
        
        signaturesRequests.Single(_ => _.investorPubKey == signature.investorPubKey && _.TimeApproved is null)
            .TimeApproved = FounderProject.LastRequestForSignaturesTime;
        
        StateHasChanged();
    }
    
    private SignatureInfo signProject(string transactionHex,ProjectInfo info, string founderSigningPrivateKey)
    {
        var investorTrx = _networkConfiguration.GetNetwork().CreateTransaction(transactionHex);

        // build sigs
        var recoveryTrx = InvestorTransactionActions.BuildRecoverInvestorFundsTransaction(info, investorTrx);
        var sig = FounderTransactionActions.SignInvestorRecoveryTransactions(info, transactionHex, recoveryTrx, founderSigningPrivateKey);

        if (!InvestorTransactionActions.CheckInvestorRecoverySignatures(info, investorTrx, sig))
            throw new InvalidOperationException();

        return sig;
    }

    public class SignatureRequest
    {
        public string investorPubKey { get; set; }

        public decimal? AmountToInvest { get; set; }

        public DateTime TimeArrived { get; set; }
        public DateTime? TimeApproved { get; set; }

        public string? TransactionHex { get; set; }
    }
}