@page "/signatures/{ProjectIdentifier}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Client.Services
@using Angor.Shared.ProtocolNew
@using Angor.Client.Models
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using System.Text.Json
@using Angor.Shared.Services

@inject IJSRuntime Js

@inject ILogger<Signatures> Logger
@inject IDerivationOperations DerivationOperations
@inject IClientStorage Storage;
@inject ISignService SignService
@inject IInvestorTransactionActions InvestorTransactionActions
@inject IFounderTransactionActions FounderTransactionActions

@inherits BaseComponent

@if (!HasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container mt-4">
    <h1>Pending Signatures</h1>
    Project ID: <span id="transactionID">@ProjectIdentifier</span>

    <NotificationComponent @ref="NotificationComponent" />
        
    @if (!_signaturesRequests.Any())
    {
        <p><em>No pending signatures yet...</em></p>
    }
    else
    {
        <!-- Signatures Details Section -->
        <div class="row mt-4">
            <div class="col">
                @if (_messagesReceived)
                {
                    <div class="loader"></div>
                }
                else
                {
                    <table class="table table-bordered table-hover">
                        <thead>
                        <tr>
                            <th>Investment amount</th>
                            <th>Received at</th>
                            <th>Status</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var signature in _signaturesRequests.Where(_ => _ is { TransactionHex: not null, AmountToInvest: not null }))
                        {
                            <tr>
                                <td>@Money.Coins(signature.AmountToInvest ?? 0).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</td>
                                <td>@signature.TimeArrived.ToString("g")</td>
                                @if (signature.TimeApproved is null)
                                {
                                    <td><button class="btn btn-success" @onclick="() => ApproveSignature(signature)">Approve</button></td>
                                }
                                else
                                {
                                    <td>Approved on - @signature.TimeApproved.ToString()</td>
                                }
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ProjectIdentifier { get; set; }

    public FounderProject FounderProject { get; set; }
    private List<SignatureRequest> _signaturesRequests = new();
    private IJSInProcessObjectReference? _javascriptNostrToolsModule;

    bool _messagesReceived;
    bool _scanedForApprovals;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("OnInitializedAsync");
        if (HasWallet)
        {
            FounderProject = Storage.GetFounderProjects()
                .FirstOrDefault(_ => _.ProjectInfo.ProjectIdentifier == ProjectIdentifier)
                             ?? throw new ArgumentException("The project was not found, try to scan in the founder page");

            await FetchPendingSignatures(FounderProject);
        }
        Logger.LogDebug("End of OnInitializedAsync");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogDebug("OnAfterRenderAsync");
        if (_javascriptNostrToolsModule == null && _signaturesRequests.Any())
        {
            try
            {
                Logger.LogDebug("load nostr tools");
                //TODO import the nostr tool module directly to c# class
                _javascriptNostrToolsModule = await Js.InvokeAsync<IJSInProcessObjectReference>("import", "./NostrToolsMethods.js?version=" + DateTime.UtcNow.Ticks);
            }
            catch (JSException e)
            {
                Console.WriteLine(e);
                NotificationComponent.ShowErrorMessage(e.Message);
                return;
            }
        }

        Logger.LogDebug("handled = {Count}, total = {SignaturesRequestsCount}", _signaturesRequests.Count(x => x.AmountToInvest.HasValue), _signaturesRequests.Count);

        if (_signaturesRequests.Any(x => x.AmountToInvest == null))
        {
            if (!_scanedForApprovals)
            {
                FetchFounderApprovalsSignatures(FounderProject);
                return;
            }

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(WalletStorage.GetWallet().WalletWords, FounderProject.ProjectIndex);

            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            foreach (var pendingSignature in _signaturesRequests.Where(_ => _.AmountToInvest == null))
            {
                pendingSignature.TransactionHex = await _javascriptNostrToolsModule.InvokeAsync<string>(
                    "decryptNostr",
                    nostrPrivateKeyHex,
                    pendingSignature.InvestorPubKey,
                    pendingSignature.TransactionHex);

                try
                {
                    var investorTrx = NetworkConfiguration.GetNetwork().CreateTransaction(pendingSignature.TransactionHex);

                    pendingSignature.AmountToInvest = investorTrx.Outputs.AsIndexedOutputs().Skip(2).Take(investorTrx.Outputs.Count - 3) //Todo get the actual outputs with taproot type
                        .Sum(_ => _.TxOut.Value.ToUnit(MoneyUnit.BTC));
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    Logger.LogDebug(pendingSignature.TransactionHex);
                    pendingSignature.TransactionHex = null;
                }
            }
            Logger.LogDebug($"Calling StateHasChanged in OnAfterRenderAsync");
            _messagesReceived = false;
            StateHasChanged();
        }

        Logger.LogDebug("OnAfterRenderAsync Completed");
    }



    private async Task FetchPendingSignatures(FounderProject project)
    {
        await SignService.LookupInvestmentRequestsAsync(project.ProjectInfo.NostrPubKey, null,// project.LastRequestForSignaturesTime , async 
            (eventId, investorPubKey, encryptedMessage, timeArrived) =>
        {
            Logger.LogDebug($"Sig request event received investorPubKey: {investorPubKey} - timeArrived: {timeArrived}");

            var sigReq = _signaturesRequests.FirstOrDefault(_ => _.InvestorPubKey == investorPubKey);

            if (sigReq != null)
            {
                if (sigReq.TimeArrived < timeArrived)
                {
                    Logger.LogDebug($"Sig request event received is replaced");

                    // this is a newer sig request so replace it
                    _signaturesRequests.Remove(sigReq);
                }
                else
                {
                    return; //multiple relays could mean the same massage multiple times
                }
            }

            Logger.LogDebug($"Sig request event received is new");

            _messagesReceived = true;

            var signatureRequest = new SignatureRequest
            {
                InvestorPubKey = investorPubKey,
                TimeArrived = timeArrived,
                TransactionHex = encryptedMessage, //To be encrypted after js interop is loaded
                EventId = eventId
            };

            _signaturesRequests.Add(signatureRequest);
            Logger.LogDebug($"Added to pendingSignatures");
        }, 
            () =>
            {
                Logger.LogDebug($"End of messages");

                if (!_messagesReceived) 
                    return;

                Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
            });
    }

    private void FetchFounderApprovalsSignatures(FounderProject project)
    {
        SignService.LookupInvestmentRequestApprovals(project.ProjectInfo.NostrPubKey,  
            (investorPubKey, timeApproved, reqEventId) =>
            {
                Logger.LogDebug($"Sig response event received investorPubKey: {investorPubKey} - timeApproved: {timeApproved} - reqEventId: {reqEventId}");

                var signatureRequest = _signaturesRequests.FirstOrDefault(_ => _.InvestorPubKey == investorPubKey);

                if (signatureRequest is null || signatureRequest.TimeApproved != null)
                    return; //multiple relays could mean the same massage multiple times
                
                if (signatureRequest.TimeArrived > timeApproved)
                {
                    Logger.LogDebug($"The event received is replaced by time");
                    return; // sig of an old request 
                }

                if (reqEventId != null && signatureRequest.EventId != reqEventId)
                {
                    Logger.LogDebug($"The event received is replaced by eventid");
                    return; // sig of an old request
                }

                Logger.LogDebug($"The event received is new");

                signatureRequest.TimeApproved = timeApproved;

                Logger.LogDebug($"Added to pendingSignatures");
            }, 
            () =>
            {
                _scanedForApprovals = true;

                if (_signaturesRequests.Any(_ => _.TimeApproved != null))
                {
                    var latestApprovedTime = _signaturesRequests
                        .Where(x => x.TimeApproved != null)
                        .Max(x => x.TimeArrived);

                    if (FounderProject.LastRequestForSignaturesTime is null || FounderProject.LastRequestForSignaturesTime < latestApprovedTime)
                    {
                        FounderProject.LastRequestForSignaturesTime = latestApprovedTime;
                        Storage.UpdateFounderProject(FounderProject);   
                    }
                }

                Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
                Logger.LogDebug($"End of messages on EOSE");
            });
    }

    private async Task ApproveSignature(SignatureRequest signature)
    {
        var operationResult = await NotificationComponent.LongOperation(async () =>
        {
            var walletWords = WalletStorage.GetWallet().WalletWords;

            var key = DerivationOperations.DeriveFounderRecoveryPrivateKey(walletWords, FounderProject.ProjectIndex);

            var signatureInfo = SignProject(signature.TransactionHex, FounderProject.ProjectInfo, Encoders.Hex.EncodeData(key.ToBytes()));

            var sigJson = JsonSerializer.Serialize(signatureInfo, RelayService.Settings);

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(walletWords, FounderProject.ProjectIndex);

            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            var encryptedContent = await _javascriptNostrToolsModule.InvokeAsync<string>(
                "encryptNostr",
                nostrPrivateKeyHex,
                signature.InvestorPubKey,
                sigJson);

            FounderProject.LastRequestForSignaturesTime = SignService.SendSignaturesToInvestor(encryptedContent, nostrPrivateKeyHex, signature.InvestorPubKey, signature.EventId);

            Storage.UpdateFounderProject(FounderProject);

            _signaturesRequests.Single(_ => _.InvestorPubKey == signature.InvestorPubKey && _.TimeApproved is null)
                .TimeApproved = FounderProject.LastRequestForSignaturesTime;

            return new OperationResult { Success = true };
        });

        if (operationResult.Success)
        {
            StateHasChanged();
        }
        else
        {
            NotificationComponent.ShowErrorMessage(operationResult.Message);
        }
    }
    
    private SignatureInfo SignProject(string transactionHex,ProjectInfo info, string founderSigningPrivateKey)
    {
        var investorTrx = NetworkConfiguration.GetNetwork().CreateTransaction(transactionHex);

        // build sigs
        var recoveryTrx = InvestorTransactionActions.BuildRecoverInvestorFundsTransaction(info, investorTrx);
        var sig = FounderTransactionActions.SignInvestorRecoveryTransactions(info, transactionHex, recoveryTrx, founderSigningPrivateKey);

        if (!InvestorTransactionActions.CheckInvestorRecoverySignatures(info, investorTrx, sig))
            throw new InvalidOperationException();

        return sig;
    }

    public class SignatureRequest
    {
        public string InvestorPubKey { get; set; }

        public decimal? AmountToInvest { get; set; }

        public DateTime TimeArrived { get; set; }
        public DateTime? TimeApproved { get; set; }

        public string? TransactionHex { get; set; }

        public string EventId { get; set; }
    }
}