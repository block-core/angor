@page "/create"
@using Angor.Shared.Models
@using Angor.Shared
@using Angor.Client.Storage
@using Blockcore.Consensus.TransactionInfo
@using Angor.Client.Services
@using Angor.Shared.ProtocolNew
@using Angor.Shared.Services
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Nostr.Client.Messages
@using Nostr.Client.Messages.Metadata
@using Angor.Client.Models

@implements IDisposable
@inherits BaseComponent
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IWalletOperations _WalletOperations
@inject IRelayService _RelayService

@inject ISignService _SignService

@inject IFounderTransactionActions _founderTransactionActions

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container mt-4">
    <h1 class="mb-4">Create New Project</h1>

    <NotificationComponent @ref="notificationComponent"/>

    @if (!nostrProfileCreated)
    {
        <EditForm Model="NostrMetadata" OnValidSubmit="CreatNostrProfile">
            <div class="mb-3">
                <label for="NostrMetadataName" class="form-label">Project name</label>
                <InputText id="NostrMetadataName" @bind-Value="NostrMetadata.Name" class="form-control" placeholder="Enter the project name"/>
            </div>
            
            <div class="mb-3">
                <label for="NostrMetadataAbout" class="form-label">About</label>
                <InputTextArea id="NostrMetadataAbout" @bind-Value="NostrMetadata.About" class="form-control" placeholder="Enter details about the project"/>
            </div>

            <div class="mb-3">
                <label for="NostrMetadataName" class="form-label">Project website</label>
                <InputText id="NostrMetadataName" @bind-Value="NostrMetadata.Website" class="form-control" placeholder="Enter the project name"/>
            </div>
            
            <div class="mb-3">
                <label for="NostrMetadataBanner" class="form-label">Banner</label>
                <InputText id="NostrMetadataBanner" @bind-Value="NostrMetadata.Banner" class="form-control"/>
            </div>
            
            <div class="mb-3">
                <label for="NostrMetadataNip05" class="form-label">Nip 05</label>
                <InputText id="NostrMetadataNip05" @bind-Value="NostrMetadata.Nip05" class="form-control"/>
            </div>
            
            <div class="mb-3">
                <label for="NostrMetadataNip57" class="form-label">Nip 57 (zaps)</label>
                <InputText id="NostrMetadataNip57" @bind-Value="NostrMetadata.Nip57" class="form-control"/>
            </div>
            
            <div class="mb-3">
                <label for="NostrMetadataPicture" class="form-label">Image</label>
                <InputText id="NostrMetadataPicture" @bind-Value="NostrMetadata.Picture" class="form-control" placeholder="Select a project picture"/>
            </div>
            
                    <!-- Save & Publish Buttons -->
                    <div class="mb-3">
                        <button type="submit" class="btn btn-success">Next</button>
                    </div>
            
        </EditForm>
    }
    else
    {
    <EditForm Model="project" OnValidSubmit="CreatProject">
        
        <!-- Angor Fee Key -->
        <div class="mb-3">
            <label for="angorFeeKey" class="form-label">Project identifier</label>
            <InputText id="angorFeeKey" @bind-Value="project.ProjectIdentifier" class="form-control" placeholder="Enter angor fee key" readonly />
        </div>

        <!-- Founder Key -->
        <div class="mb-3">
            <label for="founderKey" class="form-label">Founder Key</label>
            <InputText id="founderKey" @bind-Value="project.FounderKey" class="form-control" placeholder="Enter founder key" readonly />
        </div>

        <!-- Start Date -->
        <div class="mb-3">
            <label for="startDate" class="form-label">Start Date</label>
            <InputDate id="startDate" @bind-Value="project.StartDate" class="form-control"/>
        </div>

        <!-- Penalty Date -->
        <div class="mb-3">
            <label for="penaltyDays" class="form-label">Penalty Days</label>
            <InputNumber id="penaltyDays" @bind-Value="project.PenaltyDays" class="form-control" />
        </div>

        <!-- Expiry Date -->
        <div class="mb-3">
            <label for="expiryDate" class="form-label">Expiry Date</label>
            <InputDate id="expiryDate" @bind-Value="project.ExpiryDate" class="form-control"/>
        </div>

        <!-- Target Amount -->
        <div class="mb-3">
            <label for="targetAmount" class="form-label">Target Amount</label>
            <InputNumber id="targetAmount" @bind-Value="project.TargetAmount" class="form-control" placeholder="Enter target amount"/>
        </div>

        <!-- Stages -->
        <h3 class="mb-3">Stages</h3>
        @foreach (var stage in project.Stages)
        {
            <div class="mb-3">
                <label class="form-label">Stage @project.Stages.IndexOf(stage)</label>
                <div class="input-group">
                    <InputNumber @bind-Value="stage.AmountToRelease" class="form-control" placeholder="Enter amount to release as a percentage" min="1" max="100" step="1"/>
                    <InputDate @bind-Value="stage.ReleaseDate" class="form-control"/>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveStage(stage)">Remove</button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary mb-3" @onclick="AddStage">Add Stage</button>

        <!-- Save & Publish Buttons -->
        <div class="mb-3">
            <button type="submit" class="btn btn-success">Next</button>
        </div>
    </EditForm>
    }
    @if (showCreateModal)
    {
        <!-- Confirmation Modal -->
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmation</h5>
                        <button type="button" class="btn-close" @onclick="() => showCreateModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <p class="mb-1"><strong>Project Identifier:</strong> @project.ProjectIdentifier</p>
                        <p class="mb-1"><strong>Founder Key:</strong> @project.FounderKey.Substring(0, 10)...</p> <!-- Display only the first 10 characters -->

                        <p class="mb-1"><strong>Target amount:</strong> @project.TargetAmount @network.CoinTicker</p>

                        <p class="mb-1"><strong>Start date:</strong> @project.StartDate.ToString("dd/MM/yyyy") in @((project.StartDate - DateTime.Now).Days) days</p>
                        <p class="mb-1"><strong>Expiry date:</strong> @project.ExpiryDate.ToString("dd/MM/yyyy") in @((project.ExpiryDate - DateTime.Now).Days) days</p>
                        <p class="mb-1"><strong>Penalty days:</strong> @project.PenaltyDays days</p>

                        <p class="mb-1"><strong>Miner fee:</strong> [Your fee here]</p>
                        <p class="mb-1"><strong>Angor fee:</strong> 1000 sats</p>

                        <hr>

                        <div class="mb-3">
                            <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                            <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="FeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                        </div>

                        <hr>

                        <h6 class="mt-3 mb-2">Stages</h6>
                        @foreach (var stage in project.Stages)
                        {
                            <div style="border-top: 1px solid #dee2e6; padding-top: 10px; margin-top: 10px; font-size: 0.85em;">
                                <p class="mb-1"><strong>Stage percent:</strong> @stage.AmountToRelease % </p>
                                <p class="mb-1"><strong>Stage date:</strong> @stage.ReleaseDate.ToString("dd/MM/yyyy") - @((stage.ReleaseDate - project.StartDate).Days) days after project starts </p>
                            </div>
                        }
                        
                        <hr>

                        <p class="mt-3">Are you sure you want to continue?</p>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showCreateModal = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="Send">Confirm</button>
                    </div>
                </div>
            </div>
        </div>

    }
</div>

@code {

    private bool sendConfirmModal;
    private bool hasWallet;
    private bool showCreateModal;

    Transaction unsignedTransaction;
    Transaction signedTransaction;

    private FeeData feeData = new();
    
    private ProjectInfo project = new ProjectInfo
    {
        StartDate = DateTime.UtcNow,
        PenaltyDays = 100,
        ExpiryDate = DateTime.UtcNow.AddDays(50),
        TargetAmount = 100,
        CreationTransactionId = "unknowen",
        Stages = new List<Stage>
        {
            new () { AmountToRelease = 10, ReleaseDate = DateTime.UtcNow }, //.AddDays(10) }, during testing we often need to spend a stage immediately
            new () { AmountToRelease = 30, ReleaseDate = DateTime.UtcNow.AddDays(20) },
            new () { AmountToRelease = 60, ReleaseDate = DateTime.UtcNow.AddDays(30) },
        }
    };

    ProjectMetadata NostrMetadata = new ();
    bool nostrProfileCreated;
    bool applicationDataOnNostr;

    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            var projects = storage.GetFounderProjects();
            var keys = storage.GetFounderKeys();
            var latestProject = projects.MaxBy(p => p.ProjectInfo.ProjectIndex);
            var projectsKeys = _derivationOperations.GetProjectKey(keys, latestProject?.ProjectInfo.ProjectIndex + 1 ?? 1);

            project.ProjectIndex = projectsKeys.Index;
            project.FounderKey = projectsKeys.FounderKey;
            project.FounderRecoveryKey = projectsKeys.FounderRecoveryKey;
            project.ProjectIdentifier = projectsKeys.ProjectIdentifier;
            project.NostrPubKey = projectsKeys.NostrPubKey;
        }

        await _RelayService.ConnectToRelaysAsync();

        _RelayService.RequestProjectCreateEventsByPubKey(_ => //TODO change the state to be storage driven and not event driven
        {
            nostrProfileCreated = _.Kind == NostrKind.Metadata;

            if (_.Kind != NostrKind.ApplicationSpecificData)
                return; //In case of a crashed application in the middle of the call

            if (_.Content == null)
                return;
            var nostrProject = System.Text.Json.JsonSerializer.Deserialize<ProjectInfo>(_.Content, RelayService.settings);
            var findProject = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == nostrProject!.ProjectIdentifier);
            if (findProject == null)
                storage.AddFounderProject(new FounderProject { ProjectInfo = nostrProject });
            NavigationManager.NavigateTo($"/view/{nostrProject.ProjectIdentifier}");
        },
            StateHasChanged,
            project.NostrPubKey);
    }

    private async Task CreatNostrProfile()
    {
        var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(_walletStorage.GetWallet(), project.ProjectIndex);
        
        var resultId = await _RelayService.CreateNostrProfileAsync( NostrMetadata.ToNostrMetadata(), 
            NBitcoin.DataEncoders.Encoders.Hex.EncodeData((byte[])nostrKey.ToBytes()));
        
        _RelayService.RegisterOKMessageHandler(resultId, _ =>
        {
            if (_.EventId != resultId) 
                return;
            if (!_.Accepted)
                notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!"); //TODO add export project info
            nostrProfileCreated = true;
            StateHasChanged();
        });
    }

    private async Task CreatProject()
    {
        if (project.Stages.Count() < 3)
        {
            notificationComponent.ShowErrorMessage("There must be at least 3 stages");
            return;
        }

        if (project.Stages.Sum(s => s.AmountToRelease) != 100)
        {
            notificationComponent.ShowErrorMessage("The stages must sum to 100%");
            return;
        }

        var projects = storage.GetFounderProjects();

        if (projects.Any(a => project.ProjectIdentifier == a.ProjectInfo.ProjectIdentifier))
        {
            notificationComponent.ShowErrorMessage("This wallet already has a project with this index");
            return;
        }

        DateTime prev = DateTime.UtcNow;
        foreach (var stage in project.Stages)
        {
            if ((stage.ReleaseDate - prev).Days < 0)
                notificationComponent.ShowErrorMessage("Stages must be chronological");
        }

        var operationResult = await notificationComponent.LongOperation(async () =>
        {
            var accountInfo = storage.GetAccountInfo(network.Name);

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            unsignedTransaction = _founderTransactionActions.CreateNewProjectTransaction(project.FounderKey, _derivationOperations.AngorKeyToScript(project.ProjectIdentifier), 10000, project.NostrPubKey);

            signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, _walletStorage.GetWallet(), accountInfo, feeData.SelectedFeeEstimation);

            project.CreationTransactionId = signedTransaction.GetHash().ToString();

            return new OperationResult { Success = true };

        });

        if (operationResult.Success)
        {
            showCreateModal = true;
        }
        else
        {
            notificationComponent.ShowErrorMessage(operationResult.Message);
        }
    }

    private void FeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);

                    signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, _walletStorage.GetWallet(), accountInfo, feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        var operationResult = await notificationComponent.LongOperation(async () =>
        {
            showCreateModal = false;
            
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(_walletStorage.GetWallet(), project.ProjectIndex);

            var nostrKeyHex = NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes());
            
            var resultId = await _RelayService.AddProjectAsync(project, nostrKeyHex);
            
            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction);

            if (!response.Success)
            {
                await _RelayService.DeleteProjectAsync(resultId, nostrKeyHex);
                return response;
            }

            storage.AddFounderProject(new FounderProject { ProjectInfo = project });
            
            _RelayService.RegisterOKMessageHandler(resultId, _ =>
            {
                if (_.EventId != resultId) 
                    return;
                if (!_.Accepted)
                    notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!"); //TODO add export project info
            });

            return new OperationResult { Success = response.Success, Message = response.Message };
        });

        if (operationResult.Success)
        {
            notificationComponent.ShowNotificationMessage("Project created", 1);

            NavigationManager.NavigateTo($"/view/{project.ProjectIdentifier}");
        }
        else
        {
            notificationComponent.ShowErrorMessage(operationResult.Message);
        }
    }

    private void AddStage()
    {
        project.Stages.Add(new Stage { ReleaseDate = DateTime.UtcNow });
    }

    private void RemoveStage(Stage stage)
    {
        project.Stages.Remove(stage);
    }

    public void Dispose()
    {
        _RelayService.CloseConnection();
    }

}
