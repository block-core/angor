@page "/create"
@using Angor.Client.Models
@using Angor.Client.Storage
@using Angor.Shared
@using Angor.Shared.Models
@using Angor.Shared.Protocol
@using Angor.Shared.Services
@using Angor.Shared.Utilities
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Blockcore.Networks
@using System.Globalization
@inherits BaseComponent
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject NavigationManager NavigationManager
@inject IWalletOperations _WalletOperations
@inject IPsbtOperations _PsbtOperations
@inject IRelayService _RelayService
@inject ILogger<Create> _Logger;
@inject IHtmlStripperService HtmlStripperService;
@inject IJSRuntime JS;
@inject NavMenuState NavMenuState
@inject IFeatureFlagService _featureFlagService

@inject IWalletUIService _walletUIService;

@inject IFounderTransactionActions _founderTransactionActions
<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo("/wallet");
    return;
}

@if (!isValid)
{
    <div class="alert alert-danger">
        <h4>Error</h4>
        <p>@errorMessage</p>
    </div>
}
<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="add" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Create New Project</h5>
            </div>
            <div class="header-actions">

            </div>
        </div>
    </div>
</div>

<div class="card card-body mt-4 slide-in">

    <div class="animate-fade-in">
        <h5 class="mb-4 d-flex align-items-center">
            <Icon IconName="view-project" Width="24" Height="24" Class="me-2" />
            Project Profile
        </h5>
        <div class="row g-4">

            <div class="col-lg-7 col-12">
                <EditForm Model="project.Metadata">

                    <div class="info-card">
                        <div class="mb-3">
                            <label for="NostrMetadataName" class="form-label">Project name</label>
                            <InputText id="NostrMetadataName" autocomplete="off" @bind-Value="project.Metadata.Name" class="form-control" placeholder="Enter the name of your project" disabled="@nostrMetadataCreated" maxlength="200" />
                            <small class="form-text text-muted">
                                @((project.Metadata?.Name?.Length ?? 0).ToString())/200 characters
                            </small>
                        </div>

                        <div class="mb-3">
                            <label for="NostrMetadataAbout" class="form-label">About</label>
                            <InputTextArea id="NostrMetadataAbout" autocomplete="off" @bind-Value="project.Metadata.About" class="form-control" placeholder="Provide a brief description of the project" disabled="@nostrMetadataCreated" maxlength="400" />
                            <small class="form-text text-muted">
                                @((project.Metadata?.About?.Length ?? 0).ToString())/400 characters
                            </small>
                        </div>

                        <div class="mb-3">
                            <label for="NostrMetadataWebsite" class="form-label">Project website</label>
                            <InputText type="url"
                                       id="NostrMetadataWebsite"
                                       autocomplete="off"
                                       @bind-Value="project.Metadata.Website"
                                       @onblur="OnWebsiteChanged"
                                       class=@($"form-control{(websiteError ? " is-invalid" : "")}")
                                       placeholder="Enter the URL of the project website (https://example.com)"
                                       disabled="@nostrMetadataCreated" />
                            @if (websiteError)
                            {
                                <div class="text-danger mt-1 small">
                                    @websiteErrorMessage
                                </div>
                            }
                        </div>

                        <div class="mb-3">
                            <label for="NostrMetadataBanner" class="form-label d-flex align-items-center">
                                Banner Image Url
                                <span class="ms-2">(Recommended size: 820×312px)</span>
                            </label>
                            <InputText id="NostrMetadataBanner" autocomplete="off" @bind-Value="project.Metadata.Banner" class="form-control" placeholder="Enter the URL for the project banner image" disabled="@nostrMetadataCreated" />
                        </div>

                        <div class="mb-3">
                            <label for="NostrMetadataPicture" class="form-label d-flex align-items-center">
                                Avatar Image Url
                                <span class="ms-2">(Recommended size: 170×170px)</span>
                            </label>
                            <InputText id="NostrMetadataPicture" autocomplete="off" @bind-Value="project.Metadata.Picture" class="form-control" placeholder="Enter the URL for the project logo or profile picture" disabled="@nostrMetadataCreated" />
                        </div>
                    </div>

                </EditForm>



                <div class="animate-fade-in mt-4">
                    <EditForm Model="project">
                        <h5 class="mb-4 d-flex align-items-center">
                            <Icon IconName="view-project" Width="24" Height="24" Class="me-2" />
                            Target Fundraising Goal
                        </h5>

                        <!-- Target Amount -->
                        <div class="info-card mb-4 slide-in">
                            <div class="mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <Icon IconName="balance" Width="20" Height="20" Class="me-2 text-primary" />
                                    <label for="targetAmount" class="form-label mb-0 fw-semibold">Target Amount</label>
                                </div>
                                <p class="form-text text-muted mt-0 mb-2 small">The minimum amount of @network.CoinTicker this project is trying to raise.</p>
                                <InputNumber id="targetAmount"
                                             @bind-Value="targetAmountInBTC"
                                             @onblur="ValidateTargetAmount"
                                             class="form-control"
                                             placeholder="Enter target amount"
                                             min="0"
                                             type="number"
                                             disabled="@nostrApplicationSpecificDataCreated" />
                                @if (targetAmountError)
                                {
                                    <div class="invalid-feedback d-block">
                                        @targetAmountErrorMessage
                                    </div>
                                }
                                else if (targetAmountInBTC < 0)
                                {
                                    <div class="text-danger mt-1 small">
                                        Target amount cannot be negative.
                                    </div>
                                }
                            </div>
                        </div>

                        <h5 class="mb-4 d-flex align-items-center">
                            <Icon IconName="view-project" Width="24" Height="24" Class="me-2" />
                            Fund Raising Window
                        </h5>
                        <div class="info-card mb-4 slide-in">
                            <!-- Start Date -->
                            <div class="mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <Icon IconName="calendar" Width="20" Height="20" Class="me-2 text-primary" />
                                    <label for="startDate" class="form-label mb-0 fw-semibold">Start Date</label>
                                </div>
                                <p class="form-text text-muted mt-0 mb-2 small">This is when the investment period begins (automatically set to today).</p>
                                <div class="form-control disabled">@DateTime.Today.FormatDate()</div>
                                <input type="hidden" @bind="project.ProjectInfo.StartDate" />
                            </div>

                            <!-- End Date -->
                            <div class="mb-0">
                                <div class="d-flex align-items-center mb-2">
                                    <Icon IconName="calendar" Width="20" Height="20" Class="me-2 text-primary" />
                                    <label for="endDate" class="form-label mb-0 fw-semibold">End Date</label>
                                </div>
                                <p class="form-text text-muted mt-0 mb-2 small">This is when the investment period ends (must be before first stage date).</p>
                                <div class="d-flex align-items-center">
                                    <DatePicker Value="@GetEndDate()" ValueChanged="@SetEndDate"
                                                Placeholder="Select end date"
                                                Class="form-control form-control-modern date-picker-input"
                                                Disabled="@nostrApplicationSpecificDataCreated" />
                                </div>
                                @if (endDateError)
                                {
                                    <div class="text-danger mt-1 small">
                                        @endDateErrorMessage
                                    </div>
                                }
                            </div>
                        </div>
                        <h5 class="mb-4 d-flex align-items-center">
                            <Icon IconName="view-project" Width="24" Height="24" Class="me-2" />
                            Advanced Parameters
                        </h5>
                        <div class="info-card mb-4 slide-in">

                            <!-- Penalty Days -->
                            <div class="mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <Icon IconName="unlock" Width="20" Height="20" Class="me-2 text-danger" />
                                    <label for="penaltyDays" class="form-label mb-0 fw-semibold">Penalty Days</label>
                                </div>
                                <p class="form-text text-muted mt-0 mb-2 small">Number of days to lock funds for departing investors who wish to withdraw early.</p>
                                <InputNumber id="penaltyDays" @bind-Value="project.ProjectInfo.PenaltyDays" @onblur="ValidatePenaltyDays" @oninput="OnPenaltyDaysInput" class="form-control" min="0" max="365" disabled="@nostrApplicationSpecificDataCreated" />
                                @if (penaltyDaysError)
                                {
                                    <div class="text-danger mt-1 small">
                                        @penaltyDaysErrorMessage
                                    </div>
                                }
                            </div>

                            <!-- Expiry Date -->
                            <div class="mb-0">
                                <div class="d-flex align-items-center mb-2">
                                    <Icon IconName="calendar" Width="20" Height="20" Class="me-2 text-warning" />
                                    <label for="expiryDate" class="form-label mb-0 fw-semibold">Expiry Date</label>
                                </div>
                                <p class="form-text text-muted mt-0 mb-2 small">Emergency date when all remaining funds can be released in case of project abandonment. Automatically set to 60 days after the last stage.</p>
                                <div class="form-control disabled">@CalculateExpiryDate().FormatDate()</div>
                                <input type="hidden" @bind="project.ProjectInfo.ExpiryDate" />
                            </div>
                        </div>


                        <h5 class="mb-4 d-flex align-items-center">
                            <Icon IconName="view-project" Width="24" Height="24" Class="me-2" />
                            Stages
                        </h5>
                        <div class="info-card mb-4 slide-in">
                            <!-- Presets for Stages -->
                            <!-- Toggle Button -->
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <button class="btn btn-border-success btn-sm" @onclick="ToggleStageMode" disabled="@nostrApplicationSpecificDataCreated">
                                    @if (isPresetMode)
                                    {
                                        <span>Switch to Manual Helper</span>
                                    }
                                    else
                                    {
                                        <span>Switch to Presets</span>
                                    }
                                </button>
                            </div>

                            <!-- Conditionally Render Presets or Automatic Inputs -->
                            @if (isPresetMode)
                            {
                                <!-- Preset Selection -->
                                <div class="mb-3">
                                    <label for="stagePreset" class="form-label">Select Stage Preset</label>
                                    <select id="stagePreset" class="form-control" @onchange="OnStagePresetChange" disabled="@nostrApplicationSpecificDataCreated">
                                        <option value="">Select a preset...</option>
                                        <option value="preset1" selected>Preset 1: 3 Stages (10%, 30%, 60%)</option>
                                        <option value="preset2">Preset 2: 4 Stages (25%, 25%, 25%, 25%)</option>
                                        <option value="preset3">Preset 3: 3 Stages (60%, 20%, 20%)</option>
                                    </select>
                                </div>
                            }
                            else
                            {
                                <!-- Automatic Generation Inputs -->
                                <div class="mb-3">
                                    <label for="totalDuration" class="form-label">Total Project Duration (in days)</label>
                                    <InputNumber id="totalDuration" @bind-Value="totalDuration" class="form-control" placeholder="Enter total duration in days" disabled="@nostrApplicationSpecificDataCreated" />
                                </div>
                                <div class="mb-3">
                                    <label for="numberOfStages" class="form-label">Number of Stages</label>
                                    <InputNumber id="numberOfStages" @bind-Value="numberOfStages" class="form-control" placeholder="Enter number of stages" disabled="@nostrApplicationSpecificDataCreated" />
                                </div>
                                <button type="button" class="btn btn-border-success mb-3" @onclick="GenerateSmartStages" disabled="@nostrApplicationSpecificDataCreated">
                                    <Icon IconName="server-path" Height="20" Width="20" Color="var(--angor-primary)" Class="me-2"></Icon>
                                    Generate Stages
                                </button>
                            }

                            <!-- Stages -->
                            @if (project.ProjectInfo.Stages.Any())
                            {
                                <div class="stages-container">
                                    @foreach (var stage in project.ProjectInfo.Stages)
                                    {
                                        var stageIndex = project.ProjectInfo.Stages.IndexOf(stage);

                                        <div class="stage-item animate-fade-in">
                                            <div class="stage-header">
                                                <div class="stage-number">
                                                    <Icon IconName="stages" Width="16" Height="16" Class="me-2" />
                                                    <span class="fw-bold">Stage @(stageIndex + 1)</span>
                                                </div>
                                                @if (project.ProjectInfo.Stages.IndexOf(stage) > 0)
                                                {
                                                    var previousStage = project.ProjectInfo.Stages[project.ProjectInfo.Stages.IndexOf(stage) - 1];
                                                    var daysBetween = (stage.ReleaseDate - previousStage.ReleaseDate).Days;
                                                    <div class="stage-duration">
                                                        <Icon IconName="clock" Width="14" Height="14" Class="me-1 text-muted" />
                                                        <small class="text-muted">@daysBetween days since previous</small>
                                                    </div>
                                                }
                                            </div>

                                            <div class="info-card mb-4">
                                                <div class="position-relative">
                                                    <!-- Delete Button: absolutely positioned top-right -->
                                                    <span class="btn-close-custom position-absolute top-0 end-0 m-3"
                                                          @onclick="() => RemoveStage(stage)"
                                                          disabled="@nostrApplicationSpecificDataCreated"
                                                          title="Remove this stage">
                                                        <Icon IconName="close-circle" Height="24" Width="24" />
                                                    </span>

                                                    <!-- Input Fields -->
                                                    <div class="row g-2">
                                                        <!-- Percentage Field -->
                                                        <div class="col-12 col-md-4 col-lg-3">
                                                            <div class="form-group mb-0">
                                                                <label class="form-label small fw-semibold text-muted">
                                                                    <Icon IconName="percent" Width="14" Height="14" Class="me-1" />
                                                                    Percentage
                                                                </label>
                                                                <div class="position-relative">
                                                                    <InputNumber @bind-Value="stage.AmountToRelease"
                                                                                 class="form-control form-control-modern pe-5"
                                                                                 placeholder="Enter %"
                                                                                 min="1"
                                                                                 max="100"
                                                                                 step="1"
                                                                                 disabled="@nostrApplicationSpecificDataCreated" />
                                                                    <div class="position-absolute top-50 end-0 translate-middle-y me-3 text-muted">%</div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <!-- Date Field -->
                                                        <div class="col-12 col-md-8 col-lg-9">
                                                            <div class="form-group mb-0">
                                                                <label class="form-label small fw-semibold text-muted">
                                                                    <Icon IconName="calendar" Width="14" Height="14" Class="me-1" />
                                                                    Release Date
                                                                </label>

                                                                <DatePicker Value="@GetStageReleaseDate(stage)"
                                                                            ValueChanged="@(value => SetStageReleaseDate(stage, value))"
                                                                            Placeholder="Select date"
                                                                            Class="form-control form-control-modern date-picker-input"
                                                                            Disabled="@nostrApplicationSpecificDataCreated" />

                                                                @if (stageDateErrors.ContainsKey(stage) && !string.IsNullOrEmpty(stageDateErrors[stage]))
                                                                {
                                                                    <div class="text-danger mt-1 small">
                                                                        @stageDateErrors[stage]
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="info-card mt-4 mb-4">
                                    <div class="text-center p-4">
                                        <Icon IconName="stages" Width="48" Height="48" Class="text-muted mb-3" />
                                        <h6 class="text-muted mb-4 mt-4">No stages created yet</h6>
                                        <p class="text-muted small mb-0">Add stages to define your project's release schedule</p>
                                    </div>
                                </div>
                            }

                            <button type="button" class="btn btn-border-warning mb-3" @onclick="AddStage" disabled="@nostrApplicationSpecificDataCreated">
                                <Icon IconName="add" Height="20" Width="20" Color="var(--angor-primary)" Class="me-2"></Icon>
                                Add Stage
                            </button>


                        </div>

                    </EditForm>
                </div>
            </div>

            <div class="col-lg-5 col-12 mb-4">
                <div class="d-flex align-items-stretch">
                    <div class="info-card card w-100 project-card">
                        <!-- Project Banner & Profile Section -->
                        <div class="d-block">
                            <div class="banner-container m-n20">
                                @if (string.IsNullOrEmpty(project.Metadata?.Banner))
                                {
                                    <img class="banner-image"
                                         src="/assets/img/no-image.jpg"
                                         alt="Project Banner"
                                         onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                }
                                else
                                {
                                    <img class="banner-image"
                                         src="@project.Metadata.Banner"
                                         alt="Project Banner"
                                         onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                }

                                <div class="profile-container">
                                    @if (string.IsNullOrEmpty(project.Metadata?.Picture))
                                    {
                                        <img class="profile-image"
                                             src="/assets/img/no-image.jpg"
                                             alt="Project Profile"
                                             onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                    }
                                    else
                                    {
                                        <img class="profile-image"
                                             src="@project.Metadata.Picture"
                                             alt="Project Profile"
                                             onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Project Title & Description -->
                        <div class="mt-5">
                            <div class="d-flex align-items-center mb-4">
                                <span class="user-select-none animate-rotate">
                                    <Icon IconName="view" Height="20" Width="20" />
                                </span>
                                <div class="h-100 ms-3 flex-grow-1 min-width-0">
                                    <h5 class="mb-0 font-weight-bolder text-truncate">
                                        @if (string.IsNullOrEmpty(project.Metadata?.Name))
                                        {
                                            <span>Name</span>
                                        }
                                        else
                                        {
                                            <span class="project-name" title="@project.Metadata.Name">@project.Metadata.Name</span>
                                        }
                                    </h5>
                                </div>
                            </div>

                            @if (string.IsNullOrEmpty(project.Metadata?.About))
                            {
                                <p class="mb-0 line-clamp-3 small text-muted">About</p>
                            }
                            else
                            {
                                <p class="mb-0 line-clamp-3 small text-muted">@ConvertToMarkupString(project.Metadata.About)</p>
                            }
                        </div>

                        <!-- Project Information Section -->
                        <div class="animate-fade-in mt-3">
                            <!-- Primary Project Info -->
                            <div class="row g-2">
                                @foreach (var info in GetProjectInfo())
                                {
                                    <div class="col-12">
                                        <div class="stat-card p-3 rounded-2 border hover-effect h-100">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div class="flex-grow-1 min-width-zero">
                                                    <div class="text-muted mb-1 small">@info.Label</div>
                                                    <div class="text-nowrap overflow-auto font-custom">
                                                        @info.Value
                                                    </div>
                                                </div>
                                                <div class="ms-2" style="flex-shrink: 0;">
                                                    <Icon IconName="@info.IconName" Height="20" Width="20" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Additional Project Info -->
                            <div class="row g-2 mt-1">
                                @foreach (var info in GetAdditionalProjectInfo())
                                {
                                    <div class="@(info.fullWidth ? "col-12" : "col-md-6 col-12")">
                                        <div class="stat-card p-3 rounded-2 border hover-effect h-100">
                                            <div class="d-flex justify-content-between align-items-center h-100">
                                                <div class="flex-grow-1 min-width-zero">
                                                    <div class="text-muted mb-2 small">@info.Label</div>
                                                    <div class="text-nowrap overflow-auto @info.color font-custom">
                                                        @info.Value
                                                    </div>
                                                </div>
                                                <div class="ms-2 flex-shrink-0">
                                                    <Icon IconName="@info.IconName" Height="20" Width="20" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                }
                            </div>

                            <!-- Stages Section -->
                            <div class="mt-2">
                                @if (project.ProjectInfo.Stages == null || !project.ProjectInfo.Stages.Any())
                                {
                                    <div class="info-card mt-4 mb-4">
                                        <div class="text-center p-4">
                                            <Icon IconName="stages" Width="48" Height="48" Class="text-muted" />
                                            <h6 class="text-muted mb-2">No stages created yet</h6>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-items-center mb-2">
                                        <Icon IconName="stages" Height="20" Width="20" Class="me-2" />
                                        <h6 class="mb-0">Stages</h6>
                                    </div>

                                    <div class="row g-2">
                                        @foreach (var stage in project.ProjectInfo.Stages)
                                        {
                                            <div class="col-12">
                                                <div class="stat-card p-3 rounded-2 border hover-effect h-100">
                                                    <!-- Stage Percentage -->
                                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                                        <div class="flex-grow-1 min-width-zero">
                                                            <div class="text-muted mb-1 small">Stage Percent</div>
                                                            <div class="text-nowrap overflow-auto font-custom">
                                                                @stage.AmountToRelease %
                                                            </div>
                                                        </div>
                                                        <div class="ms-2 flex-shrink-0">
                                                            <Icon IconName="percent" Height="20" Width="20" />
                                                        </div>
                                                    </div>

                                                    <!-- Stage Date -->
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <div class="flex-grow-1 min-width-zero">
                                                            <div class="text-muted mb-1 small">Stage Date</div>
                                                            <div class="text-nowrap overflow-auto font-custom">
                                                                @stage.ReleaseDate.FormatDate() - @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after start
                                                            </div>
                                                        </div>
                                                        <div class="ms-2 flex-shrink-0">
                                                            <Icon IconName="calendar" Height="20" Width="20" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }

                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="info-card mt-4">
        <div class="text-center mb-4">
            <h4 class="mb-2">Deploy Your Project</h4>
            <p class="text-muted mb-0">Complete the deployment process to make your project live</p>
        </div>

        @if (hasErrors)
        {
            <div class="text-center mb-4">
                <div class="alert alert-danger d-flex align-items-center justify-content-center">
                    <Icon IconName="warning" Width="20" Height="20" Class="me-2 text-warning" />
                    <span class="fw-semibold">Deployment Failed - you can try again</span>
                </div>
                <div class="alert alert-info mt-2">
                    <small class="text-muted">
                        <Icon IconName="info" Width="16" Height="16" Class="me-2" />
                        Completed steps have been saved. To Continue try again from where the process stopped
                    </small>
                </div>
            </div>
        }

        <!-- Progress Steps -->
        <div class="row mb-4">
            <div class="col-4">
                <div class="d-flex flex-column align-items-center">
                    <div class="rounded-circle d-flex align-items-center justify-content-center @(nostrMetadataCreated ? "bg-success text-white" : currentStep == 1 ? "border border-2 border-primary" : "border") mb-2 width-40 height-40">
                        @if (nostrMetadataCreated)
                        {
                            <Icon IconName="check" Width="20" Height="20" />
                        }
                        else if (currentStep == 1 && isDeploying)
                        {
                            <div class="spinner-border spinner-border-sm text-primary"></div>
                        }
                        else
                        {
                            <span class="fw-bold">1</span>
                        }
                    </div>
                    <span class="small fw-semibold @(nostrMetadataCreated ? "text-success" : currentStep == 1 ? "text-primary" : "text-muted")">Profile</span>
                </div>
            </div>
            <div class="col-4">
                <div class="d-flex flex-column align-items-center">
                    <div class="rounded-circle d-flex align-items-center justify-content-center @(nostrApplicationSpecificDataCreated ? "bg-success text-white" : currentStep == 2 ? "border border-2 border-primary" : "border") mb-2 width-40 height-40">
                        @if (nostrApplicationSpecificDataCreated)
                        {
                            <Icon IconName="check" Width="20" Height="20" />
                        }
                        else if (currentStep == 2 && isDeploying)
                        {
                            <div class="spinner-border spinner-border-sm text-primary"></div>
                        }
                        else
                        {
                            <span class="fw-bold">2</span>
                        }
                    </div>
                    <span class="small fw-semibold @(nostrApplicationSpecificDataCreated ? "text-success" : currentStep == 2 ? "text-primary" : "text-muted")">Project Info</span>
                </div>
            </div>
            <div class="col-4">
                <div class="d-flex flex-column align-items-center">
                    <div class="rounded-circle d-flex align-items-center justify-content-center @(!string.IsNullOrEmpty(project.CreationTransactionId) ? "bg-success text-white" : currentStep == 3 ? "border border-2 border-primary" : "border") mb-2 width-40 height-40">
                        @if (!string.IsNullOrEmpty(project.CreationTransactionId))
                        {
                            <Icon IconName="check" Width="20" Height="20" />
                        }
                        else if (currentStep == 3 && isDeploying)
                        {
                            <div class="spinner-border spinner-border-sm text-primary"></div>
                        }
                        else
                        {
                            <span class="fw-bold">3</span>
                        }
                    </div>
                    <span class="small fw-semibold @(!string.IsNullOrEmpty(project.CreationTransactionId) ? "text-success" : currentStep == 3 ? "text-primary" : "text-muted")">Deploy</span>
                </div>
            </div>
        </div>
        @if (!hasErrors)
        {
            <div class="info-card text-center p-4">

                <h5 class="mb-3">Ready to Deploy</h5>
                <p class="text-muted mb-4">All deployment steps will be completed automatically</p>

                @if (isDeploying)
                {
                    <!-- Show current step progress during deployment -->
                    <div class="deployment-progress mb-4">
                        <div class="d-flex align-items-center justify-content-center mb-3">
                            <div class="spinner-border text-primary me-3"></div>
                            <div class="text-start">
                                <h6 class="mb-1">
                                    @if (currentStep == 1)
                                    {
                                        <span>Creating Project Profile...</span>
                                    }
                                    else if (currentStep == 2)
                                    {
                                        <span>Publishing Project Information...</span>
                                    }
                                    else if (currentStep == 3)
                                    {
                                        <span>Deploying to Blockchain...</span>
                                    }
                                </h6>
                                <small class="text-muted">Please wait while we complete this step...</small>
                            </div>
                        </div>
                        <div class="progress">
                            <div class="progress-bar bg-success progress-bar-animated"
                                 role="progressbar"
                                 style="width: @((currentStep * 33))%"
                                 aria-valuenow="@(currentStep * 33)"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                            </div>
                        </div>
                        <small class="text-muted mt-2 d-block">Step @currentStep of 3</small>
                    </div>
                }

                <div class="d-flex justify-content-center mb-4">
                    <button class="btn btn-border-success" @onclick="AutoDeployProject" disabled="@isDeploying">
                        @if (isDeploying)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Deploying...</span>
                        }
                        else
                        {
                            <Icon IconName="rocket" Width="20" Height="20" Class="me-2" />
                            <span>Deploy Project</span>
                        }
                    </button>

                </div>


            </div>
        }

        @if (hasErrors)
        {
            @if (hasErrors)
            {
                <div class="alert alert-warning d-flex align-items-center mb-3">
                    <Icon IconName="warning" Width="20" Height="20" Class="me-2" />
                    <span>Automatic deployment encountered issues. Manual completion required.</span>
                </div>
            }

            <!-- Step 1: Profile -->
            <div class="info-card">
                <div class="d-flex align-items-center mb-3">
                    <div class="rounded-circle d-flex align-items-center justify-content-center @(nostrMetadataCreated ? "bg-success text-white" : "bg-light border") me-3 width-40 height-40">
                        @if (nostrMetadataCreated)
                        {
                            <Icon IconName="check" Width="16" Height="16" />
                        }
                        else
                        {
                            <Icon IconName="user" Width="16" Height="16" />
                        }
                    </div>
                    <div>
                        <h6 class="mb-1">Create Project Profile</h6>
                        <p class="text-muted small mb-0">Establish your project's identity on the Nostr network</p>
                    </div>
                </div>

                @if (!nostrMetadataCreated)
                {
                    <button class="btn btn-border-success w-100" @onclick="ConfirmFinalizeNostrProfileCreation" disabled="@createProfileSpinner">
                        @if (createProfileSpinner)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Creating...</span>
                        }
                        else
                        {
                            <Icon IconName="user" Width="16" Height="16" Class="me-2" />
                            <span>Create Profile</span>
                        }
                    </button>
                }
                else
                {
                    <div class="d-flex align-items-center text-success">
                        <Icon IconName="check-circle" Width="16" Height="16" Class="me-2" />
                        <span>Profile Created Successfully</span>
                    </div>
                }
            </div>

            <!-- Step 2: Project Info -->
            @if (nostrMetadataCreated)
            {
                <div class="info-card mt-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle d-flex align-items-center justify-content-center @(nostrApplicationSpecificDataCreated ? "bg-success text-white" : "bg-light border") me-3 width-40 height-40">
                            @if (nostrApplicationSpecificDataCreated)
                            {
                                <Icon IconName="check" Width="16" Height="16" />
                            }
                            else
                            {
                                <Icon IconName="project" Width="16" Height="16" />
                            }
                        </div>
                        <div>
                            <h6 class="mb-1">Publish Project Information</h6>
                            <p class="text-muted small mb-0">Define technical details and funding structure</p>
                        </div>
                    </div>

                    @if (!nostrApplicationSpecificDataCreated)
                    {
                        <button class="btn btn-border-success w-100" @onclick="ConfirmFinalizeProjectInfoCreation" disabled="@createApplicationDataSpinner">
                            @if (createApplicationDataSpinner)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Publishing...</span>
                            }
                            else
                            {
                                <Icon IconName="project" Width="16" Height="16" Class="me-2" />
                                <span>Publish Project Info</span>
                            }
                        </button>
                    }
                    else
                    {
                        <div class="d-flex align-items-center text-success">
                            <Icon IconName="check-circle" Width="16" Height="16" Class="me-2" />
                            <span>Project Info Published Successfully</span>
                        </div>
                    }
                </div>
            }

            <!-- Step 3: Deploy -->
            @if (nostrMetadataCreated && nostrApplicationSpecificDataCreated)
            {
                <div class="info-card mt-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle d-flex align-items-center justify-content-center @(!string.IsNullOrEmpty(project.CreationTransactionId) ? "bg-success text-white" : "bg-light border") me-3 width-40 height-40">
                            @if (!string.IsNullOrEmpty(project.CreationTransactionId))
                            {
                                <Icon IconName="check" Width="16" Height="16" />
                            }
                            else
                            {
                                <Icon IconName="deploy" Width="16" Height="16" />
                            }
                        </div>
                        <div>
                            <h6 class="mb-1">Deploy to Blockchain</h6>
                            <p class="text-muted small mb-0">Create the on-chain contract for your project</p>
                        </div>
                    </div>

                    @if (string.IsNullOrEmpty(project.CreationTransactionId))
                    {
                        <div class="alert alert-info d-flex align-items-center mb-3">
                            <Icon IconName="info" Width="16" Height="16" Class="me-2" />
                            <span class="small">This action cannot be undone. Your project will be live after deployment.</span>
                        </div>

                        <button class="btn btn-border-success w-100" @onclick="CreatProjectTransactionAnCheckPassword" disabled="@creatProjectSpinner">
                            @if (creatProjectSpinner)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Deploying...</span>
                            }
                            else
                            {
                                <Icon IconName="deploy" Width="16" Height="16" Class="me-2" />
                                <span>Deploy Project</span>
                            }
                        </button>
                    }
                    else
                    {
                        <div class="d-flex align-items-center text-success">
                            <Icon IconName="check-circle" Width="16" Height="16" Class="me-2" />
                            <span>Project Deployed Successfully</span>
                        </div>
                    }
                </div>
            }

            <div class="text-center mt-4">
                <small class="text-muted">
                    <Icon IconName="info" Width="16" Height="16" Class="me-2" />
                    Steps will advance automatically when completed
                </small>
            </div>
        }

    </div>

    @if (showCreateModal)
    {
        <div class="modal-wrapper">
            <div class="modal fade show d-block" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content modern-modal">
                        <div class="modal-header border-0 pb-0">
                            <div class="d-flex align-items-center">
                                <Icon IconName="check-circle" Height="32" Width="32" class="me-2" />
                                <h5 class="modal-title">Confirmation</h5>
                            </div>
                            <button class="btn-close-custom" @onclick="() => showCreateModal = false">
                                <Icon IconName="close-circle" Height="24" Width="24" />
                            </button>
                        </div>

                        <div class="modal-body modal-body-scroll py-4">

                            <div class="row g-4 mb-4">
                                <div class="col-md-12">
                                    <div class="info-card h-100">
                                        <div class="info-label">Project Identifier</div>
                                        <div class="info-value">@project.ProjectInfo.ProjectIdentifier</div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="info-card h-100">
                                        <div class="info-label">Founder Key</div>
                                        <div class="info-value">@project.ProjectInfo.FounderKey</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-card h-100">
                                        <div class="info-label">Target Amount</div>
                                        <div class="info-value text-success">@project.ProjectInfo.TargetAmount.ToUnitBtc() @network.CoinTicker</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-card h-100">
                                        <div class="info-label">Start Date</div>
                                        <div class="info-value">@project.ProjectInfo.StartDate.FormatDate() (in @((project.ProjectInfo.StartDate - DateTime.Now).Days) days)</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-card h-100">
                                        <div class="info-label">Expiry Date</div>
                                        <div class="info-value text-warning">@project.ProjectInfo.ExpiryDate.FormatDate() (in @((project.ProjectInfo.ExpiryDate - DateTime.Now).Days) days)</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-card h-100">
                                        <div class="info-label">Penalty Days</div>
                                        <div class="info-value text-danger">@project.ProjectInfo.PenaltyDays days</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-card h-100">
                                        <div class="info-label">Miner Fee</div>
                                        <div class="info-value text-warning">@Money.Satoshis(signedTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-card h-100">
                                        <div class="info-label">Angor Fee</div>
                                        <div class="info-value text-success">@signedTransaction?.Transaction.Outputs.First().Value.ToUnit(MoneyUnit.BTC) @network.CoinTicker</div>
                                    </div>
                                </div>
                            </div>

                            <FeeSelector SendFee="@Money.Satoshis(signedTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC)"
                                         CoinTicker="@network.CoinTicker"
                                         FeeRate="@feeData.SelectedFeeEstimation.FeeRate"
                                         FeeBlockCount="@feeData.SelectedFeeEstimation.Confirmations"
                                         FeePosition="@feeData.FeePosition"
                                         FeeMin="@feeData.FeeMin"
                                         FeeMax="@feeData.FeeMax"
                                         OnFeeChanged="@HandleFeeChanged" />

                            <h6 class="mt-3 mb-2">Stages</h6>
                            @foreach (var stage in project.ProjectInfo.Stages)
                            {
                                <div class="stage-card mt-4 p-3">
                                    <div class="stage-content">
                                        <div class="stage-icon">
                                            <Icon IconName="percent" Height="32" Width="32" />
                                        </div>
                                        <div class="stage-info">
                                            <p class="stage-text"><strong>Stage Percent:</strong> @stage.AmountToRelease %</p>
                                        </div>
                                    </div>
                                    <div class="stage-content">
                                        <div class="stage-icon">
                                            <Icon IconName="calendar" Height="32" Width="32" />
                                        </div>
                                        <div class="stage-info">
                                            <p class="stage-text"><strong>Stage Date:</strong> @stage.ReleaseDate.FormatDate() - @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after project starts</p>
                                        </div>
                                    </div>
                                </div>
                            }

                            <hr>

                            <div class="confirmation-section mt-4 text-center">
                                <Icon IconName="alert" Height="24" Width="24" class="mb-2" />
                                <p class="confirmation-text">
                                    Please review the transaction details carefully before confirming.
                                </p>
                            </div>
                        </div>

                        <div class="modal-footer border-0 pt-0">
                            <button class="btn btn-border-success btn-sm" @onclick="Send" disabled="@publishProjectSpinner">
                                @if (publishProjectSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Confirming...</span>
                                }
                                else
                                {
                                    <span>Confirm</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showConfirmationModal)
    {
        <div class="modal-wrapper">
            <div class="modal fade show d-block" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content modern-modal">
                        <div class="modal-header border-0 pb-0">
                            <div class="d-flex align-items-center">
                                <Icon IconName="alert-circle" Height="32" Width="32" class="me-2" />
                                <h5 class="modal-title">Confirmation</h5>
                            </div>
                            <button class="btn-close-custom" @onclick="CloseConfirmationModal">
                                <Icon IconName="close-circle" Height="24" Width="24" />
                            </button>
                        </div>

                        <div class="modal-body modal-body-scroll">
                            <p class="mb-1">@confirmationMessage</p>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-border-warning btn-sm" @onclick="CloseConfirmationModal">Cancel</button>
                            <button type="button" class="btn btn-border-success btn-sm" @onclick="PerformFinalizeAction">Confirm</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    private bool sendConfirmModal;
    private bool showCreateModal;
    private bool isPresetMode = true;
    private bool showConfirmationModal;
    private string confirmationMessage;
    private Action finalizeAction;

    private bool showResetConfirmation;
    private string resetTarget;

    Transaction unsignedTransaction;
    TransactionInfo signedTransaction;

    private readonly FeeData feeData = new();

    private FounderProject project = new();

    private bool endDateError = false;
    private string endDateErrorMessage = "";

    private bool penaltyDaysError = false;
    private string penaltyDaysErrorMessage = "";

    private readonly Dictionary<string, (int[] Percentages, int IntervalDays)> presets = new()
    {
    { "preset1", (new[] { 10, 30, 60 }, 10) },
    { "preset2", (new[] { 25, 25, 25, 25 }, 10) },
    { "preset3", (new[] { 60, 20, 20 }, 15) }
    };

    private decimal targetAmountInBTC
    {
        get => Money.Satoshis(project.ProjectInfo.TargetAmount).ToUnit(MoneyUnit.BTC);
        set => project.ProjectInfo.TargetAmount = Money.Coins(value).Satoshi;
    }

    private bool debugMode;
    private bool isTestnet;

    // Helper property to determine if production validations should be skipped
    private bool ShouldSkipProductionValidations => isTestnet && debugMode;

    private int activeTab = 1;

    private int totalDuration;
    private int numberOfStages;
    private bool isValid = true;
    private string errorMessage;

    bool createProfileSpinner;
    bool createApplicationDataSpinner;
    bool creatProjectSpinner;
    bool publishProjectSpinner;

    bool nostrMetadataCreated;
    bool nostrApplicationSpecificDataCreated; bool autoDeploySpinner;
    bool isDeploying;
    bool hasErrors;

    private int currentStep = 1;
    private bool websiteError = false;
    private string websiteErrorMessage = "";

    private bool targetAmountError = false;
    private string targetAmountErrorMessage = "";

    private Dictionary<Stage, string> stageDateErrors = new();

    private int GetProgressPercentage() => (currentStep - 1) * 50;

    private void NextStep()
    {
        if (currentStep < 3)
        {
            currentStep++;
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
        }
    }

    private bool CanProceedToNextStep()
    {
        return currentStep switch
        {
            1 => nostrMetadataCreated,
            2 => nostrApplicationSpecificDataCreated,
            _ => false
        };
    }

    protected override async Task OnInitializedAsync()
    {
        NavMenuState.SetActivePage("founder");
        debugMode = storage?.GetDebugMode() ?? false;
        isTestnet = network?.NetworkType == NetworkType.Testnet;

        if (!hasWallet)
        {
            return;
        }

        var projects = storage.GetFounderProjects();

        var keys = _walletStorage.GetFounderKeys();

        // if CreationTransactionId is not null this means the project was published to the blockchain
        var startedProjects = projects.Where(p => !string.IsNullOrEmpty(p.CreationTransactionId)).ToList();

        if (startedProjects.Count >= keys.Keys.Count)
        {
            errorMessage = "All founder keys have been used for this wallet!";
            isValid = false;
            return;
        }

        var latestProject = startedProjects.MaxBy(p => p.ProjectIndex);
        var projectsKeys = _derivationOperations.GetProjectKey(keys, latestProject?.ProjectIndex + 1 ?? 1);

        project = projects.FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier)
        ?? CreateDefaultProject(projectsKeys);

        // Set start date to today automatically
        project.ProjectInfo.StartDate = DateTime.Today;

        // Select a preset if no stages exist
        if (!project.ProjectInfo.Stages.Any())
        {
            isPresetMode = true;
            OnStagePresetChange(new ChangeEventArgs { Value = "preset1" }); // This might add stages
        }

        // Set initial EndDate based on stages or today
        if (project.ProjectInfo.Stages.Any())
        {
            // Set EndDate to the date of the first stage (ordered by date)
            project.ProjectInfo.EndDate = project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate).First().ReleaseDate;
        }
        else
        {
            // If no stages exist, set EndDate to today
            project.ProjectInfo.EndDate = DateTime.Today;
        }

        // Always update expiry date based on stages (or start date if no stages)
        project.ProjectInfo.ExpiryDate = CalculateExpiryDate();

        if (network.NetworkType == NetworkType.Testnet && debugMode)
        {
            PopulateTestnetData(project);
        }

        // save project to storage immediately if new
        if (!projects.Any(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier))
        {
            storage.AddFounderProject(project);
        }

        // check if the project was already published to nostr
        nostrMetadataCreated = project.NostrProfileCreated;
        nostrApplicationSpecificDataCreated = !string.IsNullOrEmpty(project.ProjectInfoEventId);

        // Initialize stageDateErrors dictionary for existing stages
        foreach (var stage in project.ProjectInfo.Stages)
        {
            if (!stageDateErrors.ContainsKey(stage))
            {
                stageDateErrors[stage] = "";
            }
        }
    }

    private string GetActiveClass(int tabNumber)
    {
        if (tabNumber == 2)
        {
            if (nostrMetadataCreated && !nostrApplicationSpecificDataCreated)
            {
                if (!project.ProjectInfo.Stages.Any())
                {
                    // to make it easier for testing we pre add some stages
                    project.ProjectInfo.Stages = new List<Stage>
    {
    new() { AmountToRelease = 10, ReleaseDate = DateTime.UtcNow }, //.AddDays(10) }, during testing we often need to spend a stage immediately
    new() { AmountToRelease = 30, ReleaseDate = DateTime.UtcNow.AddDays(20) },
    new() { AmountToRelease = 60, ReleaseDate = DateTime.UtcNow.AddDays(30) }
    };
                }
            }
        }

        return activeTab == tabNumber ? "active" : "";
    }

    private void ConfirmFinalizeNostrProfileCreation()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Project profile already created");
            return;
        }

        if (!ValidateInputData())
        {
            // If validation fails, return early
            return;
        }

        confirmationMessage = "Are you sure you want to create the project profile?";
        finalizeAction = FinalizeNostrProfileCreation;
        showConfirmationModal = true;
    }

    private async void ConfirmFinalizeProjectInfoCreation()
    {
        if (nostrApplicationSpecificDataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr project already created");
            return;
        }

        confirmationMessage = "Are you sure you want to deploy the project info to Nostr?.";
        finalizeAction = FinalizeProjectInfoCreation;
        showConfirmationModal = true;
    }

    private void CloseConfirmationModal()
    {
        showConfirmationModal = false;
        StateHasChanged();
    }

    private void PerformFinalizeAction()
    {
        showConfirmationModal = false;
        finalizeAction.Invoke();
    }

    private async void FinalizeNostrProfileCreation()
    {
        await CreatNostrProfileAnCheckPassword();
    }

    private async void FinalizeProjectInfoCreation()
    {
        await CreatProjectInfoOnNostrAnCheckPassword();
    }

    private async Task CreatNostrProfileAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatNostrProfile);
        }
        else
        {
            await CreatNostrProfile();
        }
    }

    private async Task CreatNostrProfile()
    {
        createProfileSpinner = true;
        StateHasChanged();
        await Task.Delay(10);



        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);

            var resultId = await _RelayService.CreateNostrProfileAsync(
            project.Metadata.ToNostrMetadata(),
            Encoders.Hex.EncodeData(nostrKey.ToBytes()),
            _ =>
            {
                createProfileSpinner = false;

                if (!_.Accepted)
                {
                    notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!", $"{_.CommunicatorName} - {_.Message}"); //TODO add export project info
                    return;
                }

                _Logger.LogInformation($"Communicator {_.CommunicatorName} accepted event {_.EventId}");

                if (nostrMetadataCreated == false)
                {
                    nostrMetadataCreated = true;
                    project.NostrProfileCreated = true;
                    storage.UpdateFounderProject(project);

                    InvokeAsync(async () => await CheckAndAdvanceStep());
                    InvokeAsync(() => _RelayService.PublishNip65List(Encoders.Hex.EncodeData(nostrKey.ToBytes()),
                        okResponse =>
                        {
                            if (okResponse.Accepted)
                                return;
                            notificationComponent.ShowErrorMessage("Failed to publish NIP-65 list", $"{okResponse.CommunicatorName} - {okResponse.Message}");
                        }));
                }

                StateHasChanged();
            });


            if (string.IsNullOrEmpty(resultId))
            {
                notificationComponent.ShowErrorMessage("Failed to create project profile");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, "Error creating project profile.");
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            createProfileSpinner = false;
        }
    }

    private async Task CreatProjectInfoOnNostrAnCheckPassword()
    {
        if (!project.NostrProfileCreated)
        {
            notificationComponent.ShowErrorMessage("You must create the project profile first.");
            return;
        }

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectInfoOnNostr);
        }
        else
        {
            await CreatProjectInfoOnNostr();
        }
    }

    private async Task CreatProjectInfoOnNostr()
    {
        createApplicationDataSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);

            var nostrKeyHex = Encoders.Hex.EncodeData(nostrKey.ToBytes());

            var resultId = await _RelayService.AddProjectAsync(project.ProjectInfo, nostrKeyHex,
            _ =>
            {
                createApplicationDataSpinner = false;

                if (!_.Accepted)
                {
                    notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!", $"{_.CommunicatorName} - {_.Message}"); //TODO add export project info
                    return;
                }

                _Logger.LogInformation($"Communicator {_.CommunicatorName} accepted event {_.EventId}");

                if (nostrApplicationSpecificDataCreated == false)
                {
                    nostrApplicationSpecificDataCreated = true;
                    project.ProjectInfoEventId = _.EventId;
                    storage.UpdateFounderProject(project);

                    InvokeAsync(async () => await CheckAndAdvanceStep());
                }

                StateHasChanged();
            });

            // todo: do we actually need this? does it actualy work to delete?
            if (string.IsNullOrEmpty(resultId))
            {
                createApplicationDataSpinner = false;
                await _RelayService.DeleteProjectAsync(resultId, nostrKeyHex);
                notificationComponent.ShowErrorMessage("Failed to create application data");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            createApplicationDataSpinner = false;
        }
    }

    private async Task CreatProjectTransactionAnCheckPassword()
    {
        if (string.IsNullOrEmpty(project.ProjectInfoEventId))
        {
            notificationComponent.ShowErrorMessage("You must publish the project information to Nostr first.");
            return;
        }

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectTransaction);
        }
        else
        {
            await CreatProjectTransaction();
        }
    }

    private async Task CreatProjectTransaction()
    {
        creatProjectSpinner = true;
        StateHasChanged();

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var accountBalanceInfo = await _walletUIService.RefreshWalletBalance();
            var accountInfo = accountBalanceInfo.AccountInfo;

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            unsignedTransaction = _founderTransactionActions.CreateNewProjectTransaction(project.ProjectInfo.FounderKey, _derivationOperations.AngorKeyToScript(project.ProjectInfo.ProjectIdentifier), NetworkConfiguration.AngorCreateFeeSats, NetworkConfiguration.NostrEventIdKeyType, project.ProjectInfoEventId);

            if (_featureFlagService.IsFeatureHWSupportEnabled())
            {
                var psbt = _PsbtOperations.CreatePsbtForTransaction(unsignedTransaction, accountBalanceInfo.AccountInfo, feeData.SelectedFeeEstimation.FeeRate);

                signedTransaction = _PsbtOperations.SignPsbt(psbt, words);
            }
            else
            {
                signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation.FeeRate);
            }

            showCreateModal = true;
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            creatProjectSpinner = false;
            StateHasChanged();
        }
    }

    private async Task HandleFeeChanged(FeeCalculation feeCalc)
    {
        try
        {
            if (feeCalc.UseCustomFee && feeCalc.CustomFee.HasValue)
            {
                feeData.SetCustomFee(feeCalc.CustomFee.Value);
            }
            else if (feeCalc.Position.HasValue && feeCalc.Position.Value <= feeData.FeeEstimations.Fees.Count)
            {
                feeData.SelectFee(feeCalc.Position.Value);
            }

            var words = await passwordComponent.GetWalletAsync();
            var accountInfo = storage.GetAccountInfo(network.Name);

            if (_featureFlagService.IsFeatureHWSupportEnabled())
            {
                var psbt = _PsbtOperations.CreatePsbtForTransaction(unsignedTransaction, accountInfo, feeData.SelectedFeeEstimation.FeeRate);

                signedTransaction = _PsbtOperations.SignPsbt(psbt, words);
            }
            else
            {
                signedTransaction = _WalletOperations.AddInputsAndSignTransaction(
                    accountInfo.GetNextChangeReceiveAddress(),
                    unsignedTransaction,
                    words,
                    accountInfo,
                    feeData.SelectedFeeEstimation.FeeRate);
            }


            StateHasChanged();
        }
        catch (Exception ex)
        {
            _Logger.LogError(ex, "Error calculating fee");
            notificationComponent.ShowErrorMessage("Error calculating fee: " + ex.Message);
        }
    }

    private async Task Send()
    {
        publishProjectSpinner = true;
        StateHasChanged();

        try
        {
            showCreateModal = false;

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage("Transaction failed", response.Message);
                return;
            }

            var transactionId = signedTransaction.Transaction.GetHash().ToString();

            if (string.IsNullOrEmpty(transactionId))
            {
                notificationComponent.ShowErrorMessage("Transaction ID is missing. Cannot store the project.");
                return;
            }

            project.CreationTransactionId = transactionId;
            storage.UpdateFounderProject(project);

            NavigationManager.NavigateTo($"/view/{project.ProjectInfo.ProjectIdentifier}");
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            publishProjectSpinner = false;
            passwordComponent.ClearPassword();
            StateHasChanged();
        }
    }

    private void AddStage()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        var newStage = new Stage { ReleaseDate = DateTime.UtcNow };
        project.ProjectInfo.Stages.Add(newStage);

        // Initialize error state for new stage
        stageDateErrors[newStage] = "";

        // Update expiry date
        project.ProjectInfo.ExpiryDate = CalculateExpiryDate();
        StateHasChanged();
    }

    private void RemoveStage(Stage stage)
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        project.ProjectInfo.Stages.Remove(stage);

        if (stageDateErrors.ContainsKey(stage))
        {
            stageDateErrors.Remove(stage);
        }

        // Update expiry date
        project.ProjectInfo.ExpiryDate = CalculateExpiryDate();
        StateHasChanged();
    }

    public MarkupString ConvertToMarkupString(string input)
    {
        string sanitizedInput = HtmlStripperService.StripHtmlTags(input);
        return new MarkupString(sanitizedInput);
    }

    private string GetProgressMessage()
    {
        if (!nostrMetadataCreated)
        {
            return "Step 1: Create project profile";
        }

        if (!nostrApplicationSpecificDataCreated)
        {
            return "Step 2: Enter Project Info";
        }

        return "Step 3: Finalize Project Creation";
    }


    private void OnStagePresetChange(ChangeEventArgs e)
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        var selectedPreset = e.Value?.ToString();

        if (selectedPreset != null && presets.TryGetValue(selectedPreset, out var preset))
        {
            stageDateErrors.Clear();

            project.ProjectInfo.Stages.Clear();
            project.ProjectInfo.Stages = GenerateStages(preset.Percentages, preset.IntervalDays);
        }
        else
        {
            notificationComponent.ShowErrorMessage("Invalid preset selected.");
            stageDateErrors.Clear();
            project.ProjectInfo.Stages.Clear();
        }

        StateHasChanged();
    }

    private bool ValidateInputData()
    {
        
        if (project.Metadata is null)
        {
            notificationComponent.ShowErrorMessage("Project profile information is required.");
            return false;
        }

        if (string.IsNullOrWhiteSpace(project.Metadata.Name))
        {
            notificationComponent.ShowErrorMessage("Project name is required.");
            return false;
        }

        if (project.Metadata.Name.Length > 200)
        {
            notificationComponent.ShowErrorMessage("Project name must not exceed 200 characters.");
            return false;
        }

        if (string.IsNullOrWhiteSpace(project.Metadata.About))
        {
            notificationComponent.ShowErrorMessage("Project description is required.");
            return false;
        }

        if (project.Metadata.About.Length > 400)
        {
            notificationComponent.ShowErrorMessage("Project description must not exceed 400 characters.");
            return false;
        }

        ValidateTargetAmount();
        if (targetAmountError)
            return false;

        if (targetAmountInBTC <= 0)
        {
            notificationComponent.ShowErrorMessage("Project target amount must be greater than 0.");
            return false;
        }

        if (project.ProjectInfo.StartDate == default(DateTime))
        {
            notificationComponent.ShowErrorMessage("Project start date is required.");
            return false;
        }

        if (project.ProjectInfo.EndDate == default(DateTime))
        {
            notificationComponent.ShowErrorMessage("Project end date is required.");
            return false;
        }

        if (!project.ProjectInfo.Stages.Any())
        {
            notificationComponent.ShowErrorMessage("Project must have at least one funding stage.");
            return false;
        }

        if (project.ProjectInfo.ExpiryDate == default(DateTime))
        {
            notificationComponent.ShowErrorMessage("Project expiry date is required.");
            return false;
        }

        if (project.ProjectInfo.PenaltyDays < 0)
        {
            notificationComponent.ShowErrorMessage("Penalty days cannot be negative.");
            return false;
        }

        if (project.ProjectInfo.EndDate < project.ProjectInfo.StartDate)
        {
            notificationComponent.ShowErrorMessage("Funding end date must be after the start date.");
            return false;
        }

        if (project.ProjectInfo.ExpiryDate < project.ProjectInfo.StartDate)
        {
            notificationComponent.ShowErrorMessage("Project expiry date must be after the start date.");
            return false;
        }

        if (project.ProjectInfo.ExpiryDate < project.ProjectInfo.EndDate)
        {
            notificationComponent.ShowErrorMessage("Project expiry date must be after the funding end date.");
            return false;
        }

        if (!ValidateWebsiteUrl())
            return false;

        if (!ValidateImageUrl(project.Metadata.Banner, "Banner Image"))
            return false;

        if (!ValidateImageUrl(project.Metadata.Picture, "Profile Image"))
            return false;

        // Skip production validations in testnet debug mode
        if (ShouldSkipProductionValidations)
        {
            return true; 
        }

        if (project.ProjectInfo.PenaltyDays < 10)
        {
            notificationComponent.ShowErrorMessage("Penalty period must be at least 10 days.");
            return false;
        }

        if (project.ProjectInfo.PenaltyDays > 365)
        {
            notificationComponent.ShowErrorMessage("Penalty period cannot exceed 365 days.");
            return false;
        }

        if (project.ProjectInfo.Stages.Count() < 3)
        {
            notificationComponent.ShowErrorMessage("Project must have at least 3 funding stages.");
            return false;
        }

        if (targetAmountInBTC < (decimal)0.01)
        {
            notificationComponent.ShowErrorMessage("Project target amount must be at least 0.01 BTC.");
            return false;
        }

        if (project.ProjectInfo.StartDate < DateTime.Today)
        {
            notificationComponent.ShowErrorMessage("Project start date must be in the future.");
            return false;
        }

        if (project.ProjectInfo.StartDate > DateTime.Today.AddYears(1))
        {
            notificationComponent.ShowErrorMessage("Project start date cannot be more than one year in the future.");
            return false;
        }

        if (project.ProjectInfo.Stages.Any())
        {
            var stages = project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate).ToList();
            var firstStageDate = stages.First().ReleaseDate;
            var lastStageDate = stages.Last().ReleaseDate;

            if (firstStageDate <= project.ProjectInfo.EndDate)
            {
                notificationComponent.ShowErrorMessage("The first funding stage must start after the fundraising period ends.");
                return false;
            }

            if (project.ProjectInfo.ExpiryDate < lastStageDate)
            {
                notificationComponent.ShowErrorMessage("Project expiry date must be after the last stage release date.");
                return false;
            }

            for (int i = 1; i < stages.Count; i++)
            {
                if (stages[i].ReleaseDate <= stages[i - 1].ReleaseDate)
                {
                    notificationComponent.ShowErrorMessage($"Stage {i + 1} release date must be after Stage {i} release date.");
                    return false;
                }
            }

            var totalPercent = stages.Sum(s => s.AmountToRelease);
            if (Math.Abs(totalPercent - 100) > 0.01m) // Allow for small floating point differences
            {
                notificationComponent.ShowErrorMessage($"Stage percentages must sum to exactly 100% (currently {totalPercent:F2}%).");
                return false;
            }

            foreach (var stage in stages)
            {
                if (stage.AmountToRelease <= 0)
                {
                    notificationComponent.ShowErrorMessage("Each stage must release more than 0% of funds.");
                    return false;
                }

                if (stage.AmountToRelease > 100)
                {
                    notificationComponent.ShowErrorMessage("No stage can release more than 100% of funds.");
                    return false;
                }
            }

            project.ProjectInfo.Stages = stages;
        }

        var existingProjects = storage.GetFounderProjects()
            .Where(p => !string.IsNullOrEmpty(p.CreationTransactionId))
            .ToList();

        if (existingProjects.Any(p => p.ProjectInfo.ProjectIdentifier == project.ProjectInfo.ProjectIdentifier))
        {
            notificationComponent.ShowErrorMessage("A project with this identifier already exists in this wallet.");
            return false;
        }

        return true;
    }

    private List<Stage> GenerateStages(int[] percentages, int intervalDays)
    {
        var stages = new List<Stage>();
        var currentDate = project.ProjectInfo.StartDate;

        for (int i = 0; i < percentages.Length; i++)
        {
            var stage = new Stage
            {
                AmountToRelease = percentages[i],
                ReleaseDate = currentDate
            };

            stages.Add(stage);

            stageDateErrors[stage] = "";

            if (i > 0)
            {
                var daysBetween = (currentDate - stages[i - 1].ReleaseDate).Days;
                _Logger.LogInformation($"Days between stage {i} and {i + 1}: @daysBetween days");
            }

            currentDate = currentDate.AddDays(intervalDays);
        }

        return stages;
    }

    private void GenerateSmartStages()
    {
        if (totalDuration <= 0 || numberOfStages <= 0)
        {
            notificationComponent.ShowErrorMessage("Please enter valid values for duration and number of stages.");
            return;
        }

        stageDateErrors.Clear();

        project.ProjectInfo.Stages.Clear();

        var stageDuration = totalDuration / numberOfStages;
        var stagePercentage = 100m / numberOfStages;

        for (int i = 0; i < numberOfStages; i++)
        {
            var stage = new Stage
            {
                AmountToRelease = stagePercentage,
                ReleaseDate = project.ProjectInfo.StartDate.AddDays(i * stageDuration)
            };

            project.ProjectInfo.Stages.Add(stage);

            stageDateErrors[stage] = "";
        }

        StateHasChanged();
    }

    private void ToggleStageMode()
    {
        isPresetMode = !isPresetMode; // Toggle between Presets and Automatic
        StateHasChanged(); // Update the UI
    }

    private readonly string[] spacePhotos = new[]
    {
    "https://images-assets.nasa.gov/image/hubble-observes-one-of-a-kind-star-nicknamed-nasty_17754652960_o/hubble-observes-one-of-a-kind-star-nicknamed-nasty_17754652960_o~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA22081/PIA22081~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e000282/GSFC_20171208_Archive_e000282~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001894/GSFC_20171208_Archive_e001894~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA08216/PIA08216~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001465/GSFC_20171208_Archive_e001465~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/hubble-sees-the-wings-of-a-butterfly-the-twin-jet-nebula_20283986193_o/hubble-sees-the-wings-of-a-butterfly-the-twin-jet-nebula_20283986193_o~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA14417/PIA14417~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA05062/PIA05062~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001518/GSFC_20171208_Archive_e001518~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/carina_nebula/carina_nebula~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA25433/PIA25433~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA15415/PIA15415~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e002086/GSFC_20171208_Archive_e002086~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA14731/PIA14731~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e002020/GSFC_20171208_Archive_e002020~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/0203048/0203048~thumb.jpg?as=webp"
    };

    private FounderProject CreateDefaultProject(FounderKeys projectsKeys)
    {
        return new FounderProject
        {
            ProjectIndex = projectsKeys.Index,
            Metadata = new ProjectMetadata(),
            ProjectInfo = new ProjectInfo
            {
                FounderKey = projectsKeys.FounderKey,
                FounderRecoveryKey = projectsKeys.FounderRecoveryKey,
                ProjectIdentifier = projectsKeys.ProjectIdentifier,
                NostrPubKey = projectsKeys.NostrPubKey,
                StartDate = DateTime.UtcNow.AddMinutes(2), // to allow testing and spending immediately
                PenaltyDays = 90,
                ExpiryDate = DateTime.UtcNow.AddDays(120),
                TargetAmount = Money.Coins(50).Satoshi
            }
        };
    }
    private void PopulateTestnetData(FounderProject project)
    {
        var random = new Random();

        if (string.IsNullOrEmpty(project.Metadata.Banner))
        {
            project.Metadata.Banner = spacePhotos[random.Next(spacePhotos.Length)];
        }

        if (string.IsNullOrEmpty(project.Metadata.Picture))
        {
            project.Metadata.Picture = spacePhotos[random.Next(spacePhotos.Length)];
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        notificationComponent.ShowNotificationMessage("Copied to clipboard", 2);
    }


    private IEnumerable<(string IconName, string Label, string Value)> GetProjectInfo()
    {
        return new List<(string, string, string)>
    {
    ("identifier", "Project Identifier", project.ProjectInfo.ProjectIdentifier),
    ("key", "Founder Key", project.ProjectInfo.FounderKey)
    };
    }


    private IEnumerable<(string IconName, string Label, string Value, string color, bool fullWidth)> GetAdditionalProjectInfo()
    {
        return new List<(string, string, string, string, bool)>
    {
    ("balance", "Target amount", $"{targetAmountInBTC} {network.CoinTicker}", "text-success", true),
    ("calendar", "Funding start date", $"{project.ProjectInfo.StartDate.FormatDate()} in {(project.ProjectInfo.StartDate - DateTime.Now).Days} days", "text-warning", false),
    ("calendar", "Funding end date", $"{project.ProjectInfo.EndDate.FormatDate()} in {(project.ProjectInfo.EndDate - DateTime.Now).Days} days", "text-warning", false),
    ("unlock", "Penalty days", $"{project.ProjectInfo.PenaltyDays} days", "text-warning", false),
    ("calendar", "Expiry date", $"{project.ProjectInfo.ExpiryDate.FormatDate()} in {(project.ProjectInfo.ExpiryDate - DateTime.Now).Days} days", "text-warning", false)
    };
    }

    private void ValidateEndDate()
    {
        endDateError = false;
        endDateErrorMessage = string.Empty;

        if (project.ProjectInfo.EndDate <= project.ProjectInfo.StartDate)
        {
            endDateError = true;
            endDateErrorMessage = "Funding end date must be after the start date.";
            StateHasChanged();
            return;
        }

        if (!ShouldSkipProductionValidations)
        {
            if (project.ProjectInfo.EndDate > project.ProjectInfo.StartDate.AddYears(1))
            {
                endDateError = true;
                endDateErrorMessage = "Funding period cannot exceed one year.";
                StateHasChanged();
                return;
            }

            if (project.ProjectInfo.Stages.Any())
            {
                var firstStageDate = project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate).First().ReleaseDate;
                if (project.ProjectInfo.EndDate >= firstStageDate)
                {
                    endDateError = true;
                    endDateErrorMessage = "Funding end date must be before the first stage release date.";
                    StateHasChanged();
                    return;
                }
            }
        }

        if (!endDateError)
        {
            ValidateAllStages();
        }

        project.ProjectInfo.ExpiryDate = CalculateExpiryDate();
        StateHasChanged();
    }

    private async Task OnEndDateSelected()
    {
        ValidateEndDate();
    }

    private DateTime? GetEndDate()
    {
        return project.ProjectInfo.EndDate;
    }

    private void SetEndDate(DateTime? value)
    {
        if (value.HasValue)
        {
            project.ProjectInfo.EndDate = value.Value;
            ValidateEndDate();
            foreach (var stage in project.ProjectInfo.Stages)
            {
                SetStageReleaseDate(stage, stage.ReleaseDate);
            }

        }
    }

    private DateTime? GetStageReleaseDate(Stage stage)
    {
        return stage.ReleaseDate;
    }

    private void SetStageReleaseDate(Stage stage, DateTime? value)
    {
        if (!value.HasValue)
            return;

        stage.ReleaseDate = value.Value;

        ValidateAllStages();
        ValidateEndDate();
        StateHasChanged();
    }

    private void ValidateStageDate(Stage stage)
    {
        if (!stageDateErrors.ContainsKey(stage))
        {
            stageDateErrors[stage] = string.Empty;
        }

        stageDateErrors[stage] = string.Empty;

        var stages = project.ProjectInfo.Stages;
        var index = stages.IndexOf(stage);

        if (index > 0)
        {
            var previousStage = stages[index - 1];
            if (stage.ReleaseDate <= previousStage.ReleaseDate)
            {
                stageDateErrors[stage] = $"Stage {index + 1} must be after Stage {index}.";
                return;
            }
        }

        if (index < stages.Count - 1)
        {
            var nextStage = stages[index + 1];
            if (stage.ReleaseDate >= nextStage.ReleaseDate)
            {
                stageDateErrors[stage] = $"Stage {index + 1} must be before Stage {index + 2}.";
                return;
            }
        }

        if (!ShouldSkipProductionValidations)
        {
            if (index == 0)
            {
                if (stage.ReleaseDate <= project.ProjectInfo.EndDate)
                {
                    stageDateErrors[stage] = "First stage must be after the fundraising end date.";
                    return;
                }
            }

            if (stage.ReleaseDate >= project.ProjectInfo.ExpiryDate)
            {
                stageDateErrors[stage] = "Stage must be before project expiry date.";
                return;
            }

            if (stage.ReleaseDate > project.ProjectInfo.StartDate.AddYears(2))
            {
                stageDateErrors[stage] = "Stage date cannot be more than 2 years from project start.";
                return;
            }
        }
    }

    private void ValidateAllStages()
    {
        foreach (var stage in project.ProjectInfo.Stages)
        {
            ValidateStageDate(stage);
        }
    }


    private DateTime CalculateExpiryDate()
    {
        if (project.ProjectInfo.Stages.Any())
        {
            var lastStageDate = project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate).Last().ReleaseDate;
            return lastStageDate.AddDays(60);
        }

        return project.ProjectInfo.StartDate.AddDays(60);
    }

    private async void OpenDatePicker(string inputId)
    {
        await JS.InvokeVoidAsync("eval", $"document.getElementById('{inputId}')?.showPicker()");
    }

    private async Task AutoDeployProject()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(async () => await ExecuteAutoDeployment());
        }
        else
        {
            await ExecuteAutoDeployment();
        }
    }

    private async Task ExecuteAutoDeployment()
    {
        if (!ValidateInputData())
        {
            return;
        }

        autoDeploySpinner = true;
        isDeploying = true;
        hasErrors = false;
        var completedSteps = new List<string>();
        StateHasChanged();

        try
        {
            if (!nostrMetadataCreated)
            {
                currentStep = 1;
                StateHasChanged();
                await Task.Delay(500);

                await CreatNostrProfile();
                var profileCreated = await WaitForCondition(() => nostrMetadataCreated, TimeSpan.FromSeconds(30));
                if (!profileCreated)
                {
                    throw new Exception("Failed to create Project profile within timeout period.");
                }
                completedSteps.Add("Profile Created");
            }

            // Step 2: Create Project Info
            if (!nostrApplicationSpecificDataCreated)
            {
                currentStep = 2;
                StateHasChanged();
                await Task.Delay(500);

                await CreatProjectInfoOnNostr();
                var projectInfoCreated = await WaitForCondition(() => nostrApplicationSpecificDataCreated, TimeSpan.FromSeconds(30));
                if (!projectInfoCreated)
                {
                    throw new Exception("Failed to publish project info within timeout period.");
                }
                completedSteps.Add("Project Info Published");
            }

            if (string.IsNullOrEmpty(project.CreationTransactionId))
            {
                currentStep = 3;
                StateHasChanged();
                await Task.Delay(500);

                await CreatProjectTransaction();
                completedSteps.Add("Ready for Blockchain Deployment");
            }
            else
            {
                NavigationManager.NavigateTo($"/view/{project.ProjectInfo.ProjectIdentifier}");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, "Error during auto deployment. Completed steps: {CompletedSteps}", string.Join(", ", completedSteps));

            var errorMessage = $"Auto deployment failed at step {currentStep}: {e.Message}";
            if (completedSteps.Any())
            {
                errorMessage += $"\n\nCompleted steps: {string.Join(", ", completedSteps)}";
            }

            notificationComponent.ShowErrorMessage(errorMessage);
            hasErrors = true;

            SetCurrentStepBasedOnProgress();
        }
        finally
        {
            autoDeploySpinner = false;
            isDeploying = false;
            StateHasChanged();
        }
    }

    private async Task<bool> WaitForCondition(Func<bool> condition, TimeSpan timeout)
    {
        var startTime = DateTime.UtcNow;

        while (DateTime.UtcNow - startTime < timeout)
        {
            if (condition())
            {
                return true;
            }

            await Task.Delay(100);
        }

        return false;
    }

    private void SetCurrentStepBasedOnProgress()
    {
        if (!nostrMetadataCreated)
        {
            currentStep = 1;
        }
        else if (!nostrApplicationSpecificDataCreated)
        {
            currentStep = 2;
        }
        else
        {
            currentStep = 3;
        }
    }

    private async Task CheckAndAdvanceStep()
    {
        StateHasChanged();
        await Task.Delay(100);
    }

    private bool ValidateWebsiteUrl()
    {
        websiteError = false;
        websiteErrorMessage = "";

        if (string.IsNullOrEmpty(project.Metadata?.Website))
        {
            return true;
        }


        if (!Uri.TryCreate(project.Metadata.Website, UriKind.Absolute, out Uri uriResult) ||
            (uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps))
        {
            websiteError = true;
            websiteErrorMessage = "Please enter a valid URL (starting with http:// or https://)";
            return false;
        }

        return true;
    }

    private bool ValidateImageUrl(string url, string fieldName)
    {
        if (string.IsNullOrWhiteSpace(url))
            return true;


        if (!Uri.TryCreate(url.Trim(), UriKind.Absolute, out Uri uriResult))
        {
            notificationComponent.ShowErrorMessage($"{fieldName} must be a valid URL.");
            return false;
        }

        if (uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps)
        {
            notificationComponent.ShowErrorMessage($"{fieldName} must start with http:// or https://.");
            return false;
        }

        var validExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp", ".svg" };
        string path = uriResult.AbsolutePath.ToLowerInvariant();

        if (!validExtensions.Any(ext => path.EndsWith(ext)))
        {
            notificationComponent.ShowErrorMessage($"{fieldName} must link to a valid image file (jpg, jpeg, png, gif, webp, svg).");
            return false;
        }

        return true;
    }


    private void OnWebsiteChanged()
    {
        ValidateWebsiteUrl();
        StateHasChanged();
    }

    private void ValidateTargetAmount()
    {
        targetAmountError = false;
        targetAmountErrorMessage = string.Empty;

        if (targetAmountInBTC <= 0)
        {
            targetAmountError = true;
            targetAmountErrorMessage = "Target amount must be greater than 0.";
            StateHasChanged();
            return;
        }

        if (!ShouldSkipProductionValidations)
        {
            if (targetAmountInBTC < 0.01m)
            {
                targetAmountError = true;
                targetAmountErrorMessage = "Target amount must be at least 0.01 BTC.";
                StateHasChanged();
                return;
            }

            if (targetAmountInBTC > 100m)
            {
                targetAmountError = true;
                targetAmountErrorMessage = "Target amount cannot exceed 100 BTC.";
                StateHasChanged();
                return;
            }
        }

        StateHasChanged();
    }

    private void ValidatePenaltyDays()
    {
        penaltyDaysError = false;
        penaltyDaysErrorMessage = string.Empty;

        if (project.ProjectInfo.PenaltyDays < 0)
        {
            penaltyDaysError = true;
            penaltyDaysErrorMessage = "Penalty days cannot be negative.";
        }
        
        else if (!ShouldSkipProductionValidations)
        {
            if (project.ProjectInfo.PenaltyDays < 10)
            {
                penaltyDaysError = true;
                penaltyDaysErrorMessage = "Penalty period must be at least 10 days.";
            }
            else if (project.ProjectInfo.PenaltyDays > 365)
            {
                penaltyDaysError = true;
                penaltyDaysErrorMessage = "Penalty period cannot exceed 365 days.";
            }
        }

        StateHasChanged();
    }

    private void OnPenaltyDaysInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            project.ProjectInfo.PenaltyDays = value;
            ValidatePenaltyDays();
        }
    }
}
