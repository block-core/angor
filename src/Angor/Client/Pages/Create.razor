@page "/create"
@using Angor.Client.Models
@using Angor.Client.Storage
@using Angor.Shared
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Angor.Shared.Services
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.Networks
@using NBitcoin.DataEncoders
@inherits BaseComponent
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject NavigationManager NavigationManager
@inject IWalletOperations _WalletOperations
@inject IRelayService _RelayService
@inject ILogger<Create> _Logger;
@inject IHtmlStripperService HtmlStripperService;

@inject IFounderTransactionActions _founderTransactionActions
<NotificationComponent @ref="notificationComponent"/>
<PasswordComponent @ref="passwordComponent"/>

@if (!hasWallet)
{
    NavigationManager.NavigateTo("/wallet");
    return;
}


<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none">
                    <Icon IconName="add" Height="42" Width="42"/>
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Create New Project
                    </h5>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-4">
    <div class="row d-flex justify-content-center text-center align-items-center">
        <div class="col-lg-3 col-sm-6 mt-lg-0 mt-sm-4">
            <div class="card h-100 @(activeTab == 1 ? "active" : "")" id="tab1">
                <div class="card-body d-flex flex-column justify-content-center text-center" role="button" @onclick="() => ChangeTab(1)">
                    <span class="mb-3 @(activeTab == 1 ? "heartbeat" : "")" aria-hidden="true">
                        <Icon IconName="relay"></Icon>
                    </span>
                    <h5> Project Metadata </h5>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-sm-6 mt-4 mt-lg-0 mt-sm-4">
            <div class="card h-100 @(activeTab == 2 ? "active" : "")" id="tab2">
                <div class="card-body d-flex flex-column justify-content-center text-center" role="button" @onclick="() => ChangeTab(2)">
                    <span class="mb-3 @(activeTab == 2 ? "heartbeat" : "")" aria-hidden="true">
                        <Icon IconName="view-project"></Icon>
                    </span>
                    <h5> Project Info </h5>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-sm-6 mt-4 mt-lg-0 mt-sm-4">
            <div class="card h-100 @(activeTab == 3 ? "active" : "")" id="tab3">
                <div class="card-body d-flex flex-column justify-content-center text-center" role="button" @onclick="() => ChangeTab(3)">
                    <span class="mb-3 @(activeTab == 3 ? "heartbeat" : "")" aria-hidden="true">
                        <Icon IconName="addresses"></Icon>
                    </span>
                    <h5> On Chain </h5>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="card card-body mt-4">
    @if (activeTab == 1)
    {
        <div class="row g-4">
            <div class="col-lg-7 col-12">
                <EditForm Model="project.Metadata">
                    <div class="mb-3">
                        <label for="NostrMetadataName" class="form-label">Project name</label>
                        <InputText id="NostrMetadataName" autocomplete="off" @bind-Value="project.Metadata.Name" class="form-control" placeholder="Enter the name of your project" disabled="@nostrMetadataCreated"/>
                    </div>

                    <div class="mb-3">
                        <label for="NostrMetadataAbout" class="form-label">About</label>
                        <InputTextArea id="NostrMetadataAbout" autocomplete="off" @bind-Value="project.Metadata.About" class="form-control" placeholder="Provide a brief description of the project" disabled="@nostrMetadataCreated"/>
                    </div>

                    <div class="mb-3">
                        <label for="NostrMetadataWebsite" class="form-label">Project website</label>
                        <InputText id="NostrMetadataWebsite" autocomplete="off" @bind-Value="project.Metadata.Website" class="form-control" placeholder="Enter the URL of the project website" disabled="@nostrMetadataCreated"/>
                    </div>

                    <div class="mb-3">
                        <label for="NostrMetadataBanner" class="form-label">Banner</label>
                        <InputText id="NostrMetadataBanner" autocomplete="off" @bind-Value="project.Metadata.Banner" class="form-control" placeholder="Enter the URL for the project banner image" disabled="@nostrMetadataCreated"/>
                    </div>

                    <div class="mb-3">
                        <label for="NostrMetadataPicture" class="form-label">Image</label>
                        <InputText id="NostrMetadataPicture" autocomplete="off" @bind-Value="project.Metadata.Picture" class="form-control" placeholder="Enter the URL for the project logo or profile picture" disabled="@nostrMetadataCreated"/>
                    </div>

                    <!-- Restore the form submit button -->
                    <div class="card card-body mt-4">
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success" @onclick="() => ChangeTab(2)">
                                <span>Next</span>
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>

            <!-- Project Preview Section -->
            <div class="col-lg-5 col-12">
                <div class="d-flex align-items-stretch">
                    <div class="card w-100 project-card me-0 ms-0">
                        <label class="form-label">Project Preview</label>
                        <a class="d-block">
                            <div class="banner-container">
                                @if (string.IsNullOrEmpty(project.Metadata?.Banner))
                                {
                                    <img class="banner-image" src="/assets/img/no-image.jpg" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';"/>
                                }
                                else
                                {
                                    <img class="banner-image" src="@project.Metadata.Banner" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';"/>
                                }
                                <div class="profile-container">
                                    @if (string.IsNullOrEmpty(project.Metadata?.Picture))
                                    {
                                        <img class="profile-image" src="/assets/img/no-image.jpg" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';"/>
                                    }
                                    else
                                    {
                                        <img class="profile-image" src="@project.Metadata.Picture" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';"/>
                                    }
                                </div>
                            </div>
                        </a>

                        <div class="card-body pb-0">
                            <div class="d-flex align-items-center mb-4">
                                <span class="user-select-none">
                                    <Icon IconName="view" Height="24" Width="24"></Icon>
                                </span>
                                <div class="h-100 ms-3">
                                    <h5 class="mb-0 font-weight-bolder">
                                        @if (string.IsNullOrEmpty(project.Metadata?.Name))
                                        {
                                            <span>Name</span>
                                        }
                                        else
                                        {
                                            <span>@project.Metadata.Name</span>
                                        }
                                    </h5>
                                </div>
                            </div>

                                @if (string.IsNullOrEmpty(project.Metadata?.About))
                                {
                                    <p class="mb-0 line-clamp-3">About</p>
                                }
                                else
                                {
                                    <p class="mb-0 line-clamp-3">@ConvertToMarkupString(project.Metadata.About)</p>
                                }

                        </div>
                        <div class="card-footer pt-0">
                            <hr class="horizontal light mt-3">
                            <span role="button" class="d-flex align-items-center btn btn-border w-100-m">
                                <span class="user-select-none">
                                    <Icon IconName="view-project" Height="24" Width="24"></Icon>
                                </span>
                                <div class="h-100 ms-3">
                                    <span class="mb-0 font-weight-bolder text-primary">
                                        View Project
                                    </span>
                                </div>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }


    @if (activeTab == 2)
    {
        <EditForm Model="project">
            <!-- Angor Fee Key -->
            <div class="mb-3">
                <label for="angorFeeKey" class="form-label">Project identifier</label>
                <InputText id="angorFeeKey" @bind-Value="project.ProjectInfo.ProjectIdentifier" class="form-control" placeholder="Enter angor fee key" readonly disabled="@nostrApplicationSpecificDataCreated"/>
            </div>

            <!-- Founder Key -->
            <div class="mb-3">
                <label for="founderKey" class="form-label">Founder Key</label>
                <InputText id="founderKey" @bind-Value="project.ProjectInfo.FounderKey" class="form-control" placeholder="Enter founder key" readonly disabled="@nostrApplicationSpecificDataCreated"/>
            </div>

            <!-- Start Date -->
            <div class="mb-3">
                <label for="startDate" class="form-label">Start Date</label>
                <InputDate id="startDate" @bind-Value="project.ProjectInfo.StartDate" class="form-control" disabled="@nostrApplicationSpecificDataCreated"/>
            </div>

            <!-- Penalty Date -->
            <div class="mb-3">
                <label for="penaltyDays" class="form-label">Penalty Days</label>
                <InputNumber id="penaltyDays" @bind-Value="project.ProjectInfo.PenaltyDays" class="form-control" disabled="@nostrApplicationSpecificDataCreated"/>
            </div>

            <!-- Expiry Date -->
            <div class="mb-3">
                <label for="expiryDate" class="form-label">Expiry Date</label>
                <InputDate id="expiryDate" @bind-Value="project.ProjectInfo.ExpiryDate" class="form-control" disabled="@nostrApplicationSpecificDataCreated"/>
            </div>

            <!-- Target Amount -->
            <div class="mb-3">
                <label for="targetAmount" class="form-label">Target Amount</label>
                <InputNumber id="targetAmount" @bind-Value="project.ProjectInfo.TargetAmount" class="form-control" placeholder="Enter target amount" disabled="@nostrApplicationSpecificDataCreated"/>
            </div>

            <!-- Presets for Stages -->
            <!-- Toggle Button -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <button class="btn btn-primary" @onclick="ToggleStageMode">
                    @if (isPresetMode)
                    {
                    <span>Switch to Manual Helper</span>
                    }
                    else
                    {
                    <span>Switch to Presets</span>
                    }
                </button>
            </div>

            <!-- Conditionally Render Presets or Automatic Inputs -->
            @if (isPresetMode)
            {
            <!-- Preset Selection -->
            <div class="mb-3">
                <label for="stagePreset" class="form-label">Select Stage Preset</label>
                <select id="stagePreset" class="form-select" @onchange="OnStagePresetChange">
                    <option value="">Select a preset...</option>
                    <option value="preset1">Preset 1: 3 Stages (10%, 30%, 60%)</option>
                    <option value="preset2">Preset 2: 4 Stages (25%, 25%, 25%, 25%)</option>
                    <option value="preset3">Preset 3: 3 Stages (60%, 20%, 20%)</option>
                </select>
            </div>
            }
            else
            {
            <!-- Automatic Generation Inputs -->
            <div class="mb-3">
                <label for="totalDuration" class="form-label">Total Project Duration (in days)</label>
                <InputNumber id="totalDuration" @bind-Value="totalDuration" class="form-control" placeholder="Enter total duration in days" />
            </div>
            <div class="mb-3">
                <label for="numberOfStages" class="form-label">Number of Stages</label>
                <InputNumber id="numberOfStages" @bind-Value="numberOfStages" class="form-control" placeholder="Enter number of stages" />
            </div>
            <button type="button" class="btn btn-border mb-3" @onclick="GenerateSmartStages">Generate Stages</button>
            }

            <!-- Stages -->
            <h3 class="mb-3">Stages</h3>
            @foreach (var stage in project.ProjectInfo.Stages)
            {
            <div class="mb-3">
                <label class="form-label">The amount in % to allocate for stage @(project.ProjectInfo.Stages.IndexOf(stage) + 1)</label>
                <div class="input-group">
                    <InputNumber @bind-Value="stage.AmountToRelease" class="form-control" placeholder="Enter amount to release as a percentage" min="1" max="100" step="1" disabled="@nostrApplicationSpecificDataCreated" />
                    <InputDate @bind-Value="stage.ReleaseDate" class="form-control" disabled="@nostrApplicationSpecificDataCreated" />
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveStage(stage)">Remove</button>
                </div>
                @if (project.ProjectInfo.Stages.IndexOf(stage) > 0)
                {
                var previousStage = project.ProjectInfo.Stages[project.ProjectInfo.Stages.IndexOf(stage) - 1];
                var daysBetween = (stage.ReleaseDate - previousStage.ReleaseDate).Days;
                <p class="text-muted">Days since last stage: @daysBetween days</p>
                }
            </div>
            }
            


            <button type="button" class="btn btn-border mb-3" @onclick="AddStage" disabled="@nostrApplicationSpecificDataCreated">Add Stage</button>

            <div class="card card-body mt-4">
                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-success" @onclick="() => ChangeTab(1)">
                        <span>Previous</span>
                    </button>
                    
                    <button type="submit" class="btn btn-success" @onclick="() => ChangeTab(3)">
                        <span>Next</span>
                    </button>
                </div>
            </div>
        </EditForm>
    }

    @if (activeTab == 3)
    {
        <div class="form-control mt-1 d-flex align-items-center">
            <Icon IconName="name"></Icon>
            <p class="card-text ms-2">
                <strong>Project Name:</strong> @project.Metadata.Name
            </p>
        </div>
        <div class="form-control mt-1 d-flex align-items-center">
            <Icon IconName="about"></Icon>
            <p class="card-text ms-2">
                <strong>Project About:</strong> @((MarkupString)project.Metadata.About)
            </p>
        </div>
        <div class="form-control mt-1 d-flex align-items-center">
            <Icon IconName="identifier"></Icon>
            <p class="card-text ms-2">
                <strong>Project Identifier:</strong> @project.ProjectInfo.ProjectIdentifier
            </p>
        </div>
        <div class="form-control mt-1 d-flex align-items-center">
            <Icon IconName="key"></Icon>
            <p class="card-text ms-2"><strong>Founder Key:</strong> @project.ProjectInfo.FounderKey.Substring(0, 10)...</p> <!-- Display only the first 10 characters -->
        </div>
        <div class="form-control mt-1 d-flex align-items-center">
            <Icon IconName="balance"></Icon>
            <p class="card-text ms-2">
                <strong>Target amount:</strong> @project.ProjectInfo.TargetAmount @network.CoinTicker
            </p>
        </div>
        <div class="form-control mt-1 d-flex align-items-center">
            <Icon IconName="calendar"></Icon>
            <p class="card-text ms-2"><strong>Start date:</strong> @project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") in @((project.ProjectInfo.StartDate - DateTime.Now).Days) days</p>
        </div>
        <div class="form-control mt-1 d-flex align-items-center">
            <Icon IconName="calendar"></Icon>
            <p class="card-text ms-2"><strong>Expiry date:</strong> @project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy") in @((project.ProjectInfo.ExpiryDate - DateTime.Now).Days) days</p>
        </div>
        <div class="form-control mt-1 d-flex align-items-center">
            <Icon IconName="sad-circle"></Icon>
            <p class="card-text ms-2"><strong>Penalty days:</strong> @project.ProjectInfo.PenaltyDays days</p>
        </div>


        <h6 class="mt-4 mb-4">Stages</h6>

        @foreach (var stage in project.ProjectInfo.Stages)
        {
            <div class="form-control card mt-2 p-3">
                <div class="d-flex align-items-center">
                    <Icon IconName="percent"></Icon>
                    <p class="card-text ms-2 mb-1"><strong>Stage Percent:</strong> @stage.AmountToRelease %</p>
                </div>
                <div class="d-flex align-items-center">
                    <Icon IconName="calendar"></Icon>
                    <p class="card-text ms-2 mb-1"><strong>Stage Date:</strong> @stage.ReleaseDate.ToString("dd/MM/yyyy") - @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after project starts</p>
                </div>
            </div>
        }

        <div class="mb-4">
            <h5>Current Step</h5>
            <div class="text-center">
                @GetProgressMessage()
            </div>
        </div>
        <button class="btn btn-success mt-4 me-3" @onclick="ConfirmFinalizeNostrProfileCreation" disabled="@nostrMetadataCreated">
            @if (createProfileSpinner)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Creating Nostr Profile...</span>
            }
            else
            {
                <span>Create Nostr Profile</span>
            }
        </button>

        <button class="btn btn-primary mt-4" @onclick="ConfirmFinalizeProjectInfoCreation" disabled="@(!nostrMetadataCreated || nostrApplicationSpecificDataCreated)">
            @if (createApplicationDataSpinner)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Creating Project Info...</span>
            }
            else
            {
                <span>Create Project Info</span>
            }
        </button>

        <button type="button" class="btn btn-success mt-4" @onclick="CreatProjectTransactionAnCheckPassword" disabled="@(creatProjectSpinner || !nostrApplicationSpecificDataCreated || !nostrMetadataCreated)">
            @if (creatProjectSpinner)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Create Project...</span>
            }
            else
            {
                <span>Create Project</span>
            }
        </button>
        <div class="card card-body mt-4">
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-success" @onclick="() => ChangeTab(2)">
                    <span>Previous</span>
                </button>
            </div>
        </div>
    }


@if (showCreateModal)
{
    <!-- Confirmation Modal -->
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <span type="button" data-cy="close-show-wallet-words" @onclick="() => showCreateModal = false" aria-label="Close">
                        <Icon IconName="close-circle"/>
                    </span>
                </div>


                <div class="modal-body modal-body-scroll">
                    <p class="mb-1">
                        <strong>Project Identifier:</strong> @project.ProjectInfo.ProjectIdentifier
                    </p>
                    <p class="mb-1"><strong>Founder Key:</strong> @project.ProjectInfo.FounderKey.Substring(0, 10)...</p> <!-- Display only the first 10 characters -->

                    <p class="mb-1">
                        <strong>Target amount:</strong> @project.ProjectInfo.TargetAmount @network.CoinTicker
                    </p>

                    <p class="mb-1"><strong>Start date:</strong> @project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") in @((project.ProjectInfo.StartDate - DateTime.Now).Days) days</p>
                    <p class="mb-1"><strong>Expiry date:</strong> @project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy") in @((project.ProjectInfo.ExpiryDate - DateTime.Now).Days) days</p>
                    <p class="mb-1"><strong>Penalty days:</strong> @project.ProjectInfo.PenaltyDays days</p>

                    <p class="mb-1">
                        <strong>Miner fee:</strong> @Money.Satoshis(signedTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                    </p>
                    <p class="mb-1">
                        <strong>Angor fee:</strong> @signedTransaction?.Transaction.Outputs.First().Value.ToUnit(MoneyUnit.BTC) @network.CoinTicker
                    </p>

                    <hr>

                    <div class="mb-3">
                        <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                        <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="FeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                    </div>

                    <hr>

                    <h6 class="mt-3 mb-2">Stages</h6>
                    @foreach (var stage in project.ProjectInfo.Stages)
                    {
                        <div style="border-top: 1px solid #dee2e6; padding-top: 10px; margin-top: 10px; font-size: 0.85em;">
                            <p class="mb-1"><strong>Stage percent:</strong> @stage.AmountToRelease % </p>
                            <p class="mb-1"><strong>Stage date:</strong> @stage.ReleaseDate.ToString("dd/MM/yyyy") - @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after project starts </p>
                        </div>
                    }

                    <hr>

                    <p class="mt-3">Are you sure you want to continue?</p>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-border" @onclick="Send" disabled="@publishProjectSpinner">
                        @if (publishProjectSpinner)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Confirm...</span>
                        }
                        else
                        {
                            <span>Confirm</span>
                        }
                    </button>


                </div>
            </div>
        </div>
    </div>
}

@if (showConfirmationModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmationModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>@confirmationMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmationModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="PerformFinalizeAction">Confirm</button>
                </div>
            </div>
        </div>
    </div>
}



</div>


@code {

    private bool sendConfirmModal;
    private bool showCreateModal;
    private bool isPresetMode = true;
    private bool showConfirmationModal;
    private string confirmationMessage;
    private Action finalizeAction;

    private bool showResetConfirmation;
    private string resetTarget;

    Transaction unsignedTransaction;
    TransactionInfo signedTransaction;

    private readonly FeeData feeData = new();

    private FounderProject project = new();
    
    private readonly Dictionary<string, (int[] Percentages, int IntervalDays)> presets = new()
    {
        { "preset1", (new[] { 10, 30, 60 }, 10) },
        { "preset2", (new[] { 25, 25, 25, 25 }, 10) },
        { "preset3", (new[] { 60, 20, 20 }, 15) }
    };
    

    private int activeTab = 1;
    
    private int totalDuration;
    private int numberOfStages;

    bool createProfileSpinner;
    bool createApplicationDataSpinner;
    bool creatProjectSpinner;
    bool publishProjectSpinner;

    bool nostrMetadataCreated;
    bool nostrApplicationSpecificDataCreated;

    protected override async Task OnInitializedAsync()
    {
        if (!hasWallet)
        {
            return;
        }

        var projects = storage.GetFounderProjects() ?? new List<FounderProject>();
        var keys = _walletStorage.GetFounderKeys();

        if (projects.Count(p => !string.IsNullOrEmpty(p.CreationTransactionId)) >= keys.Keys.Count)
        {
            notificationComponent.ShowErrorMessage("All founder keys have been used for this wallet!");
            return;
        }

        var latestProject = projects.Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).MaxBy(p => p.ProjectIndex);
        var projectsKeys = _derivationOperations.GetProjectKey(keys, latestProject?.ProjectIndex + 1 ?? 1);

        project = projects.FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier)
                  ?? new FounderProject
                  {
                      ProjectIndex = projectsKeys.Index,
                      Metadata = new ProjectMetadata(),
                      ProjectInfo = new ProjectInfo
                      {
                          FounderKey = projectsKeys.FounderKey,
                          FounderRecoveryKey = projectsKeys.FounderRecoveryKey,
                          ProjectIdentifier = projectsKeys.ProjectIdentifier,
                          NostrPubKey = projectsKeys.NostrPubKey,
                          StartDate = DateTime.UtcNow.AddHours(2),
                          PenaltyDays = 90,
                          ExpiryDate = DateTime.UtcNow.AddDays(120),
                          TargetAmount = 50
                      }
                  };

        // save project to storage immediately if new
        if (!projects.Any(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier))
        {
            storage.AddFounderProject(project);
        }

        // check if the project was already published to nostr
        nostrMetadataCreated = project.NostrProfileCreated;
        nostrApplicationSpecificDataCreated = !string.IsNullOrEmpty(project.ProjectInfoEventId);
    }


    private string GetActiveClass(int tabNumber)
    {
        if (tabNumber == 2)
        {
            if (nostrMetadataCreated && !nostrApplicationSpecificDataCreated)
            {
                if (!project.ProjectInfo.Stages.Any())
                {
                    // to make it easier for testing we pre add some stages
                    project.ProjectInfo.Stages = new List<Stage>
                    {
                        new() { AmountToRelease = 10, ReleaseDate = DateTime.UtcNow }, //.AddDays(10) }, during testing we often need to spend a stage immediately
                        new() { AmountToRelease = 30, ReleaseDate = DateTime.UtcNow.AddDays(20) },
                        new() { AmountToRelease = 60, ReleaseDate = DateTime.UtcNow.AddDays(30) }
                    };
                }
            }
        }

        return activeTab == tabNumber ? "active" : "";
    }

    private void ConfirmFinalizeNostrProfileCreation()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr profile already created");
            return;
        }

        if (!ValidateInputData())
        {
            // If validation fails, return early
            return;
        }

        confirmationMessage = "Are you sure you want to create the Nostr Profile?";
        finalizeAction = FinalizeNostrProfileCreation;
        showConfirmationModal = true;
    }

    private async void ConfirmFinalizeProjectInfoCreation()
    {
        if (nostrApplicationSpecificDataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr project already created");
            return;
        }

        confirmationMessage = "Are you sure you want to deploy the project info to Nostr?.";
        finalizeAction = FinalizeProjectInfoCreation;
        showConfirmationModal = true;
    }

    private void CloseConfirmationModal()
    {
        showConfirmationModal = false;
        StateHasChanged();
    }

    private void PerformFinalizeAction()
    {
        showConfirmationModal = false;
        finalizeAction.Invoke();
    }

    private async void FinalizeNostrProfileCreation()
    {
        await CreatNostrProfileAnCheckPassword();
    }

    private async void FinalizeProjectInfoCreation()
    {
        await CreatProjectInfoOnNostrAnCheckPassword();
    }

    private async Task CreatNostrProfileAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatNostrProfile);
        }
        else
        {
            await CreatNostrProfile();    
        }
    }

    private async Task CreatNostrProfile()
    {
        createProfileSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectIndex);

            var resultId = await _RelayService.CreateNostrProfileAsync(
                project.Metadata.ToNostrMetadata(), 
                NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes()),
                _ =>
                {
                    createProfileSpinner = false;

                    if (!_.Accepted)
                    {
                        notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!"); //TODO add export project info
                    }

                    if (nostrMetadataCreated == false)
                    {
                        nostrMetadataCreated = true;
                        project.NostrProfileCreated = true;
                        storage.UpdateFounderProject(project);
                    }

                    StateHasChanged();
                });


            if (string.IsNullOrEmpty(resultId))
            {
                notificationComponent.ShowErrorMessage("Failed to create nostr profile");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, "Error creating nostr profile.");
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            createProfileSpinner = false;
        }
    }

    private async Task CreatProjectInfoOnNostrAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectInfoOnNostr);
        }
        else
        {
            await CreatProjectInfoOnNostr();
        }
    }

    private async Task CreatProjectInfoOnNostr()
    {
        createApplicationDataSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectIndex);

            var nostrKeyHex = Encoders.Hex.EncodeData(nostrKey.ToBytes());

            var resultId = await _RelayService.AddProjectAsync(project.ProjectInfo, nostrKeyHex,
                _ =>
                {
                    createApplicationDataSpinner = false;

                    if (!_.Accepted)
                        notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!"); //TODO add export project info

                    if (nostrApplicationSpecificDataCreated == false)
                    {
                        nostrApplicationSpecificDataCreated = true;
                        project.ProjectInfoEventId = _.EventId;
                        storage.UpdateFounderProject(project);
                    }

                    StateHasChanged();
                });

            // todo: do we actually need this? does it actualy work to delete?
            if (string.IsNullOrEmpty(resultId))
            {
                createApplicationDataSpinner = false;
                await _RelayService.DeleteProjectAsync(resultId, nostrKeyHex);
                notificationComponent.ShowErrorMessage("Failed to create application data");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            createApplicationDataSpinner = false;
        }
    }

    private async Task CreatProjectTransactionAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectTransaction);
        }
        else
        {
            await CreatProjectTransaction();
        }
    }

    private async Task CreatProjectTransaction()
    {
        creatProjectSpinner = true;
        StateHasChanged();

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var accountInfo = storage.GetAccountInfo(network.Name);

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            unsignedTransaction = _founderTransactionActions.CreateNewProjectTransaction(project.ProjectInfo.FounderKey, _derivationOperations.AngorKeyToScript(project.ProjectInfo.ProjectIdentifier), NetworkConfiguration.AngorCreateFeeSats, NetworkConfiguration.NostrEventIdKeyType, project.ProjectInfoEventId);

            signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation);

            showCreateModal = true;
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message,e);
        }
        finally
        {
            creatProjectSpinner = false;
            StateHasChanged();
        }
    }
    
    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showCreateModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();
                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);
                    var unconfirmedInfo = _cacheStorage.GetUnconfirmedInboundFunds();

                    signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        publishProjectSpinner = true;
        StateHasChanged();

        try
        {
            showCreateModal = false;

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            var transactionId = signedTransaction.Transaction.GetHash().ToString();

            if (string.IsNullOrEmpty(transactionId))
            {
                notificationComponent.ShowErrorMessage("Transaction ID is missing. Cannot store the project.");
                return;
            }

            project.CreationTransactionId = transactionId;
            storage.UpdateFounderProject(project);

            NavigationManager.NavigateTo($"/view/{project.ProjectInfo.ProjectIdentifier}");
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message,e);
        }
        finally
        {
            publishProjectSpinner = false;
            passwordComponent.ClearPassword();
            StateHasChanged();
        }
    }

    private void AddStage()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        project.ProjectInfo.Stages.Add(new Stage { ReleaseDate = DateTime.UtcNow });
    }

    private void RemoveStage(Stage stage)
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        project.ProjectInfo.Stages.Remove(stage);

    }

    public MarkupString ConvertToMarkupString(string input)
    {
        string sanitizedInput = HtmlStripperService.StripHtmlTags(input);
        return new MarkupString(sanitizedInput);
    }

    private void ChangeTab(int tabNumber)
    {
        if (!nostrMetadataCreated)
        {
            // Save the project before switching tabs
            storage.UpdateFounderProject(project);
        }

        activeTab = tabNumber;
        StateHasChanged();
    }

    private string GetProgressMessage()
    {
        if (!nostrMetadataCreated)
        {
            return "Step 1: Create Nostr Profile";
        }

        if (!nostrApplicationSpecificDataCreated)
        {
            return "Step 2: Enter Project Info";
        }

        return "Step 3: Finalize Project Creation";
    }


    private void OnStagePresetChange(ChangeEventArgs e)
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        var selectedPreset = e.Value?.ToString();

        if (selectedPreset != null && presets.TryGetValue(selectedPreset, out var preset))
        {
            project.ProjectInfo.Stages.Clear();
            project.ProjectInfo.Stages = GenerateStages(preset.Percentages, preset.IntervalDays);
        }
        else
        {
            notificationComponent.ShowErrorMessage("Invalid preset selected.");
            project.ProjectInfo.Stages.Clear();
        }

        StateHasChanged();
    }

    private bool ValidateInputData()
    {
        var isTestnet = this.network.NetworkType == NetworkType.Testnet;

        if (!isTestnet)
        {
            // test that need to happen in production will go here

            if (project.ProjectInfo.PenaltyDays < 10)
            {
                notificationComponent.ShowErrorMessage("Project penalty must be higher than 10 days");
                return false;
            }

            if (project.ProjectInfo.Stages.Count() < 3)
            {
                notificationComponent.ShowErrorMessage("There must be at least 3 stages");
                return false;
            }

            if (project.ProjectInfo.TargetAmount < (decimal)0.1)
            {
                // temporary limit to not allow users to put too much in an Angor contract
    
                notificationComponent.ShowErrorMessage("Project target amount must be higher than 0.1 BTC");
                return false;
            }

            if (project.ProjectInfo.ExpiryDate < project.ProjectInfo.StartDate)
            {
                notificationComponent.ShowErrorMessage("Project must expire after the start date");
                return false;
            }

            if (project.ProjectInfo.Stages.Any() && project.ProjectInfo.ExpiryDate < project.ProjectInfo.Stages.Last().ReleaseDate)
            {
                notificationComponent.ShowErrorMessage("Project expiry date must be after the last stage date");
                return false;
            }

            if (project.ProjectInfo.StartDate < DateTime.UtcNow)
            {
                notificationComponent.ShowErrorMessage("Project must start in the future");
                return false;
            }
        }


        if (project.Metadata is null)
        {
            notificationComponent.ShowErrorMessage("Nostr profile must be filled");
            return false;
        }

        if (string.IsNullOrEmpty(project.Metadata.Name))
        {
            notificationComponent.ShowErrorMessage("Nostr profile name must be filled");
            return false;
        }

        if (project.ProjectInfo.Stages.Sum(s => s.AmountToRelease) != 100)
        {
            notificationComponent.ShowErrorMessage("The stages must sum to 100%");
            return false;
        }

        var projects = storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();

        if (projects.Any(a => project.ProjectInfo.ProjectIdentifier == a.ProjectInfo.ProjectIdentifier))
        {
            notificationComponent.ShowErrorMessage("This wallet already has a project with this index");
            return false;
        }

        var prev = DateTime.UtcNow;
        foreach (var stage in project.ProjectInfo.Stages)
        {
            if ((stage.ReleaseDate - prev).Days < 0)
            {
                notificationComponent.ShowErrorMessage("Stages must be chronological");
                return false;
            }

            prev = stage.ReleaseDate;
        }

        // If all checks pass, return true
        return true;
    }
    
    private List<Stage> GenerateStages(int[] percentages, int intervalDays)
    {
        var stages = new List<Stage>();
        var currentDate = project.ProjectInfo.StartDate;

        for (int i = 0; i < percentages.Length; i++)
        {
            stages.Add(new Stage
            {
                AmountToRelease = percentages[i],
                ReleaseDate = currentDate
            });

            if (i > 0)
            {
                var daysBetween = (currentDate - stages[i - 1].ReleaseDate).Days;
                _Logger.LogInformation($"Days between stage {i} and {i + 1}: {daysBetween} days");
            }

            currentDate = currentDate.AddDays(intervalDays);
        }

        return stages;
    }
    
    private void GenerateSmartStages()
    {
        if (totalDuration <= 0 || numberOfStages <= 0)
        {
            notificationComponent.ShowErrorMessage("Please enter valid values for duration and number of stages.");
            return;
        }

        project.ProjectInfo.Stages.Clear(); // Reset existing stages

        var stageDuration = totalDuration / numberOfStages;
        var stagePercentage = 100m / numberOfStages;

        for (int i = 0; i < numberOfStages; i++)
        {
            project.ProjectInfo.Stages.Add(new Stage
            {
                AmountToRelease = stagePercentage,
                ReleaseDate = project.ProjectInfo.StartDate.AddDays(i * stageDuration)
            });
        }

        StateHasChanged();
    }

    private void ToggleStageMode()
    {
        isPresetMode = !isPresetMode; // Toggle between Presets and Automatic
        StateHasChanged(); // Update the UI
    }
}
