@page "/create"
@using Angor.Client.Models
@using Angor.Client.Storage
@using Angor.Shared
@using Angor.Shared.Models
@using Angor.Shared.Protocol
@using Angor.Shared.Services
@using Angor.Shared.Utilities
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Blockcore.Networks
@inherits BaseComponent
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject NavigationManager NavigationManager
@inject IWalletOperations _WalletOperations
@inject IRelayService _RelayService
@inject ILogger<Create> _Logger;
@inject IHtmlStripperService HtmlStripperService;
@inject IJSRuntime JS;
@inject NavMenuState NavMenuState

@inject IWalletUIService _walletUIService;

@inject IFounderTransactionActions _founderTransactionActions
<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo("/wallet");
    return;
}

@if (!isValid)
{
    <div class="alert alert-danger">
        <h4>Error</h4>
        <p>@errorMessage</p>
    </div>
}
<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="position-relative header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="add" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Create New Project</h5>
                <div class="info-icon-container position-absolute top-0 ms-1 ms-md-3 start-100 translate-middle"
                    data-tooltip="Learn more about project creation">
                    <a href="https://docs.angor.io/founder/project-creation/" target="_blank" 
                       class="text-decoration-none">
                        <Icon IconName="info" Height="16" Width="16" Class="text-muted info-icon" />
                    </a>
                </div>
            </div>
            <div>
                <button class="btn btn-border-success" @onclick="TogglePreview">
                    <Icon IconName="eye" Width="16" Height="16" Class="me-2" />
                    <span>@(showPreview ? "Hide Preview" : "Show Preview")</span>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="create-main-structure mt-4">
    <div class="create-room-card animate-fade-in">
        <div class="create-room-header">
            <div class="d-flex align-items-center header-icon-gap">
                <div>
                    <Icon IconName="view-project" Width="30" Height="30" Class="create-room-icon" />
                </div>
                <div>
                        <h2 class="create-room-title">Project Profile</h2>
                </div>
            </div>
        </div>
        
        <div class="create-room-content create-space-vertical-large">
            <EditForm Model="project.Metadata">
                <div class="create-layout-grid create-layout-two-columns">
                    <div>
                        <label class="create-field-label" for="NostrMetadataName">Project Name</label>
                        <InputText id="NostrMetadataName" class="create-field-input" autocomplete="off" @bind-Value="project.Metadata.Name" placeholder="Enter name of your project" disabled="@nostrMetadataCreated" />
                    </div>
                    <div>
                        <label class="create-field-label create-field-label-with-icon" for="NostrMetadataWebsite">Project Website</label>
                        <InputText id="NostrMetadataWebsite" class="create-field-input" autocomplete="off" @bind-Value="project.Metadata.Website" placeholder="Enter URL of project website" disabled="@nostrMetadataCreated" />
                    </div>
                </div>
                
                <div class="mt-4">
                    <label class="create-field-label" for="NostrMetadataAbout">About Your Project</label>
                    <InputTextArea id="NostrMetadataAbout" class="create-field-textarea" autocomplete="off" @bind-Value="project.Metadata.About" placeholder="Provide a brief description of project" disabled="@nostrMetadataCreated" />
                </div>
                
                <div class="create-divider"></div>
                
                <h3 class="create-section-title">
                    <Icon IconName="visual-identity" class="create-section-icon" /> Visual Identity
                </h3>
                
                <div class="create-layout-grid create-layout-two-columns">
                    <div>
                        <label class="create-field-label" for="NostrMetadataBanner">Banner Image URL</label>
                        <InputText id="NostrMetadataBanner" class="create-field-input" autocomplete="off" @bind-Value="project.Metadata.Banner" placeholder="Enter URL for project Banner Image" disabled="@nostrMetadataCreated" />
                        <p class="create-field-help">Recommended size: 820×312px</p>
                    </div>
                    <div>
                        <label class="create-field-label" for="NostrMetadataPicture">Avatar Image URL</label>
                        <InputText id="NostrMetadataPicture" class="create-field-input" autocomplete="off" @bind-Value="project.Metadata.Picture" placeholder="Enter URL for the Project Logo or Profile Picture" disabled="@nostrMetadataCreated" />
                        <p class="create-field-help">Recommended size: 170×170px</p>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

    <div class="animate-fade-in mt-4">
                <EditForm Model="project">
                    <div class="create-room-card animate-fade-in">
                        <div class="create-room-header">
                            <div class="d-flex align-items-center header-icon-gap">
                                <div>
                                    <Icon IconName="clock-square" Width="30" Height="30" Class="create-room-icon" />
                                </div>
                                <div>
                                    <div class="create-room-title-container">
                                        <h2 class="create-room-title">Funding Structure</h2>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="create-room-content create-space-vertical-large">
                            <div class="create-layout-grid">
                                <div>
                                    <label class="create-field-label create-field-label-with-icon" for="targetAmount">
                                        Target Amount
                                    </label>
                                    <InputNumber id="targetAmount" class="create-field-input" @bind-Value="targetAmountInBTC" placeholder="Enter target amount" disabled="@nostrApplicationSpecificDataCreated" />
                                    <p class="create-field-help">Minimum amount this project is trying to raise</p>
                                </div>
                            </div>
                            
                            <div class="create-layout-grid create-layout-two-columns">
                                <div>
                                    <label class="create-field-label create-field-label-with-icon" for="startDate">
                                        Funding Start
                                    </label>
                                    <div class="create-field-input disabled">@DateTime.Today.FormatDate()</div>
                                    <input type="hidden" @bind="project.ProjectInfo.StartDate" />
                                    <p class="create-field-help">When the investment period begins</p>
                                </div>
                                <div>
                                    <label class="create-field-label create-field-label-with-icon" for="endDate">
                                        Funding End
                                    </label>
                                    <div class="input-group d-flex align-items-center">
                                        <InputDate id="endDate" class="create-field-input no-native-picker" @bind-Value="project.ProjectInfo.EndDate" placeholder="Select end date" disabled="@nostrApplicationSpecificDataCreated" @onchange="ValidateEndDate" />
                                        <button type="button" class="btn btn-border-success" onclick="document.querySelector('input[type=date]:not(:disabled)').showPicker()">
                                            <Icon IconName="calendar" Height="16" Width="16" />
                                        </button>
                                    </div>
                                    <p class="create-field-help">When the investment period ends</p>
                                    @if (endDateError)
                                    {
                                        <div class="text-danger mt-1">End date must be before the first stage date</div>
                                    }
                                </div>
                            </div>
                            
                            <div class="create-layout-grid create-layout-two-columns">
                                <div>
                                    <label class="create-field-label create-field-label-with-icon" for="penaltyDays">
                                        Penalty Days
                                    </label>
                                    <InputNumber id="penaltyDays" class="create-field-input" @bind-Value="project.ProjectInfo.PenaltyDays" disabled="@nostrApplicationSpecificDataCreated" />
                                    <p class="create-field-help">Days to lock funds for departing investors</p>
                                </div>
                                <div>
                                    <label class="create-field-label create-field-label-with-icon" for="expiryDate">
                                        Emergency Expiry
                                    </label>
                                    <div class="create-field-input disabled">@CalculateExpiryDate().FormatDate()</div>
                                    <input type="hidden" @bind="project.ProjectInfo.ExpiryDate" />
                                    <p class="create-field-help">Emergency date for fund release</p>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="create-room-card animate-fade-in mt-4">

                        <div class="create-room-header">
                            <div class="d-flex align-items-center header-icon-gap">
                                <div>
                                    <Icon IconName="stages" Width="30" Height="30" Class="create-room-icon" />
                                </div>
                                <div>
                                    <div class="create-room-title-container">
                                        <h2 class="create-room-title">Funding Stages</h2>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div class="create-room-content create-space-vertical-large">
                            <!-- Conditionally Render Presets or Automatic Inputs -->
                            @if (isPresetMode)
                            {
                                <!-- Preset Selection -->
                                <div class="p-4 stage-card bg-transparent mb-2 animate-fade-in preset-card-responsive">
                                    <div class="d-flex align-items-center gap-3 flex-grow-1 flex-wrap flex-md-nowrap w-100">
                                        <div class="icon-container d-flex align-items-center justify-content-center me-3">
                                            <Icon IconName="server-path" Width="32" Height="32" Class="text-success" />
                                        </div>
                                        <div class="flex-grow-1 text-center text-md-start">
                                            <div class="fw-bold fs-5 mb-1 text-primary">
                                                Generate Funding Schedule
                                            </div>
                                            <div class="text-muted fs-6">
                                                Automatically create optimized funding stages based on your project timeline and payment frequency.
                                            </div>
                                        </div>
                                        <div class="d-flex align-items-center justify-content-center w-100 w-md-auto mt-3 mt-md-0">
                                            <button class="btn btn-border-success px-4 w-100-m animate-scale"
                                                    @onclick="() => projectStageModal = true"
                                                    disabled="@nostrApplicationSpecificDataCreated">
                                                Generate Stages
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                @if (isPresetMode)
                                {
                                    @if (projectStageModal)
                                    {
                                        <div class="modal-wrapper">
                                            <div class="modal fade show d-block">
                                                <div class="modal-dialog modal-dialog-centered">
                                                    <div class="modal-content modern-modal p-3">
                                                        <div class="modal-header border-0 pb-0">
                                                            <div class="d-flex align-items-center">
                                                                <Icon IconName="server-path" Height="24" Width="24" class="me-2" />
                                                                <h5 class="modal-title">Stage Preset Wizard</h5>
                                                            </div>
                                                            <button class="btn-close-custom" @onclick="CloseStageWizard">
                                                                <Icon IconName="close-circle" Height="24" Width="24" />
                                                            </button>
                                                        </div>

                                                        <div class="modal-body modal-body-scroll">
                                                            <div class="d-flex justify-content-between mb-4 position-relative animate-fade-in">
                                                                @* Progress Line *@
                                                                <div class="position-absolute stage-wizard-progress-line-bg">
                                                                    <div class="position-absolute stage-wizard-progress-line" style="width: @((wizardStep - 1) * 50)%;"></div>
                                                                </div>
                                                                
                                                                <div class="d-flex flex-column align-items-center position-relative z-1">
                                                                    <div class="step-circle stage-wizard-icon-success d-flex align-items-center justify-content-center rounded-circle @(wizardStep >= 1 ? "bg-success" : " border")">
                                                                        @if (wizardStep > 1)
                                                                        {
                                                                            <Icon IconName="check-circle" Width="20" Height="20" />
                                                                        }
                                                                        else
                                                                        {
                                                                            <span class="fw-bold">1</span>
                                                                        }
                                                                    </div>
                                                                    <span class="step-label mt-2 small fw-semibold @(wizardStep >= 1 ? "text-success" : "text-muted")">Select</span>
                                                                </div>
                                                                
                                                                <div class="d-flex flex-column align-items-center position-relative z-1">
                                                                    <div class="step-circle stage-wizard-icon-success d-flex align-items-center justify-content-center rounded-circle @(wizardStep > 2 ? "bg-success" : " border")">
                                                                        @if (wizardStep > 2)
                                                                        {
                                                                            <Icon IconName="check-circle" Width="20" Height="20" />
                                                                        }
                                                                        else
                                                                        {
                                                                            <span class="fw-bold">2</span>
                                                                        }
                                                                    </div>
                                                                    <span class="step-label mt-2 small fw-semibold @(wizardStep > 2 ? "text-success" : "text-muted")">Preview</span>
                                                                </div>
                                                                
                                                                <div class="d-flex flex-column align-items-center position-relative z-1">
                                                                    <div class="step-circle stage-wizard-icon-success d-flex align-items-center justify-content-center rounded-circle @(wizardStep >= 3 ? "border" : " border")">
                                                                        <span class="fw-bold">3</span>
                                                                    </div>
                                                                    <span class="step-label mt-2 small fw-semibold @(wizardStep > 3 ? "text-success" : "text-muted")">Confirm</span>
                                                                </div>
                                                            </div>
                                                            <div>
                                                                @if (wizardStep == 1)
                                                                {
                                                                    <div class="animate-fade-in">
                                                                        <div class="info-card mb-4">
                                                                                
                                                                            <div class="d-flex align-items-center mb-4">
                                                                                <Icon IconName="server-path" Width="24" Height="24" Class="me-2" />
                                                                                <h6 class="mb-0">Select Payment Schedule</h6>
                                                                            </div>

                                                                            
                                                                            <div class="row g-4 mb-4 align-items-end">
                                                                                <div class="col-md-6">
                                                                                    <div class="mb-3">
                                                                                        <label for="wizardStartDate" class="form-label">Start Date</label>
                                                                                        <InputDate id="wizardStartDate"
                                                                                                @bind-Value="project.ProjectInfo.StartDate"
                                                                                                class="form-control"
                                                                                                disabled
                                                                                                readonly />
                                                                                        <small class="text-muted">Investment period begins today</small>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                    <div class="mb-3">
                                                                                        <label for="wizardEndDate" class="form-label">End Date</label>
                                                                                        <div class="input-group">
                                                                                            <InputDate id="wizardEndDate"
                                                                                                    @bind-Value="project.ProjectInfo.EndDate"
                                                                                                    class="form-control"
                                                                                                    min="@DateTime.Today.AddDays(1).ToString("yyyy-MM-dd")"
                                                                                                    disabled="@nostrApplicationSpecificDataCreated"
                                                                                                    @onchange="CalculateProjectDuration" />
                                                                                            <button type="button"
                                                                                                    class="btn btn-border-success"
                                                                                                    onclick="document.getElementById('wizardEndDate')?.showPicker()"
                                                                                                    disabled="@nostrApplicationSpecificDataCreated">
                                                                                                <Icon IconName="calendar" Width="16" Height="16" />
                                                                                            </button>
                                                                                        </div>
                                                                                        <small class="text-muted">When funding period ends</small>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                            
                                                                            <div class="stage-card mb-4">
                                                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                                                    <span class="btn btn-border-success btn-sm">Duration: @GetDurationInDays() days</span>
                                                                                    <span class="btn btn-border-success btn-sm">~@(Math.Round(GetDurationInDays()/30.0, 1)) months</span>
                                                                                </div>
                                                                                <div class=" bg-success rounded-pill mt-2">
                                                                                    <div class=" rounded-pill flex-shrink-0 py-0.5" style="width: 100%"></div>
                                                                                </div>
                                                                                <div class="d-flex justify-content-between text-muted mt-2">
                                                                                    <span>@DateTime.Today.ToString("MMM dd, yyyy")</span>
                                                                                    <span>@project.ProjectInfo.EndDate.ToString("MMM dd, yyyy")</span>
                                                                                </div>
                                                                            </div>
                                                                            
                                                                            <div class="stage-card mb-4">
                                                                                <div class="d-flex align-items-center mb-3">
                                                                                    <Icon IconName="repeat" Width="20" Height="20" Class="me-2 text-primary" />
                                                                                    <h6 class="mb-0 fw-semibold">Payment Schedule</h6>
                                                                                    <span class="badge bg-primary ms-2">@CalculateNumberOfStages() stages</span>
                                                                                </div>
                                                                                
                                                                                <p class="form-text text-muted mt-0 mb-3 small">Select how frequently you want to receive project funding.</p>
                                                                                
                                                                                <div class="d-flex flex-wrap gap-2">
                                                                                    @foreach (var interval in new[] {
                                                                                        ("Daily", 1),
                                                                                        ("Weekly", 7), 
                                                                                        ("Biweekly", 14), 
                                                                                        ("Monthly", 30), 
                                                                                        ("Quarterly", 90),
                                                                                        ("Annual", 365),
                                                                                        ("Custom", 0) 
                                                                                    })
                                                                                    {
                                                                                        bool isDisabled = CalculatePossibleStages(interval.Item2) < 1 || nostrApplicationSpecificDataCreated;
                                                                                        string btnClass = selectedInterval == interval.Item2 
                                                                                            ? "btn-border-success"
                                                                                            : "btn-border-warning";
                                                                                        
                                                                                        <button class="btn @btnClass @(isDisabled ? "disabled opacity-50" : "")" 
                                                                                                @onclick="() => SelectInterval(interval.Item2)"
                                                                                                disabled="@isDisabled"
                                                                                                title="@(isDisabled ? "Too short duration for this interval" : $"{CalculatePossibleStages(interval.Item2)} stages")">
                                                                                            @if (selectedInterval == interval.Item2)
                                                                                            {
                                                                                                <Icon IconName="check-circle" Width="16" Height="16" Class="me-1" />
                                                                                            }
                                                                                            @interval.Item1
                                                                                        </button>
                                                                                    }
                                                                                </div>
                                                                                
                                                                                <div class="stage-card mt-3 p-2 border rounded">
                                                                                    <div class="d-flex align-items-center">
                                                                                        <Icon IconName="info" Width="16" Height="16" Class="me-2 text-primary" />
                                                                                        <small class="text-muted">
                                                                                            @(selectedInterval == 0 
                                                                                                ? "Custom mode allows you to define your own stage schedule." 
                                                                                                : $"{GetIntervalName(selectedInterval)} schedule will create {CalculateNumberOfStages()} evenly spaced stages.")
                                                                                        </small>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                            
                                                                            @if (selectedInterval == 0)
                                                                            {
                                                                                <div class="stage-card mb-4">
                                                                                    <h6 class="mb-3">Custom Stages</h6>
                                                                                    <label class="form-label">Number of Stages:</label>
                                                                                    <div class="d-flex align-items-center gap-2 mb-3">
                                                                                        <button class="btn btn-border-warning px-3" 
                                                                                                @onclick="@(() => UpdateStageCount(Math.Max(2, numberOfStages - 1)))"
                                                                                                disabled="@(numberOfStages <= 2 || nostrApplicationSpecificDataCreated)">
                                                                                            <span class="fw-bold">−</span>
                                                                                        </button>
                                                                                        <span class="form-control text-center">@numberOfStages</span>
                                                                                        <button class="btn btn-border-warning px-3" 
                                                                                                @onclick="@(() => UpdateStageCount(Math.Min(GetMaxStagesBasedOnDuration(), numberOfStages + 1)))"
                                                                                                disabled="@(numberOfStages >= GetMaxStagesBasedOnDuration() || nostrApplicationSpecificDataCreated)">
                                                                                            <span class="fw-bold">+</span>
                                                                                        </button>
                                                                                    </div>
                                                                                    <small class="text-muted">Stages will be evenly distributed across your timeline</small>
                                                                                </div>
                                                                            }
                                                                        </div>

                                                                        <div class="info-card mb-4">
                                                                            <div class="d-flex justify-content-between align-items-center mb-4">
                                                                                <div class="d-flex align-items-center">
                                                                                    <Icon IconName="server-path" Width="24" Height="24" Class="me-2" />
                                                                                    <h6 class="mb-0">Stage Preview</h6>
                                                                                </div>
                                                                                <span class="badge bg-primary">@CalculateNumberOfStages() stages</span>
                                                                            </div>
                                                                            
                                                                            
                                                                            
                                                                            <div class="d-flex flex-row justify-content-between mb-4 gap-2">
                                                                                <div class="stage-card p-2 border rounded flex-grow-1">
                                                                                    <h6 class="text-muted mb-2">Schedule</h6>
                                                                                    <div class="d-flex align-items-center">
                                                                                        <Icon IconName="repeat" Width="16" Height="16" Class="me-2" />
                                                                                        <span>@GetIntervalName(selectedInterval)</span>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="stage-card p-2 border rounded flex-grow-1">
                                                                                    <h6 class="text-muted mb-2">Per Stage</h6>
                                                                                    <div class="d-flex align-items-center">
                                                                                        <Icon IconName="currency" Width="16" Height="16" Class="text-success me-2" />
                                                                                        <span class="text-success">@((targetAmountInBTC / CalculateNumberOfStages()).ToString("0.####")) @network.CoinTicker</span>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="stage-card p-2 border rounded flex-grow-1">
                                                                                    <h6 class="text-muted mb-2">Target</h6>
                                                                                    <div class="d-flex align-items-center">
                                                                                        <Icon IconName="balance" Width="16" Height="16" Class="text-success me-2" />
                                                                                        <span class="text-success">@targetAmountInBTC @network.CoinTicker</span>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                            
                                                                            <div class="stage-card rounded mb-4">
                                                                                <div class="table-responsive rounded">
                                                                                    <table class="table table-hover border rounded">
                                                                                        <thead class="bg-opacity-10">
                                                                                            <tr>
                                                                                                <th class="fw-semibold">
                                                                                                    <div class="d-flex align-items-center">
                                                                                                        <Icon IconName="server-path" Width="16" Height="16" Class="me-2" />
                                                                                                        Stage
                                                                                                    </div>
                                                                                                </th>
                                                                                                <th class="fw-semibold">
                                                                                                    <div class="d-flex align-items-center">
                                                                                                        <Icon IconName="calendar" Width="16" Height="16" Class="me-2" />
                                                                                                        Date
                                                                                                    </div>
                                                                                                </th>
                                                                                                <th class="fw-semibold">
                                                                                                    <div class="d-flex align-items-center">
                                                                                                        <Icon IconName="clock-square" Width="16" Height="16" Class="me-2" />
                                                                                                        Timeline
                                                                                                    </div>
                                                                                                </th>
                                                                                                <th class="fw-semibold">
                                                                                                    <div class="d-flex align-items-center">
                                                                                                        <Icon IconName="currency" Width="16" Height="16" Class="me-2" />
                                                                                                        Allocation
                                                                                                    </div>
                                                                                                </th>
                                                                                            </tr>
                                                                                        </thead>
                                                                                        <tbody>
                                                                                            @{
                                                                                                var intervals = CalculateIntervals();
                                                                                                var percentages = CalculatePercentages();
                                                                                            }
                                                                                            @for (int i = 0; i < intervals.Count; i++)
                                                                                            {
                                                                                                var stageDay = intervals[i];
                                                                                                var stageDate = DateTime.Today.AddDays(stageDay);
                                                                                                var prevDay = i > 0 ? intervals[i-1] : 0;
                                                                                                var stageDuration = stageDay - prevDay;
                                                                                                var stageAmount = ((decimal)percentages[i] / 100 * targetAmountInBTC).ToString("0.####");
                                                                                                
                                                                                                <tr class="border-bottom">
                                                                                                    <td>
                                                                                                        <div class="d-flex align-items-center">
                                                                                                            <div class="stage-wizard-num-sm btn btn-outline-primary text-white d-flex align-items-center justify-content-center me-2">
                                                                                                                @(i+1)
                                                                                                            </div>
                                                                                                            <span class="badge bg-success bg-opacity-25">
                                                                                                                <span>@percentages[i]%</span>
                                                                                                            </span>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                    <td class="align-middle">
                                                                                                        <span class="badge bg-primary bg-opacity-10  px-2 py-1 rounded">
                                                                                                            @stageDate.ToString("MMM dd, yyyy")
                                                                                                        </span>
                                                                                                    </td>
                                                                                                    <td class="align-middle">
                                                                                                        <div class="d-flex align-items-center">
                                                                                                            <span class="badge bg-warning bg-opacity-10 px-2 py-1 rounded me-2">
                                                                                                                Day @stageDay
                                                                                                            </span>
                                                                                                            @if (i > 0)
                                                                                                            {
                                                                                                                <span class="small text-muted">
                                                                                                                    (+@stageDuration days)
                                                                                                                </span>
                                                                                                            }
                                                                                                        </div>
                                                                                                    </td>
                                                                                                    <td class="align-middle">
                                                                                                        <div class="d-flex align-items-center">
                                                                                                            <Icon IconName="balance" Width="16" Height="16" Class="text-success me-2" />
                                                                                                            <span class="text-success fw-semibold">
                                                                                                                @stageAmount @network.CoinTicker
                                                                                                            </span>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                </tr>
                                                                                            }
                                                                                        </tbody>
                                                                                    </table>
                                                                                </div>                                                                        
                                                                            </div>
                                                                        </div>
                                                                        <div class="info-card p-3 rounded mt-3 d-flex align-items-center">
                                                                            <div class="me-3">
                                                                                <div class="stage-wizard-icon icon-container p-2 rounded-circle d-inline-flex align-items-center justify-content-center" >
                                                                                    <Icon IconName="actions" Width="24" Height="24" Class="text-primary" />
                                                                                </div>
                                                                            </div>
                                                                            <div class="flex-grow-1">
                                                                                <p class="mb-0 fw-bold">Important Note</p>
                                                                                <span>You can customize stage's in the next step</span>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                }
                                                                else if (wizardStep == 2)
                                                                {
                                                                    <div class="step-content p-3 rounded info-card animate-fade-in">
                                                                        <h6 class="mb-4 fw-bold text-primary">Preview & Adjust Stages</h6>             
                                                                        @foreach (var stage in project.ProjectInfo.Stages)
                                                                        {
                                                                            var idx = project.ProjectInfo.Stages.IndexOf(stage);
                                                                            var dateInputId = $"wizardStageDate_{idx}";

                                                                            <div class="mb-3 p-3 rounded stage-card">
                                                                                <div class="mb-2 d-flex justify-content-between align-items-center">
                                                                                    <h6 class="fw-bold text-primary mb-0">Stage @(idx + 1) Allocation</h6>
                                                                                    <div class="d-flex align-items-center">
                                                                                        <span class="badge bg-primary rounded-pill me-2">
                                                                                            @((stage.ReleaseDate - DateTime.Today).Days) days left
                                                                                        </span>
                                                                                        <button type="button" 
                                                                                                class="btn btn-sm btn-outline-danger"
                                                                                                @onclick="@(() => RemoveStage(stage))"
                                                                                                title="Remove this stage">
                                                                                            <Icon IconName="delete" Height="14" Width="14" />
                                                                                        </button>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="row align-items-start g-4 mt-2">
                                                                                    <div class="col-12 col-md-6 mb-3 mb-md-0">
                                                                                        <label class="fw-semibold text-primary d-block mb-1">Allocation in %</label>
                                                                                        <InputNumber @bind-Value="stage.AmountToRelease"
                                                                                                    class="form-control"
                                                                                                    step="1"
                                                                                                    min="1"
                                                                                                    max="100" />
                                                                                    </div>
                                                                                    <div class="col-12 col-md-6">
                                                                                        <label class="fw-semibold text-primary d-block mb-1">Target Date</label>
                                                                                        <div class="input-group">
                                                                                            <InputDate id="@dateInputId"
                                                                                                    @bind-Value="stage.ReleaseDate"
                                                                                                    class="form-control" />
                                                                                            <button type="button"
                                                                                                    class="btn btn-outline-primary"
                                                                                                    @onclick="@(() => OpenDatePicker(dateInputId))">
                                                                                                <Icon IconName="calendar" Height="16" Width="16" />
                                                                                            </button>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        }
                                                                        
                                                                        <!-- Add Stage Button -->
                                                                        <button type="button" class="btn btn-border-success mb-4 w-100" @onclick="AddStage">
                                                                            <Icon IconName="add" Height="16" Width="16" Class="me-2" />
                                                                            Add New Stage
                                                                        </button>
                                                                        
                                                                        <!-- Stage Checking Parameters -->
                                                                        @{
                                                                            decimal totalPercentage = project.ProjectInfo.Stages.Sum(s => s.AmountToRelease);
                                                                            bool isValidTotal = totalPercentage == 100m;
                                                                            bool hasZeroStages = project.ProjectInfo.Stages.Any(s => s.AmountToRelease == 0);
                                                                            string statusClass = isValidTotal ? "bg-success" : "bg-danger";
                                                                            string textClass = isValidTotal ? "text-success" : "text-danger";
                                                                        }

                                                                        <div class="stage-card p-3 rounded mt-3 d-flex align-items-center">
                                                                            <div class="me-3">
                                                                                <div class="stage-wizard-icon icon-container p-2 rounded-circle d-inline-flex align-items-center justify-content-center">
                                                                                    @if (isValidTotal && !hasZeroStages)
                                                                                    {
                                                                                        <Icon IconName="check-circle" Width="24" Height="24" class="@textClass" />
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        <Icon IconName="sad-circle" Width="24" Height="24" class="@textClass" />
                                                                                    }
                                                                                </div>
                                                                            </div>
                                                                            <div class="flex-grow-1">
                                                                                <p class="mb-0 fw-bold">
                                                                                    Important Note
                                                                                </p>

                                                                                <span class="mt-1 fw-light">
                                                                                    The total allocation should equal 100% Currently: <span class="@(isValidTotal ? "text-success" : "text-danger")">@totalPercentage%</span>
                                                                                </span>
                                                                                
                                                                                @if (hasZeroStages)
                                                                                {
                                                                                    <div class="mt-1 text-danger">
                                                                                        <Icon IconName="alert" Width="16" Height="16" class="me-1" />
                                                                                        Warning: All stages must have allocation greater than 0%.
                                                                                    </div>
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                }
                                                                else if (wizardStep == 3)
                                                                {
                                                                    <div class="info-card step-content p-3 rounded animate-fade-in">
                                                                        <h6 class="mb-4 fw-bold text-primary">Confirm Selected Stages</h6>
                                                                        
                                                                        <div class="stages-timeline mb-4">
                                                                            @{int stageNumber = 1;}
                                                                            @foreach (var stage in project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate))
                                                                            {
                                                                                <div class="stage-card mb-3">
                                                                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                                                                        <div class="d-flex align-items-center">
                                                                                            <div class="stage-wizard-num-lg d-flex align-items-center justify-content-center btn btn-outline-primary text-white me-3">
                                                                                                @stageNumber
                                                                                            </div>
                                                                                            <div>
                                                                                                <h6 class="mb-0 fw-bold">Stage @stageNumber</h6>
                                                                                                <small class="text-muted">
                                                                                                    @stage.ReleaseDate.ToString("MMM dd, yyyy")
                                                                                                </small>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="d-flex align-items-center">
                                                                                            <span class="btn btn-outline-success me-2">
                                                                                                @stage.AmountToRelease% Allocation
                                                                                            </span>
                                                                                        </div>
                                                                                    </div>
                                                                                    
                                                                                    <div class="bg-info bg-opacity-25 border progress w-100 d-flex rounded-pill">
                                                                                        <div class="bg-success rounded-pill flex-shrink-0" style="width:@(stage.AmountToRelease)%;"></div>
                                                                                    </div>

                                                                                </div>
                                                                                stageNumber++;
                                                                            }
                                                                        </div>
                                                                        
                                                                    </div>
                                                                    <div class="info-card p-3 rounded mt-3 d-flex align-items-center">
                                                                        <div class="me-3">
                                                                            <div class="stage-wizard-icon icon-container p-2 rounded-circle d-inline-flex align-items-center justify-content-center">
                                                                                <Icon IconName="claim" Width="24" Height="24" Class="text-primary" />
                                                                            </div>
                                                                        </div>
                                                                        <div class="flex-grow-1">
                                                                            <p class="mb-0 fw-bold">
                                                                                Ready to Finalize
                                                                            </p>
                                                                            <span>
                                                                                Once you confirm, these stages will be used for your project funding schedule.
                                                                            </span>
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </div>

                                                            <div class="wizard-navigation d-flex justify-content-between align-items-center flex-row mt-3 gap-2">
                                                                <button class="btn btn-border-warning"
                                                                        @onclick="PrevWizardStep"
                                                                        disabled="@(wizardStep == 1)">
                                                                    Previous
                                                                </button>
                                                                <button class="btn btn-border-success"
                                                                        @onclick="NextWizardStep"
                                                                        disabled="@(wizardStep == 2 && (project.ProjectInfo.Stages.Sum(s => s.AmountToRelease) != 100m || project.ProjectInfo.Stages.Any(s => s.AmountToRelease == 0)))">
                                                                        @(wizardStep < 3 ? "Next" : "Finish")
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            }

                            @foreach (var stage in project.ProjectInfo.Stages)
                            {
                                var stageIndex = project.ProjectInfo.Stages.IndexOf(stage);
                                var dateInputId = $"stageDate_{stageIndex}";
                                
                                <div class="create-stage-item">
                                    <div class="create-stage-field">
                                        <label class="create-field-label">Stage @(stageIndex + 1) Percentage</label>
                                        <InputNumber class="create-field-input" @bind-Value="stage.AmountToRelease" placeholder="Enter percentage" min="1" max="100" step="1" disabled="@nostrApplicationSpecificDataCreated" />
                                    </div>
                                    <div class="create-stage-field">
                                        <label class="create-field-label">Release Date</label>
                                        <div class="d-flex align-items-stretch create-stage-date-container">
                                            <InputDate id="@dateInputId" class="create-field-input no-native-picker create-stage-date-input" @bind-Value="stage.ReleaseDate" placeholder="Select date" title="Stage release date" disabled="@nostrApplicationSpecificDataCreated" />
                                            <button type="button" class="create-action-btn create-action-success create-stage-action-btn" @onclick="@(() => OpenDatePicker(dateInputId))" disabled="@nostrApplicationSpecificDataCreated">
                                                <Icon IconName="calendar" Color="#28a745" />
                                            </button>
                                        </div>
                                    </div>
                                    <button class="create-action-btn create-action-danger" @onclick="() => RemoveStage(stage)" disabled="@nostrApplicationSpecificDataCreated">
                                        <Icon IconName="delete" Height="16" Width="16" Color="#dc2626"/>
                                    </button>
                                @if (stageIndex > 0)
                                {
                                    var previousStage = project.ProjectInfo.Stages[stageIndex - 1];
                                    var daysBetween = (stage.ReleaseDate - previousStage.ReleaseDate).Days;
                                    <div class="create-stage-info mt-2">
                                        <small>Days since previous stage: @daysBetween days</small>
                                    </div>
                                }
                                </div>
                                
                            }
                            <button class="w-100 d-flex create-stage-item cursor-pointer p-1 mt-4 justify-content-center rounded bg-primary-border align-items-center my-3 h-2"  
                                @onclick="AddStage" disabled="@nostrApplicationSpecificDataCreated">
                                <span class="fw-bold">+</span>
                            </button>
                        </div>
                    </div>
                </EditForm>
    </div>


    <div class="create-room-card animate-fade-in mt-4">
        <div class="create-room-header">
            <div class="d-flex align-items-center header-icon-gap">
                <div>
                    <Icon IconName="rocket" Width="30" Height="30" Class="create-room-icon" />
                </div>
                <div>
                    <div class="create-room-title-container">
                        <h2 class="create-room-title">Finalize Project Setup</h2>
                    </div>
                </div>
            </div>
        </div>

        <div class="create-room-content create-space-vertical-large">
            <div class="deploy-header-container mb-4">
                <h4 class="deploy-header-title mb-2">Deploy Your Project</h4>
                <p class="deploy-header-subtitle mb-0">Complete the deployment process to make your project live</p>
            </div>

            @if (hasErrors)
            {
                <div class="text-center mb-4">
                    <div class="alert alert-danger d-flex align-items-center justify-content-center">
                        <Icon IconName="warning" Width="20" Height="20" Class="me-2 text-warning" />
                        <span class="fw-semibold">Deployment Failed - you can try again</span>
                    </div>
                    <div class="alert alert-info mt-2">
                        <small class="text-muted">
                            <Icon IconName="info" Width="16" Height="16" Class="me-2" />
                            Completed steps have been saved. To Continue try again from where the process stopped
                        </small>
                    </div>
                </div>
            }
    
            <div class="row mb-4">
                <div class="col-4">
                    <div class="d-flex flex-column align-items-center">
                        <div class="rounded-circle d-flex align-items-center justify-content-center @(nostrMetadataCreated ? "bg-success text-white" : currentStep == 1 ? "border border-2 border-primary" : "border") mb-2 width-40 height-40">
                            @if (nostrMetadataCreated)
                            {
                                <Icon IconName="check" Width="20" Height="20" />
                            }
                            else if (currentStep == 1 && isDeploying)
                            {
                                <div class="spinner-border spinner-border-sm text-primary"></div>
                            }
                            else
                            {
                                <span class="fw-bold">1</span>
                            }
                        </div>
                        <span class="small fw-semibold @(nostrMetadataCreated ? "text-success" : currentStep == 1 ? "text-primary" : "text-muted")">Profile</span>
                    </div>
                </div>
                <div class="col-4">
                    <div class="d-flex flex-column align-items-center">
                        <div class="rounded-circle d-flex align-items-center justify-content-center @(nostrApplicationSpecificDataCreated ? "bg-success text-white" : currentStep == 2 ? "border border-2 border-primary" : "border") mb-2 width-40 height-40">
                            @if (nostrApplicationSpecificDataCreated)
                            {
                                <Icon IconName="check" Width="20" Height="20" />
                            }
                            else if (currentStep == 2 && isDeploying)
                            {
                                <div class="spinner-border spinner-border-sm text-primary"></div>
                            }
                            else
                            {
                                <span class="fw-bold">2</span>
                            }
                        </div>
                        <span class="small fw-semibold @(nostrApplicationSpecificDataCreated ? "text-success" : currentStep == 2 ? "text-primary" : "text-muted")">Project Info</span>
                    </div>
                </div>
                <div class="col-4">
                    <div class="d-flex flex-column align-items-center">
                        <div class="rounded-circle d-flex align-items-center justify-content-center @(!string.IsNullOrEmpty(project.CreationTransactionId) ? "bg-success text-white" : currentStep == 3 ? "border border-2 border-primary" : "border") mb-2 width-40 height-40">
                            @if (!string.IsNullOrEmpty(project.CreationTransactionId))
                            {
                                <Icon IconName="check" Width="20" Height="20" />
                            }
                            else if (currentStep == 3 && isDeploying)
                            {
                                <div class="spinner-border spinner-border-sm text-primary"></div>
                            }
                            else
                            {
                                <span class="fw-bold">3</span>
                            }
                        </div>
                        <span class="small fw-semibold @(!string.IsNullOrEmpty(project.CreationTransactionId) ? "text-success" : currentStep == 3 ? "text-primary" : "text-muted")">Deploy</span>
                    </div>
                </div>
            </div>            
                        
            @if (!hasErrors)
            {
                <div class="info-card text-center p-4">
                    <div class="mb-3">
                        <Icon IconName="rocket" Width="48" Height="48" Class="text-success" />
                    </div>
                    <h5 class="mb-3">Ready to Deploy</h5>
                    <p class="text-muted mb-4">All deployment steps will be completed automatically</p>

                    @if (isDeploying)
                    {
                        <div class="deployment-progress mb-4">
                            <div class="d-flex align-items-center justify-content-center mb-3">
                                <div class="spinner-border text-primary me-3"></div>
                                <div class="text-start">
                                    <h6 class="mb-1">
                                        @if (currentStep == 1)
                                        {
                                            <span>Creating Nostr Profile...</span>
                                        }
                                        else if (currentStep == 2)
                                        {
                                            <span>Publishing Project Information...</span>
                                        }
                                        else if (currentStep == 3)
                                        {
                                            <span>Deploying to Blockchain...</span>
                                        }
                                    </h6>
                                    <small class="text-muted">Please wait while we complete this step...</small>
                                </div>
                            </div>
                            <div class="progress rounded-pill">
                                <div class="progress-bar bg-success progress-bar-animated rounded-pill" 
                                    role="progressbar" 
                                    style="width: @((currentStep * 33))%" 
                                    aria-valuenow="@(currentStep * 33)" 
                                    aria-valuemin="0" 
                                    aria-valuemax="100">
                                </div>
                            </div>
                            <small class="text-muted mt-2 d-block">Step @currentStep of 3</small>
                        </div>
                    }

                    <button class="btn btn-border-success w-100" @onclick="AutoDeployProject" disabled="@isDeploying">
                        @if (isDeploying)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Deploying...</span>
                        }
                        else
                        {
                            <Icon IconName="rocket" Width="20" Height="20" Class="me-2" />
                            <span>Deploy Project</span>
                        }
                    </button>
                </div>
            }            

            @if (hasErrors)
            {
                @if (hasErrors)
                {
                    <div class="alert alert-warning d-flex align-items-center mb-3">
                        <Icon IconName="warning" Width="20" Height="20" Class="me-2" />
                        <span>Automatic deployment encountered issues. Manual completion required.</span>
                    </div>
                }
                
                <!-- Step 1: Profile -->
                <div class="info-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle d-flex align-items-center justify-content-center @(nostrMetadataCreated ? "bg-success text-white" : "bg-light border") me-3 width-40 height-40" >
                            @if (nostrMetadataCreated)
                            {
                                <Icon IconName="check" Width="16" Height="16" />
                            }
                            else
                            {
                                <Icon IconName="user" Width="16" Height="16" />
                            }
                        </div>
                        <div>
                            <h6 class="mb-1">Create Nostr Profile</h6>
                            <p class="text-muted small mb-0">Establish your project's identity on the Nostr network</p>
                        </div>
                    </div>

                    @if (!nostrMetadataCreated)
                    {
                        <button class="btn btn-border-success w-100" @onclick="ConfirmFinalizeNostrProfileCreation" disabled="@createProfileSpinner">
                            @if (createProfileSpinner)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <Icon IconName="user" Width="16" Height="16" Class="me-2" />
                                <span>Create Profile</span>
                            }
                        </button>
                    }
                    else
                    {
                        <div class="d-flex align-items-center text-success">
                            <Icon IconName="check-circle" Width="16" Height="16" Class="me-2" />
                            <span>Profile Created Successfully</span>
                        </div>
                    }
                </div>

                <!-- Step 2: Project Info -->
                @if (nostrMetadataCreated)
                {
                    <div class="info-card mt-4">
                        <div class="d-flex align-items-center mb-3">
                            <div class="rounded-circle d-flex align-items-center justify-content-center @(nostrApplicationSpecificDataCreated ? "bg-success text-white" : "bg-light border") me-3 width-40 height-40">
                                @if (nostrApplicationSpecificDataCreated)
                                {
                                    <Icon IconName="check" Width="16" Height="16" />
                                }
                                else
                                {
                                    <Icon IconName="project" Width="16" Height="16" />
                                }
                            </div>
                            <div>
                                <h6 class="mb-1">Publish Project Information</h6>
                                <p class="text-muted small mb-0">Define technical details and funding structure</p>
                            </div>
                        </div>

                        @if (!nostrApplicationSpecificDataCreated)
                        {
                            <button class="btn btn-border-success w-100" @onclick="ConfirmFinalizeProjectInfoCreation" disabled="@createApplicationDataSpinner">
                                @if (createApplicationDataSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Publishing...</span>
                                }
                                else
                                {
                                    <Icon IconName="project" Width="16" Height="16" Class="me-2" />
                                    <span>Publish Project Info</span>
                                }
                            </button>
                        }
                        else
                        {
                            <div class="d-flex align-items-center text-success">
                                <Icon IconName="check-circle" Width="16" Height="16" Class="me-2" />
                                <span>Project Info Published Successfully</span>
                            </div>
                        }
                    </div>
                }

                <!-- Step 3: Deploy -->
                @if (nostrMetadataCreated && nostrApplicationSpecificDataCreated)
                {
                    <div class="info-card mt-4">
                        <div class="d-flex align-items-center mb-3">
                            <div class="rounded-circle d-flex align-items-center justify-content-center @(!string.IsNullOrEmpty(project.CreationTransactionId) ? "bg-success text-white" : "bg-light border") me-3 width-40 height-40">
                                @if (!string.IsNullOrEmpty(project.CreationTransactionId))
                                {
                                    <Icon IconName="check" Width="16" Height="16" />
                                }
                                else
                                {
                                    <Icon IconName="deploy" Width="16" Height="16" />
                                }
                            </div>
                            <div>
                                <h6 class="mb-1">Deploy to Blockchain</h6>
                                <p class="text-muted small mb-0">Create the on-chain contract for your project</p>
                            </div>
                        </div>

                        @if (string.IsNullOrEmpty(project.CreationTransactionId))
                        {
                            <div class="alert alert-info d-flex align-items-center mb-3">
                                <Icon IconName="info" Width="16" Height="16" Class="me-2" />
                                <span class="small">This action cannot be undone. Your project will be live after deployment.</span>
                            </div>

                            <button class="btn btn-border-success w-100" @onclick="CreatProjectTransactionAnCheckPassword" disabled="@creatProjectSpinner">
                                @if (creatProjectSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Deploying...</span>
                                }
                                else
                                {
                                    <Icon IconName="deploy" Width="16" Height="16" Class="me-2" />
                                    <span>Deploy Project</span>
                                }
                            </button>
                        }
                        else
                        {
                            <div class="d-flex align-items-center text-success">
                                <Icon IconName="check-circle" Width="16" Height="16" Class="me-2" />
                                <span>Project Deployed Successfully</span>
                            </div>
                        }
                    </div>
                }

                <div class="text-center mt-4">
                    <small class="text-muted">
                        <Icon IconName="info" Width="16" Height="16" Class="me-2" />
                        Steps will advance automatically when completed
                    </small>
                </div>
            }
        </div>



        @if (showCreateModal)
        {
            <div class="modal-wrapper">
                <div class="modal fade show d-block" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content modern-modal">
                            <div class="modal-header border-0 pb-0">
                                <div class="d-flex align-items-center">
                                    <Icon IconName="check-circle" Height="32" Width="32" class="me-2" />
                                    <h5 class="modal-title">Confirmation</h5>
                                </div>
                                <button class="btn-close-custom" @onclick="() => showCreateModal = false">
                                    <Icon IconName="close-circle" Height="24" Width="24" />
                                </button>
                            </div>

                            <div class="modal-body modal-body-scroll py-4">

                                <div class="row g-4 mb-4">
                                    <div class="col-md-12">
                                        <div class="info-card h-100">
                                            <div class="info-label">Project Identifier</div>
                                            <div class="info-value">@project.ProjectInfo.ProjectIdentifier</div>
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="info-card h-100">
                                            <div class="info-label">Founder Key</div>
                                            <div class="info-value">@project.ProjectInfo.FounderKey</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="info-card h-100">
                                            <div class="info-label">Target Amount</div>
                                            <div class="info-value text-success">@project.ProjectInfo.TargetAmount.ToUnitBtc() @network.CoinTicker</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="info-card h-100">
                                            <div class="info-label">Start Date</div>
                                            <div class="info-value">@project.ProjectInfo.StartDate.FormatDate() (in @((project.ProjectInfo.StartDate - DateTime.Now).Days) days)</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="info-card h-100">
                                            <div class="info-label">Expiry Date</div>
                                            <div class="info-value text-warning">@project.ProjectInfo.ExpiryDate.FormatDate() (in @((project.ProjectInfo.ExpiryDate - DateTime.Now).Days) days)</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="info-card h-100">
                                            <div class="info-label">Penalty Days</div>
                                            <div class="info-value text-danger">@project.ProjectInfo.PenaltyDays days</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="info-card h-100">
                                            <div class="info-label">Miner Fee</div>
                                            <div class="info-value text-warning">@Money.Satoshis(signedTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="info-card h-100">
                                            <div class="info-label">Angor Fee</div>
                                            <div class="info-value text-success">@signedTransaction?.Transaction.Outputs.First().Value.ToUnit(MoneyUnit.BTC) @network.CoinTicker</div>
                                        </div>
                                    </div>
                                </div>

                                <FeeSelector SendFee="@Money.Satoshis(signedTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC)"
                                             CoinTicker="@network.CoinTicker"
                                             FeeRate="@feeData.SelectedFeeEstimation.FeeRate"
                                             FeeBlockCount="@feeData.SelectedFeeEstimation.Confirmations"
                                             FeePosition="@feeData.FeePosition"
                                             FeeMin="@feeData.FeeMin"
                                             FeeMax="@feeData.FeeMax"
                                             OnFeeChanged="@HandleFeeChanged" />

                                <h6 class="mt-3 mb-2">Stages</h6>
                                
                                @foreach (var stage in project.ProjectInfo.Stages)
                                {
                                    <div class="stage-card mt-4 p-3">
                                        <div class="stage-content">
                                            <div class="stage-icon">
                                                <Icon IconName="percent" Height="32" Width="32" />
                                            </div>
                                            <div class="stage-info">
                                                <p class="stage-text"><strong>Stage Percent:</strong> @stage.AmountToRelease %</p>
                                            </div>
                                        </div>
                                        <div class="stage-content">
                                            <div class="stage-icon">
                                                <Icon IconName="calendar" Height="32" Width="32" />
                                            </div>
                                            <div class="stage-info">
                                                <p class="stage-text"><strong>Stage Date:</strong> @stage.ReleaseDate.FormatDate() - @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after project starts</p>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <hr>

                                <div class="confirmation-section mt-4 text-center">
                                    <Icon IconName="alert" Height="24" Width="24" class="mb-2" />
                                    <p class="confirmation-text">
                                        Please review the transaction details carefully before confirming.
                                    </p>
                                </div>
                            </div>

                            <div class="modal-footer border-0 pt-0">
                                <button class="btn btn-border-success btn-sm" @onclick="Send" disabled="@publishProjectSpinner">
                                    @if (publishProjectSpinner)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Confirming...</span>
                                    }
                                    else
                                    {
                                        <span>Confirm</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if(showPreview){
            <div class="modal-wrapper">
                <div class="modal fade show d-block" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content modern-modal">
                            <div class="modal-header border-0 pb-0">
                                <div class="d-flex align-items-center">
                                    <Icon IconName="eye" Height="32" Width="32" class="me-2" />
                                    <h5 class="modal-title">Project Preview</h5>
                                </div>
                                <button class="btn-close-custom" @onclick="TogglePreview">
                                    <Icon IconName="close-circle" Height="24" Width="24" />
                                </button>
                            </div>

                            <div class="modal-body modal-body-scroll">
                                <div class="d-flex align-items-stretch">
                                    <div class="card w-100 me-0 ms-0 preview-card-container">
                                        <a class="d-block">
                                            <div class="banner-container">
                                                @if (string.IsNullOrEmpty(project.Metadata?.Banner))
                                                {
                                                    <img class="banner-image" src="/assets/img/no-image.jpg" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                                }
                                                else
                                                {
                                                    <img class="banner-image" src="@project.Metadata.Banner" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                                }
                                                <div class="profile-container">
                                                    @if (string.IsNullOrEmpty(project.Metadata?.Picture))
                                                    {
                                                        <img class="profile-image" src="/assets/img/no-image.jpg" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                                    }
                                                    else
                                                    {
                                                        <img class="profile-image" src="@project.Metadata.Picture" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                                    }
                                                </div>
                                            </div>
                                        </a>

                                        <div class="card-body pb-0">
                                            <div class="d-flex align-items-center mb-4">
                                                <span class="user-select-none animate-rotate">
                                                    <Icon IconName="view" Height="24" Width="24"></Icon>
                                                </span>
                                                <div class="h-100 ms-3">
                                                    <h5 class="mb-0 font-weight-bolder">
                                                        @if (string.IsNullOrEmpty(project.Metadata?.Name))
                                                        {
                                                            <span>Name</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@project.Metadata.Name</span>
                                                        }
                                                    </h5>
                                                </div>
                                            </div>

                                            @if (string.IsNullOrEmpty(project.Metadata?.About))
                                            {
                                                <p class="mb-0 line-clamp-3">About</p>
                                            }
                                            else
                                            {
                                                <p class="mb-0 line-clamp-3">@ConvertToMarkupString(project.Metadata.About)</p>
                                            }
                                        </div>
                                        <div class="card-footer pt-0">
                                            <hr class="horizontal light mt-3">
                                            <span role="button" class="d-flex align-items-center btn btn-border w-100-m">
                                                <span class="user-select-none animate-rotate">
                                                    <Icon IconName="view-project" Height="24" Width="24"></Icon>
                                                </span>
                                                <div class="h-100 ms-3">
                                                    <span class="mb-0 font-weight-bolder text-primary">
                                                        View Project
                                                    </span>
                                                </div>
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div class="create-snapshot-card mt-4">
                                    <div class="create-snapshot-header">
                                        <Icon IconName="camera" class="create-snapshot-icon" />
                                        <h4 class="create-snapshot-title">Project Snapshot</h4>
                                    </div>
                                    <div class="create-snapshot-content">
                                        <div class="create-snapshot-row">
                                            <span class="create-snapshot-label">Target Amount</span>
                                            <span class="create-snapshot-value">@targetAmountInBTC @network.CoinTicker</span>
                                        </div>
                                        <div class="create-snapshot-row">
                                            <span class="create-snapshot-label">Stages</span>
                                            <span class="create-snapshot-value">@project.ProjectInfo.Stages.Count</span>
                                        </div>
                                        <div class="create-snapshot-row">
                                            <span class="create-snapshot-label">Penalty Days</span>
                                            <span class="create-snapshot-value">@project.ProjectInfo.PenaltyDays days</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }




        @if (showConfirmationModal)
        {
            <div class="modal-wrapper">
                <div class="modal fade show d-block" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content modern-modal">
                            <div class="modal-header border-0 pb-0">
                                <div class="d-flex align-items-center">
                                    <Icon IconName="alert-circle" Height="32" Width="32" class="me-2" />
                                    <h5 class="modal-title">Confirmation</h5>
                                </div>
                                <button class="btn-close-custom" @onclick="CloseConfirmationModal">
                                    <Icon IconName="close-circle" Height="24" Width="24" />
                                </button>
                            </div>

                            <div class="modal-body modal-body-scroll">
                                <p class="mb-1">@confirmationMessage</p>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-border-warning btn-sm" @onclick="CloseConfirmationModal">Cancel</button>
                                <button type="button" class="btn btn-border-success btn-sm" @onclick="PerformFinalizeAction">Confirm</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private bool sendConfirmModal;
    private bool showCreateModal;
    private bool projectStageModal;
    private bool isPresetMode = true;
    private int selectedInterval = 1;
    private int totalDuration = 90;
    private int numberOfStages = 3;
    private bool showConfirmationModal;
    private string confirmationMessage;
    private Action finalizeAction;

    private bool showResetConfirmation;
    private string resetTarget;

    Transaction unsignedTransaction;
    TransactionInfo signedTransaction;

    private readonly FeeData feeData = new();

    private FounderProject project = new();

    private bool endDateError = false;
    private readonly Dictionary<string, (int[] Percentages, int IntervalDays)> presets = new()
    {
    { "preset1", (new[] { 10, 30, 60 }, 10) },
    { "preset2", (new[] { 25, 25, 25, 25 }, 10) },
    { "preset3", (new[] { 60, 20, 20 }, 15) }
    };

    private decimal targetAmountInBTC
    {
        get => Money.Satoshis(project.ProjectInfo.TargetAmount).ToUnit(MoneyUnit.BTC);
        set => project.ProjectInfo.TargetAmount = Money.Coins(value).Satoshi;
    }

    private int activeTab = 1;
    private string activePreset;
    private bool showPreview { get; set; } = false;

    private bool isValid = true;
    private string errorMessage;

    bool createProfileSpinner;
    bool createApplicationDataSpinner;
    bool creatProjectSpinner;
    bool publishProjectSpinner;

    bool nostrMetadataCreated;
    bool nostrApplicationSpecificDataCreated; bool autoDeploySpinner;
    bool isDeploying;
    bool hasErrors;

    private int currentStep = 1;

    private int wizardStep = 1;

    private void CloseStageWizard()
    {
        projectStageModal = false;
        wizardStep = 1;
    }

    private void SelectPreset(string key)
    {
        activePreset = key;
        OnStagePresetChange(key);
    }

    // Next button
    private void NextWizardStep()
    {
        //For Storing the stages data after wizard step 1
        if (wizardStep == 1)
        {
            var intervals   = CalculateIntervals();
            var percentages = CalculatePercentages();

            project.ProjectInfo.Stages.Clear();
            for (int i = 0; i < intervals.Count; i++)
            {
                project.ProjectInfo.Stages.Add(new Stage
                {
                    AmountToRelease = percentages[i],
                    ReleaseDate = project.ProjectInfo.StartDate.AddDays(intervals[i])
                });
            }
        }

        if (wizardStep < 3)
        {
            wizardStep++;
        }
        else
        {
            // Closing the Wizard after 3rd stage
            projectStageModal = false;
            wizardStep = 1;
        }
    }

    // Previous button
    private void PrevWizardStep()
    {
        if (wizardStep > 1)
        {
            wizardStep--;
        }
    }
    private int GetProgressPercentage() => (currentStep - 1) * 50;
    private void TogglePreview() => showPreview = !showPreview;
    private void NextStep()
    {
        if (currentStep < 3)
        {
            currentStep++;
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
        }
    }

    private bool CanProceedToNextStep()
    {
        return currentStep switch
        {
            1 => nostrMetadataCreated,
            2 => nostrApplicationSpecificDataCreated,
            _ => false
        };
    }





    private void SelectInterval(int interval)
    {
        selectedInterval = interval;
    }

    private string GetIntervalName(int interval)
    {
        return interval switch
        {
            1 => "Daily",
            7 => "Weekly",
            14 => "Biweekly",
            30 => "Monthly",
            90 => "Quarterly",
            0 => "Custom",
            _ => $"Every {interval} days"
        };
    }

    private void UpdateStageCount(int count)
    {
        numberOfStages = count;
        StateHasChanged();
    }

    private List<decimal> CalculatePercentages()
    {
        int stageCount = CalculateNumberOfStages();
        var percentages = new List<decimal>();
        if (stageCount <= 0)
            return percentages;

        decimal rawShare = 100m / stageCount;
        decimal roundedShare = Math.Round(rawShare, 2);
        decimal sum = roundedShare * stageCount;
        decimal diff = Math.Round(100m - sum, 2);

        for (int i = 0; i < stageCount; i++)
        {
            if (i == stageCount - 1)
                percentages.Add(roundedShare + diff);
            else
                percentages.Add(roundedShare);
        }

        return percentages;
    }

    private int GetDurationInDays()
    {
        return (project.ProjectInfo.EndDate - DateTime.Today).Days;
    }
    
    private int GetMaxStagesBasedOnDuration()
    {
        int days = GetDurationInDays();
        return Math.Max(2, days);   // Allow one stage per day, but at least 2 stages
    }
    
    private int CalculatePossibleStages(int interval)
    {
        if (interval <= 0) return GetMaxStagesBasedOnDuration(); // for custom
        int days = GetDurationInDays();
        return days < interval ? 0 : Math.Max(1, days / interval);
    }
    
    private void CalculateProjectDuration()
    {
        if (project.ProjectInfo.EndDate <= DateTime.Today)
        {
            project.ProjectInfo.EndDate = DateTime.Today.AddDays(30);
        }
        
        // Adjusting no. of stages if custom and current are too high
        if (selectedInterval == 0 && numberOfStages > GetMaxStagesBasedOnDuration())
        {
            numberOfStages = GetMaxStagesBasedOnDuration();
        }
        
        StateHasChanged();
    }
    
    private int CalculateNumberOfStages()
    {
        int maxPossible = CalculatePossibleStages(selectedInterval);
        
        if (selectedInterval == 0)
            return Math.Min(numberOfStages, maxPossible);
        
        return maxPossible;
    }
    
    private List<int> CalculateIntervals()
    {
        int stageCount = CalculateNumberOfStages();
        var intervals = new List<int>();
        int totalDays = GetDurationInDays();
        
        if (stageCount <= 0)
            return intervals;
        
        if (selectedInterval == 0)
        {
            // For custom stages, distribute evenly across the duration
            for (int i = 0; i < stageCount; i++)
            {
                int dayOffset = (int)Math.Round((i + 1) * totalDays / (double)stageCount);
                intervals.Add(dayOffset);
            }
        }
        else
        {
            // For preset intervals, use the selected interval
            for (int i = 0; i < stageCount; i++)
            {
                intervals.Add((i + 1) * selectedInterval);
            }
        }
        
        return intervals;
    }

    protected override async Task OnInitializedAsync()
    {
        NavMenuState.SetActivePage("founder");

        if (!hasWallet)
        {
            return;
        }

        var projects = storage.GetFounderProjects();

        var keys = _walletStorage.GetFounderKeys();

        // if CreationTransactionId is not null this means the project was published to the blockchain
        var startedProjects = projects.Where(p => !string.IsNullOrEmpty(p.CreationTransactionId)).ToList();

        if (startedProjects.Count >= keys.Keys.Count)
        {
            errorMessage = "All founder keys have been used for this wallet!";
            isValid = false;
            return;
        }

        var latestProject = startedProjects.MaxBy(p => p.ProjectIndex);
        var projectsKeys = _derivationOperations.GetProjectKey(keys, latestProject?.ProjectIndex + 1 ?? 1);

        project = projects.FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier)
        ?? CreateDefaultProject(projectsKeys);

        // Set start date to today automatically
        project.ProjectInfo.StartDate = DateTime.Today;

        // Select a preset if no stages exist
        if (!project.ProjectInfo.Stages.Any())
        {
            isPresetMode = true;
            activePreset = "preset1";
            OnStagePresetChange(activePreset);
        }

        // Set initial EndDate based on stages or today
        if (project.ProjectInfo.Stages.Any())
        {
            // Set EndDate to the date of the first stage (ordered by date)
            project.ProjectInfo.EndDate = project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate).First().ReleaseDate;
        }
        else
        {
            // If no stages exist, set EndDate to today
            project.ProjectInfo.EndDate = DateTime.Today;
        }

        // Always update expiry date based on stages (or start date if no stages)
        project.ProjectInfo.ExpiryDate = CalculateExpiryDate();

        if (network.NetworkType == NetworkType.Testnet)
        {
            PopulateTestnetData(project);
        }

        // save project to storage immediately if new
        if (!projects.Any(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier))
        {
            storage.AddFounderProject(project);
        }

        // check if the project was already published to nostr
        nostrMetadataCreated = project.NostrProfileCreated;
        nostrApplicationSpecificDataCreated = !string.IsNullOrEmpty(project.ProjectInfoEventId);
    }

    private string GetActiveClass(int tabNumber)
    {
        if (tabNumber == 2)
        {
            if (nostrMetadataCreated && !nostrApplicationSpecificDataCreated)
            {
                if (!project.ProjectInfo.Stages.Any())
                {
                    // to make it easier for testing we pre add some stages
                    project.ProjectInfo.Stages = new List<Stage>
    {
    new() { AmountToRelease = 10, ReleaseDate = DateTime.UtcNow }, //.AddDays(10) }, during testing we often need to spend a stage immediately
    new() { AmountToRelease = 30, ReleaseDate = DateTime.UtcNow.AddDays(20) },
    new() { AmountToRelease = 60, ReleaseDate = DateTime.UtcNow.AddDays(30) }
    };
                }
            }
        }

        return activeTab == tabNumber ? "active" : "";
    }

    private void ConfirmFinalizeNostrProfileCreation()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr profile already created");
            return;
        }

        if (!ValidateInputData())
        {
            // If validation fails, return early
            return;
        }

        confirmationMessage = "Are you sure you want to create the Nostr Profile?";
        finalizeAction = FinalizeNostrProfileCreation;
        showConfirmationModal = true;
    }

    private async void ConfirmFinalizeProjectInfoCreation()
    {
        if (nostrApplicationSpecificDataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr project already created");
            return;
        }

        confirmationMessage = "Are you sure you want to deploy the project info to Nostr?.";
        finalizeAction = FinalizeProjectInfoCreation;
        showConfirmationModal = true;
    }

    private void CloseConfirmationModal()
    {
        showConfirmationModal = false;
        StateHasChanged();
    }

    private void PerformFinalizeAction()
    {
        showConfirmationModal = false;
        finalizeAction.Invoke();
    }

    private async void FinalizeNostrProfileCreation()
    {
        await CreatNostrProfileAnCheckPassword();
    }

    private async void FinalizeProjectInfoCreation()
    {
        await CreatProjectInfoOnNostrAnCheckPassword();
    }

    private async Task CreatNostrProfileAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatNostrProfile);
        }
        else
        {
            await CreatNostrProfile();
        }
    }

    private async Task CreatNostrProfile()
    {
        createProfileSpinner = true;
        StateHasChanged();
        await Task.Delay(10);



        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);

            var resultId = await _RelayService.CreateNostrProfileAsync(
            project.Metadata.ToNostrMetadata(),
            Encoders.Hex.EncodeData(nostrKey.ToBytes()),
            _ =>
            {
                createProfileSpinner = false;

                if (!_.Accepted)
                {
                    notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!", $"{_.CommunicatorName} - {_.Message}"); //TODO add export project info
                    return;
                }

                _Logger.LogInformation($"Communicator {_.CommunicatorName} accepted event {_.EventId}");

                if (nostrMetadataCreated == false)
                {
                    nostrMetadataCreated = true;
                    project.NostrProfileCreated = true;
                    storage.UpdateFounderProject(project);

                    InvokeAsync(async () => await CheckAndAdvanceStep());
                    InvokeAsync(() => _RelayService.PublishNip65List(Encoders.Hex.EncodeData(nostrKey.ToBytes()),
                        okResponse =>
                        {
                            if (okResponse.Accepted)
                                return;
                            notificationComponent.ShowErrorMessage("Failed to publish NIP-65 list", $"{okResponse.CommunicatorName} - {okResponse.Message}");
                        }));
                }

                StateHasChanged();
            });


            if (string.IsNullOrEmpty(resultId))
            {
                notificationComponent.ShowErrorMessage("Failed to create nostr profile");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, "Error creating nostr profile.");
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            createProfileSpinner = false;
        }
    }

    private async Task CreatProjectInfoOnNostrAnCheckPassword()
    {
        if (!project.NostrProfileCreated)
        {
            notificationComponent.ShowErrorMessage("You must create the Nostr profile first.");
            return;
        }

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectInfoOnNostr);
        }
        else
        {
            await CreatProjectInfoOnNostr();
        }
    }

    private async Task CreatProjectInfoOnNostr()
    {
        createApplicationDataSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);

            var nostrKeyHex = Encoders.Hex.EncodeData(nostrKey.ToBytes());

            var resultId = await _RelayService.AddProjectAsync(project.ProjectInfo, nostrKeyHex,
            _ =>
            {
                createApplicationDataSpinner = false;

                if (!_.Accepted)
                {
                    notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!", $"{_.CommunicatorName} - {_.Message}"); //TODO add export project info
                    return;
                }

                _Logger.LogInformation($"Communicator {_.CommunicatorName} accepted event {_.EventId}");

                if (nostrApplicationSpecificDataCreated == false)
                {
                    nostrApplicationSpecificDataCreated = true;
                    project.ProjectInfoEventId = _.EventId;
                    storage.UpdateFounderProject(project);

                    InvokeAsync(async () => await CheckAndAdvanceStep());
                }

                StateHasChanged();
            });

            // todo: do we actually need this? does it actualy work to delete?
            if (string.IsNullOrEmpty(resultId))
            {
                createApplicationDataSpinner = false;
                await _RelayService.DeleteProjectAsync(resultId, nostrKeyHex);
                notificationComponent.ShowErrorMessage("Failed to create application data");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            createApplicationDataSpinner = false;
        }
    }

    private async Task CreatProjectTransactionAnCheckPassword()
    {
        if (string.IsNullOrEmpty(project.ProjectInfoEventId))
        {
            notificationComponent.ShowErrorMessage("You must publish the project information to Nostr first.");
            return;
        }

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectTransaction);
        }
        else
        {
            await CreatProjectTransaction();
        }
    }

    private async Task CreatProjectTransaction()
    {
        creatProjectSpinner = true;
        StateHasChanged();

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var accountBalanceInfo = await _walletUIService.RefreshWalletBalance();
            var accountInfo = accountBalanceInfo.AccountInfo;

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            unsignedTransaction = _founderTransactionActions.CreateNewProjectTransaction(project.ProjectInfo.FounderKey, _derivationOperations.AngorKeyToScript(project.ProjectInfo.ProjectIdentifier), NetworkConfiguration.AngorCreateFeeSats, NetworkConfiguration.NostrEventIdKeyType, project.ProjectInfoEventId);

            signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation.FeeRate);

            showCreateModal = true;
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            creatProjectSpinner = false;
            StateHasChanged();
        }
    }

    private async Task HandleFeeChanged(FeeCalculation feeCalc)
    {
        try
        {
            if (feeCalc.UseCustomFee && feeCalc.CustomFee.HasValue)
            {
                feeData.SetCustomFee(feeCalc.CustomFee.Value);
            }
            else if (feeCalc.Position.HasValue && feeCalc.Position.Value <= feeData.FeeEstimations.Fees.Count)
            {
                feeData.SelectFee(feeCalc.Position.Value);
            }

            var words = await passwordComponent.GetWalletAsync();
            var accountInfo = storage.GetAccountInfo(network.Name);

            signedTransaction = _WalletOperations.AddInputsAndSignTransaction(
            accountInfo.GetNextChangeReceiveAddress(),
            unsignedTransaction,
            words,
            accountInfo,
            feeData.SelectedFeeEstimation.FeeRate);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            _Logger.LogError(ex, "Error calculating fee");
            notificationComponent.ShowErrorMessage("Error calculating fee: " + ex.Message);
        }
    }

    private async Task Send()
    {
        publishProjectSpinner = true;
        StateHasChanged();

        try
        {
            showCreateModal = false;

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage("Transaction failed", response.Message);
                return;
            }

            var transactionId = signedTransaction.Transaction.GetHash().ToString();

            if (string.IsNullOrEmpty(transactionId))
            {
                notificationComponent.ShowErrorMessage("Transaction ID is missing. Cannot store the project.");
                return;
            }

            project.CreationTransactionId = transactionId;
            storage.UpdateFounderProject(project);

            NavigationManager.NavigateTo($"/view/{project.ProjectInfo.ProjectIdentifier}");
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            publishProjectSpinner = false;
            passwordComponent.ClearPassword();
            StateHasChanged();
        }
    }

    private void AddStage()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        project.ProjectInfo.Stages.Add(new Stage { ReleaseDate = DateTime.UtcNow });

        // Update expiry date
        project.ProjectInfo.ExpiryDate = CalculateExpiryDate();
        StateHasChanged();
    }

    private void RemoveStage(Stage stage)
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        project.ProjectInfo.Stages.Remove(stage);

        // Update expiry date
        project.ProjectInfo.ExpiryDate = CalculateExpiryDate();
        StateHasChanged();
    }

    public MarkupString ConvertToMarkupString(string input)
    {
        string sanitizedInput = HtmlStripperService.StripHtmlTags(input);
        return new MarkupString(sanitizedInput);
    }

    private async void SetActiveTab(int tabNumber)
    {
        if (!nostrMetadataCreated)
        {
            // Save the project before switching tabs
            storage.UpdateFounderProject(project);
        }

        activeTab = tabNumber;
        StateHasChanged();

        // Add a slight delay before scrolling to the top
        // This ensures the tab content has been rendered
        await Task.Delay(10);
        await JS.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    private string GetProgressMessage()
    {
        if (!nostrMetadataCreated)
        {
            return "Step 1: Create Nostr Profile";
        }

        if (!nostrApplicationSpecificDataCreated)
        {
            return "Step 2: Enter Project Info";
        }

        return "Step 3: Finalize Project Creation";
    }


    private void OnStagePresetChange(string selectedPreset)
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }


        if (selectedPreset != null && presets.TryGetValue(selectedPreset, out var preset))
        {
            project.ProjectInfo.Stages.Clear();
            project.ProjectInfo.Stages = GenerateStages(preset.Percentages, preset.IntervalDays);
        }
        else
        {
            notificationComponent.ShowErrorMessage("Invalid preset selected.");
            project.ProjectInfo.Stages.Clear();
        }

        StateHasChanged();
    }

    private bool ValidateInputData()
    {
        var isTestnet = this.network.NetworkType == NetworkType.Testnet;

        if (!isTestnet)
        {
            // test that need to happen in production will go here

            if (project.ProjectInfo.PenaltyDays < 10)
            {
                notificationComponent.ShowErrorMessage("Project penalty must be higher than 10 days");
                return false;
            }

            if (project.ProjectInfo.Stages.Count() < 3)
            {
                notificationComponent.ShowErrorMessage("There must be at least 3 stages");
                return false;
            }

            if (targetAmountInBTC < (decimal)0.01)
            {
                notificationComponent.ShowErrorMessage("Project target amount must be higher than 0.1 BTC");
                return false;
            }

            if (project.ProjectInfo.ExpiryDate < project.ProjectInfo.StartDate)
            {
                notificationComponent.ShowErrorMessage("Project must expire after the start date");
                return false;
            }

            if (project.ProjectInfo.Stages.Any() && project.ProjectInfo.ExpiryDate < project.ProjectInfo.Stages.Last().ReleaseDate)
            {
                notificationComponent.ShowErrorMessage("Project expiry date must be after the last stage date");
                return false;
            }

            if (project.ProjectInfo.StartDate < DateTime.Today)
            {
                notificationComponent.ShowErrorMessage("Project must start in the future");
                return false;
            }
        }
        
        if (project.Metadata is null)
        {
            notificationComponent.ShowErrorMessage("Nostr profile must be filled");
            return false;
        }

        if (string.IsNullOrEmpty(project.Metadata.Name))
        {
            notificationComponent.ShowErrorMessage("Nostr profile name must be filled");
            return false;
        }

        if (project.ProjectInfo.Stages.Sum(s => s.AmountToRelease) != 100)
        {
            notificationComponent.ShowErrorMessage("The stages must sum to 100%");
            return false;
        }

        foreach (var stage in project.ProjectInfo.Stages)
        {
            if (stage.AmountToRelease <= 0 || stage.AmountToRelease > 100)
            {
                notificationComponent.ShowErrorMessage("Stage percentage must be between 1 and 100.");
                return false;
            }
        }

        var projects = storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();

        if (projects.Any(a => project.ProjectInfo.ProjectIdentifier == a.ProjectInfo.ProjectIdentifier))
        {
            notificationComponent.ShowErrorMessage("This wallet already has a project with this index");
            return false;
        }

        if (project.ProjectInfo.Stages.Any())
        {
            // First check if first stage is after project start
            if (project.ProjectInfo.Stages.First().ReleaseDate < project.ProjectInfo.EndDate) // end date is end of funding window
            {
                notificationComponent.ShowErrorMessage("First stage must be after project started");
                return false;
            }

            // Then check stages are in order
            var sortedStages = project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate).ToList();
            for (int i = 0; i < sortedStages.Count - 1; i++)
            {
                if (sortedStages[i].ReleaseDate >= sortedStages[i + 1].ReleaseDate)
                {
                    notificationComponent.ShowErrorMessage($"Stage {i + 2} must be after stage {i + 1}");
                    return false;
                }
            }

            // Keep stages sorted
            project.ProjectInfo.Stages = sortedStages;
        }

        return true;
    }

    private List<Stage> GenerateStages(int[] percentages, int intervalDays)
    {
        var stages = new List<Stage>();
        var currentDate = project.ProjectInfo.StartDate;

        for (int i = 0; i < percentages.Length; i++)
        {
            stages.Add(new Stage
                {
                    AmountToRelease = percentages[i],
                    ReleaseDate = currentDate
                });

            if (i > 0)
            {
                var daysBetween = (currentDate - stages[i - 1].ReleaseDate).Days;
                _Logger.LogInformation($"Days between stage {i} and {i + 1}: @daysBetween days");
            }

            currentDate = currentDate.AddDays(intervalDays);
        }

        return stages;
    }


    private readonly string[] spacePhotos = new[]
    {
    "https://images-assets.nasa.gov/image/hubble-observes-one-of-a-kind-star-nicknamed-nasty_17754652960_o/hubble-observes-one-of-a-kind-star-nicknamed-nasty_17754652960_o~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA22081/PIA22081~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e000282/GSFC_20171208_Archive_e000282~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001894/GSFC_20171208_Archive_e001894~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA08216/PIA08216~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001465/GSFC_20171208_Archive_e001465~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/hubble-sees-the-wings-of-a-butterfly-the-twin-jet-nebula_20283986193_o/hubble-sees-the-wings-of-a-butterfly-the-twin-jet-nebula_20283986193_o~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA14417/PIA14417~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA05062/PIA05062~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001518/GSFC_20171208_Archive_e001518~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/carina_nebula/carina_nebula~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA25433/PIA25433~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA15415/PIA15415~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e002086/GSFC_20171208_Archive_e002086~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/PIA14731/PIA14731~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e002020/GSFC_20171208_Archive_e002020~thumb.jpg?as=webp",
    "https://images-assets.nasa.gov/image/0203048/0203048~thumb.jpg?as=webp"
    };

    private FounderProject CreateDefaultProject(FounderKeys projectsKeys)
    {
        return new FounderProject
            {
                ProjectIndex = projectsKeys.Index,
                Metadata = new ProjectMetadata(),
                ProjectInfo = new ProjectInfo
                {
                    FounderKey = projectsKeys.FounderKey,
                    FounderRecoveryKey = projectsKeys.FounderRecoveryKey,
                    ProjectIdentifier = projectsKeys.ProjectIdentifier,
                    NostrPubKey = projectsKeys.NostrPubKey,
                    StartDate = DateTime.UtcNow.AddMinutes(2), // to allow testing and spending immediately
                    PenaltyDays = 90,
                    ExpiryDate = DateTime.UtcNow.AddDays(120),
                    TargetAmount = Money.Coins(50).Satoshi
                }
            };
    }
    private void PopulateTestnetData(FounderProject project)
    {
        var random = new Random();

        if (string.IsNullOrEmpty(project.Metadata.Banner))
        {
            project.Metadata.Banner = spacePhotos[random.Next(spacePhotos.Length)];
        }

        if (string.IsNullOrEmpty(project.Metadata.Picture))
        {
            project.Metadata.Picture = spacePhotos[random.Next(spacePhotos.Length)];
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        notificationComponent.ShowNotificationMessage("Copied to clipboard", 2);
    }


    private IEnumerable<(string IconName, string Label, string Value)> GetProjectInfo()
    {
        return new List<(string, string, string)>
    {
    ("name", "Project Name", project.Metadata.Name),
    ("about", "Project About", ((MarkupString)project.Metadata.About).ToString()),
    ("identifier", "Project Identifier", project.ProjectInfo.ProjectIdentifier),
    ("key", "Founder Key", project.ProjectInfo.FounderKey)
    };
    }

    private IEnumerable<(string IconName, string Label, string Value)> GetProjectInfoData()
    {
        return new List<(string, string, string)>
    {
    ("name", "Project Name", project.Metadata.Name),
    ("about", "Project About", ((MarkupString)project.Metadata.About).ToString()),
    ("identifier", "Project Identifier", project.ProjectInfo.ProjectIdentifier),
    ("key", "Founder Key", project.ProjectInfo.FounderKey)
    };
    }

    private IEnumerable<(string IconName, string Label, string Value, string color, bool fullWidth)> GetAdditionalProjectInfo()
    {
        return new List<(string, string, string, string, bool)>
    {
    ("balance", "Target amount", $"{targetAmountInBTC} {network.CoinTicker}", "text-success", true),
    ("calendar", "Funding start date", $"{project.ProjectInfo.StartDate.FormatDate()} in {(project.ProjectInfo.StartDate - DateTime.Now).Days} days", "text-warning", false),
    ("calendar", "Funding end date", $"{project.ProjectInfo.EndDate.FormatDate()} in {(project.ProjectInfo.EndDate - DateTime.Now).Days} days", "text-warning", false),
    ("unlock", "Penalty days", $"{project.ProjectInfo.PenaltyDays} days", "text-warning", false),
    ("calendar", "Expiry date", $"{project.ProjectInfo.ExpiryDate.FormatDate()} in {(project.ProjectInfo.ExpiryDate - DateTime.Now).Days} days", "text-warning", false)
    };
    }

    private void ValidateEndDate()
    {
        if (project.ProjectInfo.Stages.Any())
        {
            var firstStageDate = project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate).First().ReleaseDate;
            if (project.ProjectInfo.EndDate >= firstStageDate)
            {
                endDateError = true;
            }
            else
            {
                endDateError = false;
            }
        }

        project.ProjectInfo.ExpiryDate = CalculateExpiryDate();
        StateHasChanged();
    }

    private DateTime CalculateExpiryDate()
    {
        if (project.ProjectInfo.Stages.Any())
        {
            var lastStageDate = project.ProjectInfo.Stages.OrderBy(s => s.ReleaseDate).Last().ReleaseDate;
            return lastStageDate.AddDays(60);
        }

        return project.ProjectInfo.StartDate.AddDays(60);
    }

    private async void OpenDatePicker(string inputId)
    {
        await JS.InvokeVoidAsync("eval", $"document.getElementById('{inputId}')?.showPicker()");
    }

    private async Task AutoDeployProject()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(async () => await ExecuteAutoDeployment());
        }
        else
        {
            await ExecuteAutoDeployment();
        }
    }

    private async Task ExecuteAutoDeployment()
    {
        if (!ValidateInputData())
        {
            return;
        }

        autoDeploySpinner = true;
        isDeploying = true;
        hasErrors = false;
        var completedSteps = new List<string>(); 
        StateHasChanged();

        try
        {
            // Step 1: Create Nostr Profile
            if (!nostrMetadataCreated)
            {
                currentStep = 1;
                StateHasChanged();
                await Task.Delay(500);

                await CreatNostrProfile();
                var profileCreated = await WaitForCondition(() => nostrMetadataCreated, TimeSpan.FromSeconds(30));
                if (!profileCreated)
                {
                    throw new Exception("Failed to create Nostr profile within timeout period.");
                }
                completedSteps.Add("Profile Created");
            }

            // Step 2: Create Project Info
            if (!nostrApplicationSpecificDataCreated)
            {
                currentStep = 2;
                StateHasChanged();
                await Task.Delay(500);

                await CreatProjectInfoOnNostr();
                var projectInfoCreated = await WaitForCondition(() => nostrApplicationSpecificDataCreated, TimeSpan.FromSeconds(30));
                if (!projectInfoCreated)
                {
                    throw new Exception("Failed to publish project info within timeout period.");
                }
                completedSteps.Add("Project Info Published");
            }

            // Step 3: Deploy to Blockchain
            if (string.IsNullOrEmpty(project.CreationTransactionId))
            {
                currentStep = 3;
                StateHasChanged();
                await Task.Delay(500);

                await CreatProjectTransaction();
                completedSteps.Add("Ready for Blockchain Deployment");
            }
            else
            {
                NavigationManager.NavigateTo($"/view/{project.ProjectInfo.ProjectIdentifier}");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, "Error during auto deployment. Completed steps: {CompletedSteps}", string.Join(", ", completedSteps));
            
            // Show more informative error message
            var errorMessage = $"Auto deployment failed at step {currentStep}: {e.Message}";
            if (completedSteps.Any())
            {
                errorMessage += $"\n\nCompleted steps: {string.Join(", ", completedSteps)}";
            }
            
            notificationComponent.ShowErrorMessage(errorMessage);
            hasErrors = true;
            
            // Set current step to the first incomplete step
            SetCurrentStepBasedOnProgress();
        }
        finally
        {
            autoDeploySpinner = false;
            isDeploying = false;
            StateHasChanged();
        }
    }

    private async Task<bool> WaitForCondition(Func<bool> condition, TimeSpan timeout)
    {
        var startTime = DateTime.UtcNow;
        
        while (DateTime.UtcNow - startTime < timeout)
        {
            if (condition())
            {
                return true;
            }
            
            await Task.Delay(100);
        }
        
        return false;
    }

    private void SetCurrentStepBasedOnProgress()
    {
        if (!nostrMetadataCreated)
        {
            currentStep = 1;
        }
        else if (!nostrApplicationSpecificDataCreated)
        {
            currentStep = 2;
        }
        else
        {
            currentStep = 3;
        }
    }

    private async Task CheckAndAdvanceStep()
    {
        StateHasChanged();
        await Task.Delay(100);
    }
}
