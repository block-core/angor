@page "/create"
@using Angor.Client.Models
@using Angor.Client.Storage
@using Angor.Shared
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Angor.Shared.Services
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.Networks
@using NBitcoin.DataEncoders
@inherits BaseComponent
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject NavigationManager NavigationManager
@inject IWalletOperations _WalletOperations
@inject IRelayService _RelayService
@inject ILogger<Create> _Logger;
@inject IHtmlStripperService HtmlStripperService;

@inject IFounderTransactionActions _founderTransactionActions
<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo("/wallet");
    return;
}

@if (!isValid)
{
    <div class="alert alert-danger">
        <h4>Error</h4>
        <p>@errorMessage</p>
    </div>
}

<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none">
                    <Icon IconName="add" Height="42" Width="42" />
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Create New Project
                    </h5>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="raw mt-4">
    <div class="tab-container">
        <div class="row g-4 justify-content-center text-center">
            <!-- Tab 1: Project Metadata -->
            <div class="col-lg-3 col-md-4 col-sm-6">
                <div class="card tab-card h-100 @(activeTab == 1 ? "active" : "")"
                     @onclick="() => SetActiveTab(1)"
                     data-cy="metadata-tab">
                    <div class="card-body py-4 d-flex align-items-center justify-content-center">
                        <div class="tab-icon me-3 @(activeTab == 1 ? "heartbeat" : "")" aria-hidden="true">
                            <Icon IconName="relay" Height="42" Width="42" />
                        </div>
                        <h5 class="mb-0">Project Metadata</h5>
                    </div>
                </div>
            </div>

            <!-- Tab 2: Project Info -->
            <div class="col-lg-3 col-md-4 col-sm-6">
                <div class="card tab-card h-100 @(activeTab == 2 ? "active" : "")"
                     @onclick="() => SetActiveTab(2)"
                     data-cy="info-tab">
                    <div class="card-body py-4 d-flex align-items-center justify-content-center">
                        <div class="tab-icon me-3 @(activeTab == 2 ? "heartbeat" : "")" aria-hidden="true">
                            <Icon IconName="view-project" Height="42" Width="42" />
                        </div>
                        <h5 class="mb-0">Project Info</h5>
                    </div>
                </div>
            </div>

            <!-- Tab 3: On Chain -->
            <div class="col-lg-3 col-md-4 col-sm-6">
                <div class="card tab-card h-100 @(activeTab == 3 ? "active" : "")"
                     @onclick="() => SetActiveTab(3)"
                     data-cy="onchain-tab">
                    <div class="card-body py-4 d-flex align-items-center justify-content-center">
                        <div class="tab-icon me-3 @(activeTab == 3 ? "heartbeat" : "")" aria-hidden="true">
                            <Icon IconName="addresses" Height="42" Width="42" />
                        </div>
                        <h5 class="mb-0">On Chain</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@if (activeTab == 1)
{
    <div class="row g-4">
        <div class="col-lg-7 col-12">
            <div class="card card-body mt-4">
                <EditForm Model="project.Metadata">
                    <div class="mb-3">
                        <label for="NostrMetadataName" class="form-label d-flex align-items-center">
                            <Icon IconName="check-circle" class="me-2" />
                            Project name
                        </label>
                        <div class="input-group">
                            <InputText id="NostrMetadataName" autocomplete="off" @bind-Value="project.Metadata.Name" class="form-control" placeholder="Enter the name of your project" disabled="@nostrMetadataCreated" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="NostrMetadataAbout" class="form-label d-flex align-items-center">
                            <Icon IconName="info" class="me-2" />
                            About
                        </label>
                        <div class="input-group">
                            <InputTextArea id="NostrMetadataAbout" autocomplete="off" @bind-Value="project.Metadata.About" class="form-control" placeholder="Provide a brief description of the project" disabled="@nostrMetadataCreated" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="NostrMetadataWebsite" class="form-label d-flex align-items-center">
                            <Icon IconName="link" class="me-2" />
                            Project website
                        </label>
                        <div class="input-group">
                            <InputText id="NostrMetadataWebsite" autocomplete="off" @bind-Value="project.Metadata.Website" class="form-control" placeholder="Enter the URL of the project website" disabled="@nostrMetadataCreated" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="NostrMetadataBanner" class="form-label d-flex align-items-center">
                            <Icon IconName="banner" class="me-2" />
                            Banner
                        </label>
                        <div class="input-group">
                            <InputText id="NostrMetadataBanner" autocomplete="off" @bind-Value="project.Metadata.Banner" class="form-control" placeholder="Enter the URL for the project banner image" disabled="@nostrMetadataCreated" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="NostrMetadataPicture" class="form-label d-flex align-items-center">
                            <Icon IconName="image" class="me-2" />
                            Image
                        </label>
                        <div class="input-group">
                            <InputText id="NostrMetadataPicture" autocomplete="off" @bind-Value="project.Metadata.Picture" class="form-control" placeholder="Enter the URL for the project logo or profile picture" disabled="@nostrMetadataCreated" />
                        </div>
                    </div>
                    <hr class="horizontal light mt-3">

                    <div class="card info-card card-body mt-4 d-flex justify-content-between align-items-center flex-row">
                        <span class="text-muted">Click on the button to proceed to the next step.</span>
                        <button type="submit" class="btn btn-border-success" @onclick="() => SetActiveTab(2)"><span>Next</span></button>
                    </div>
                </EditForm>
            </div>
        </div>

        <div class="col-lg-5 col-12">
            <div class="card w-100 project-card mt-4">
                <a class="d-block position-relative">
                    <div class="banner-container">
                        <img class="banner-image" src="@(string.IsNullOrEmpty(project.Metadata?.Banner) ? "/assets/img/no-image.jpg" : project.Metadata.Banner)"
                             alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                        <div class="info-card border-0 p-3 text-white rounded-3 hover-effect flex-fill position-absolute top-0 end-0 m-2">Project Preview</div>
                        <div class="profile-container">
                            <img class="profile-image" src="@(string.IsNullOrEmpty(project.Metadata?.Picture) ? "/assets/img/no-image.jpg" : project.Metadata.Picture)"
                                 alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                        </div>
                    </div>
                </a>
                <div class="card-body pb-0">
                    <div class="d-flex align-items-center mb-4">
                        <Icon IconName="view" Height="24" Width="24"></Icon>
                        <div class="h-100 ms-3">
                            <h5 class="mb-0 font-weight-bolder">@(string.IsNullOrEmpty(project.Metadata?.Name) ? "Name" : project.Metadata.Name)</h5>
                        </div>
                    </div>
                    <p class="mb-0 line-clamp-3">@(string.IsNullOrEmpty(project.Metadata?.About) ? "About" : ConvertToMarkupString(project.Metadata.About))</p>
                </div>
                <div class="card-footer pt-0">
                    <hr class="horizontal light mt-3">
                    <span role="button" class="d-flex align-items-center btn btn-border w-100-m">
                        <Icon IconName="view-project" Height="24" Width="24"></Icon>
                        <div class="h-100 ms-3">
                            <span class="mb-0 font-weight-bolder text-primary">View Project</span>
                        </div>
                    </span>
                </div>
            </div>


        </div>


    </div>
}



@if (activeTab == 2)
{
    <div class="card card-body mt-4">
        <EditForm Model="project">
            <!-- Stages List -->


            <div class="row g-4">
                <!-- Project Identifier -->
                <div class="col-md-6">
                    <label for="angorFeeKey" class="form-label">Project identifier</label>
                    <InputText id="angorFeeKey" @bind-Value="project.ProjectInfo.ProjectIdentifier"
                               class="form-control" placeholder="Enter angor fee key" readonly disabled="@nostrApplicationSpecificDataCreated" />
                </div>

                <!-- Founder Key -->
                <div class="col-md-6">
                    <label for="founderKey" class="form-label">Founder Key</label>
                    <InputText id="founderKey" @bind-Value="project.ProjectInfo.FounderKey"
                               class="form-control" placeholder="Enter founder key" readonly disabled="@nostrApplicationSpecificDataCreated" />
                </div>

                <!-- Start Date, Penalty Date, Expiry Date -->
                <div class="col-md-4">
                    <label for="startDate" class="form-label">Start Date</label>
                    <InputDate id="startDate" @bind-Value="project.ProjectInfo.StartDate" class="form-control" disabled="@nostrApplicationSpecificDataCreated" />
                </div>
                <div class="col-md-4">
                    <label for="penaltyDays" class="form-label">Penalty Days</label>
                    <InputNumber id="penaltyDays" @bind-Value="project.ProjectInfo.PenaltyDays" class="form-control" disabled="@nostrApplicationSpecificDataCreated" />
                </div>
                <div class="col-md-4">
                    <label for="expiryDate" class="form-label">Expiry Date</label>
                    <InputDate id="expiryDate" @bind-Value="project.ProjectInfo.ExpiryDate" class="form-control" disabled="@nostrApplicationSpecificDataCreated" />
                </div>

                <!-- Target Amount -->
                <div class="col-md-12">
                    <label for="targetAmount" class="form-label">Target Amount</label>
                    <InputNumber id="targetAmount" @bind-Value="project.ProjectInfo.TargetAmount"
                                 class="form-control" placeholder="Enter target amount" disabled="@nostrApplicationSpecificDataCreated" />
                </div>
            </div>
            <!-- Presets for Stages -->
            <div class="card card-body mt-4 info-card">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <button class="btn btn-border-success" @onclick="ToggleStageMode">
                        @(isPresetMode ? "Switch to Manual Helper" : "Switch to Presets")
                    </button>
                </div>

                @if (isPresetMode)
                {
                    <div class="mb-3">
                        <label for="stagePreset" class="form-label">Select Stage Preset</label>
                        <select id="stagePreset" class="form-control" @onchange="OnStagePresetChange">
                            <option value="">Select a preset...</option>
                            <option value="preset1">Preset 1: 3 Stages (10%, 30%, 60%)</option>
                            <option value="preset2">Preset 2: 4 Stages (25%, 25%, 25%, 25%)</option>
                            <option value="preset3">Preset 3: 3 Stages (60%, 20%, 20%)</option>
                        </select>
                    </div>
                }
                else
                {
                    <div class="row g-4">
                        <div class="col-md-6">
                            <label for="totalDuration" class="form-label">Total Project Duration (in days)</label>
                            <InputNumber id="totalDuration" @bind-Value="totalDuration" class="form-control" placeholder="Enter total duration in days" />
                        </div>
                        <div class="col-md-6">
                            <label for="numberOfStages" class="form-label">Number of Stages</label>
                            <InputNumber id="numberOfStages" @bind-Value="numberOfStages" class="form-control" placeholder="Enter number of stages" />
                        </div>
                    </div>
                    <button type="button" class="btn btn-border-success mt-3" @onclick="GenerateSmartStages">Generate Stages</button>
                }
            </div>



                 <div class="d-flex align-items-center justify-content-between flex-wrap mt-4 mb-4">

                    <div class="d-flex align-items-center hover-effect">
                        <span class="user-select-none animate-rotate">
                            <i>
                                <Icon IconName="list" Height="32" Width="32" />
                            </i>
                        </span>
                        <div class="h-100 ms-3">
                            <h5 class="mb-0 font-weight-bolder">
                                Stages
                            </h5>
                        </div>
                    </div>

                </div>
 
            @foreach (var stage in project.ProjectInfo.Stages)
            {
                <div class="info-card stage-form-row">
                    <div class="stage-form-group">
                        <label class="stage-form-label">Stage @(project.ProjectInfo.Stages.IndexOf(stage) + 1) Amount (%)</label>
                        <InputNumber @bind-Value="stage.AmountToRelease"
                                     class="form-control"
                                     placeholder="Enter amount in %"
                                     min="1" max="100" step="1"
                                     disabled="@nostrApplicationSpecificDataCreated" />
                    </div>

                    <div class="stage-form-group">
                        <label class="stage-form-label">Release Date</label>
                        <InputDate @bind-Value="stage.ReleaseDate"
                                   class="form-control"
                                   disabled="@nostrApplicationSpecificDataCreated" />
                    </div>

                    <div class="stage-form-actions">
                        <button type="button"
                                class="btn btn-border-danger"
                                @onclick="() => RemoveStage(stage)">
                            Remove
                        </button>
                    </div>
                </div>

                @if (project.ProjectInfo.Stages.IndexOf(stage) > 0)
                {
                    var previousStage = project.ProjectInfo.Stages[project.ProjectInfo.Stages.IndexOf(stage) - 1];
                    var daysBetween = (stage.ReleaseDate - previousStage.ReleaseDate).Days;
                    <div class="stage-days-info">
                        Days since last stage: @daysBetween days
                    </div>
                }
            }

            <button type="button" class="btn btn-border-success mt-3" @onclick="AddStage" disabled="@nostrApplicationSpecificDataCreated">Add Stage</button>
          
            <hr class="horizontal light mt-3">

            <div class="card info-card card-body mt-4">
                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-border-warning" @onclick="() => SetActiveTab(1)">Previous</button>
                    <button type="submit" class="btn btn-border-success" @onclick="() => SetActiveTab(3)">Next</button>
                </div>
            </div>
        </EditForm>
   
    </div>
}

@if (activeTab == 3)
{
    <div class="card card-body mt-4">

        <div class="row mb-4 slide-up">
            <div class="d-flex align-items-center justify-content-between flex-wrap">

                <div class="d-flex align-items-center hover-effect">
                    <span class="user-select-none animate-rotate">
                        <i>
                            <Icon IconName="addresses" Height="32" Width="32" />
                        </i>
                    </span>
                    <div class="h-100 ms-3">
                        <h5 class="mb-0 font-weight-bolder">
                            Project Details
                        </h5>
                    </div>
                </div>

            </div>
        </div>

        <div class="row g-4 animate-fade-in mt-4">
            <div class="col-md-12 col-lg-12 d-flex">
                <div class="info-card p-3 rounded-3 border hover-effect flex-fill">
                    <div class="d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="name" />
                        </i>
                        <p class="card-text ms-2 text-break"><strong>Project Name:</strong> @project.Metadata.Name</p>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-lg-12 d-flex">
                <div class="info-card p-3 rounded-3 border hover-effect flex-fill">
                    <div class="d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="about" />
                        </i>
                        <p class="card-text ms-2 text-break"><strong>Project About:</strong> @((MarkupString)project.Metadata.About)</p>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-lg-12 d-flex">
                <div class="info-card p-3 rounded-3 border hover-effect flex-fill">
                    <div class="d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="identifier" />
                        </i>
                        <p class="card-text ms-2 text-break"><strong>Project Identifier:</strong> @project.ProjectInfo.ProjectIdentifier</p>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-lg-12 d-flex">
                <div class="info-card p-3 rounded-3 border hover-effect flex-fill">
                    <div class="d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="key" />
                        </i>
                        <p class="card-text ms-2 text-break"><strong>Founder Key:</strong> @project.ProjectInfo.FounderKey</p>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-lg-6 d-flex">
                <div class="info-card p-3 rounded-3 border hover-effect flex-fill">
                    <div class="d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="balance" />
                        </i>
                        <p class="card-text ms-2 text-break"><strong>Target Amount:</strong> @project.ProjectInfo.TargetAmount @network.CoinTicker</p>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-lg-6 d-flex">
                <div class="info-card p-3 rounded-3 border hover-effect flex-fill">
                    <div class="d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="calendar" />
                        </i>
                        <p class="card-text ms-2 text-break"><strong>Start Date:</strong> @project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") (in @((project.ProjectInfo.StartDate - DateTime.Now).Days) days)</p>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-lg-6 d-flex">
                <div class="info-card p-3 rounded-3 border hover-effect flex-fill">
                    <div class="d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="calendar" />
                        </i>
                        <p class="card-text ms-2 text-break"><strong>Expiry Date:</strong> @project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy") (in @((project.ProjectInfo.ExpiryDate - DateTime.Now).Days) days)</p>
                    </div>
                </div>
            </div>

            <div class="col-md-12 col-lg-6 d-flex">
                <div class="info-card p-3 rounded-3 border hover-effect flex-fill">
                    <div class="d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="sad-circle" />
                        </i>
                        <p class="card-text ms-2 text-break"><strong>Penalty Days:</strong> @project.ProjectInfo.PenaltyDays days</p>
                    </div>
                </div>
            </div>
        </div>




        <div class="row mt-4 slide-up">
            <div class="d-flex align-items-center justify-content-between flex-wrap">

                <div class="d-flex align-items-center hover-effect">
                    <span class="user-select-none animate-rotate">
                        <i>
                            <Icon IconName="list" Height="32" Width="32" />
                        </i>
                    </span>
                    <div class="h-100 ms-3">
                        <h5 class="mb-0 font-weight-bolder">
                            Stages
                        </h5>
                    </div>
                </div>

            </div>
        </div>


        <div class="row g-4 stages-list animate-fade-in mt-4">
            @foreach (var stage in project.ProjectInfo.Stages)
            {
                <div class="col-md-12 col-lg-6 d-flex">
                    <div class="info-card p-3 hover-effect flex-fill">
                        <div class="info-item d-flex align-items-center">
                            <Icon IconName="percent"></Icon>
                            <p class="card-text ms-2 text-break"><strong>Stage Percent:</strong> @stage.AmountToRelease%</p>
                        </div>
                        <div class="info-item d-flex align-items-center">
                            <Icon IconName="calendar"></Icon>
                            <p class="card-text ms-2 text-break"><strong>Stage Date:</strong> @stage.ReleaseDate.ToString("dd/MM/yyyy") (@((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after project starts)</p>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="action-card founder-card animate-fade-in">
            <i class="me-2">
                <Icon IconName="list" Height="42" Width="42" Class="action-icon" />
            </i>

            <div class="mb-4 text-center animate-fade-in-delayed">
                <h5>Current Step</h5>
                <p>@GetProgressMessage()</p>
            </div>

            <div class="action-buttons d-flex justify-content-center item-center mt-4">
                <button class="btn btn-border-success me-2" @onclick="ConfirmFinalizeNostrProfileCreation" disabled="@nostrMetadataCreated">
                    @if (createProfileSpinner)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Creating Nostr Profile...</span>
                    }
                    else
                    {
                        <span>Create Nostr Profile</span>
                    }
                </button>

                <button class="btn btn-border-success me-2" @onclick="ConfirmFinalizeProjectInfoCreation" disabled="@(!nostrMetadataCreated || nostrApplicationSpecificDataCreated)">
                    @if (createApplicationDataSpinner)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Creating Project Info...</span>
                    }
                    else
                    {
                        <span>Create Project Info</span>
                    }
                </button>

                <button class="btn btn-border-warning" @onclick="CreatProjectTransactionAnCheckPassword" disabled="@(creatProjectSpinner || !nostrApplicationSpecificDataCreated || !nostrMetadataCreated)">
                    @if (creatProjectSpinner)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Create Project...</span>
                    }
                    else
                    {
                        <span>Create Project</span>
                    }
                </button>
            </div>
        </div>
        <hr class="horizontal light mt-3">

        <div class="card info-card card-body mt-4 animate-fade-in-delayed">
            <div class="d-flex justify-content-between">
                <button class="btn btn-border-warning" @onclick="() => SetActiveTab(2)">Previous</button>
            </div>
        </div>
    </div>
}


@if (showCreateModal)
{
    <div class="modal-wrapper">
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content modern-modal">
                    <div class="modal-header border-0 pb-0">
                        <div class="d-flex align-items-center">
                            <Icon IconName="confirmation" Height="32" Width="32" class="me-2" />
                            <h5 class="modal-title">Project Confirmation</h5>
                        </div>
                        <button class="btn-close-custom" @onclick="() => showCreateModal = false">
                            <Icon IconName="close-circle" Height="24" Width="24" />
                        </button>
                    </div>
                    <div class="modal-body modal-body-scroll py-4">
                        <div class="mb-4">
                            <div class="info-card mb-3">
                                <Icon IconName="project" Height="24" Width="24" class="me-2" />
                                <div class="info-label">Project ID</div>
                                <div class="info-value text-truncate" title="@project.ProjectInfo.ProjectIdentifier">
                                    @project.ProjectInfo.ProjectIdentifier
                                </div>
                            </div>
                            <div class="d-flex justify-content-between mb-3">
                                <div class="info-card flex-grow-1 me-2">
                                    <div class="info-label">Target Amount</div>
                                    <div class="info-value text-success">@project.ProjectInfo.TargetAmount @network.CoinTicker</div>
                                </div>
                                <div class="info-card flex-grow-1 ms-2">
                                    <div class="info-label">Miner Fee</div>
                                    <div class="info-value text-warning">@Money.Satoshis(signedTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</div>
                                </div>
                            </div>
                        </div>
                        <div class="fee-section mb-4">
                            <h6 class="section-title">
                                <Icon IconName="fee" Height="20" Width="20" class="me-2" />
                                Adjust Fee Rate
                            </h6>
                            <input type="range" class="form-range custom-range" id="feeRange" @bind="feeData.FeePosition" @oninput="FeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                            <div class="fee-info text-muted">Estimated confirmation in @feeData.SelectedFeeEstimation.Confirmations blocks (@feeData.SelectedFeeEstimation.FeeRate sats/byte)</div>
                        </div>
                        <div class="stages-section">
                            <h6 class="section-title">
                                <Icon IconName="stages" Height="20" Width="20" class="me-2" />
                                Project Stages
                            </h6>
                            <ul class="list-unstyled">
                                @foreach (var stage in project.ProjectInfo.Stages)
                                {
                                    <li>
                                        <strong>Stage Percent:</strong> @stage.AmountToRelease %<br>
                                        <strong>Stage Date:</strong> @stage.ReleaseDate.ToString("dd/MM/yyyy") (in @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days)
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="confirmation-section mt-4 text-center">
                            <Icon IconName="alert" Height="24" Width="24" class="mb-2" />
                            <p class="confirmation-text">Please review the project details carefully before confirming.</p>
                        </div>
                    </div>
                    <div class="modal-footer border-0 pt-0">
                        <button class="btn btn-border-success" @onclick="Send" disabled="@publishProjectSpinner">
                            @if (publishProjectSpinner)
                            {
                                <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>Confirm Project</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (showConfirmationModal)
{
    <div class="modal-wrapper">
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content modern-modal">
                    <div class="modal-header border-0 pb-0">
                        <h5 class="modal-title">Confirmation</h5>
                        <button class="btn-close-custom" @onclick="CloseConfirmationModal">
                            <Icon IconName="close-circle" Height="24" Width="24" />
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>@confirmationMessage</p>
                    </div>
                    <div class="modal-footer border-0 pt-0">
                        <button class="btn btn-border" @onclick="CloseConfirmationModal">Cancel</button>
                        <button class="btn btn-border-success" @onclick="PerformFinalizeAction">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}






@code {

    private bool sendConfirmModal;
    private bool showCreateModal;
    private bool isPresetMode = true;
    private bool showConfirmationModal;
    private string confirmationMessage;
    private Action finalizeAction;

    private bool showResetConfirmation;
    private string resetTarget;

    Transaction unsignedTransaction;
    TransactionInfo signedTransaction;

    private readonly FeeData feeData = new();

    private FounderProject project = new();

    private readonly Dictionary<string, (int[] Percentages, int IntervalDays)> presets = new()
    {
        { "preset1", (new[] { 10, 30, 60 }, 10) },
        { "preset2", (new[] { 25, 25, 25, 25 }, 10) },
        { "preset3", (new[] { 60, 20, 20 }, 15) }
    };


    private int activeTab = 1;

    private int totalDuration;
    private int numberOfStages;
    private bool isValid = true;
    private string errorMessage;

    bool createProfileSpinner;
    bool createApplicationDataSpinner;
    bool creatProjectSpinner;
    bool publishProjectSpinner;

    bool nostrMetadataCreated;
    bool nostrApplicationSpecificDataCreated;

    protected override async Task OnInitializedAsync()
    {
        if (!hasWallet)
        {
            return;
        }

        var projects = storage.GetFounderProjects();

        var keys = _walletStorage.GetFounderKeys();

        // if CreationTransactionId is not null this means the project was published to the blockchain
        var startedProjects = projects.Where(p => !string.IsNullOrEmpty(p.CreationTransactionId)).ToList();

        if (startedProjects.Count >= keys.Keys.Count)
        {
            errorMessage = "All founder keys have been used for this wallet!";
            isValid = false;
            return;
        }

        var latestProject = startedProjects.MaxBy(p => p.ProjectIndex);
        var projectsKeys = _derivationOperations.GetProjectKey(keys, latestProject?.ProjectIndex + 1 ?? 1);

        project = projects.FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier)
                  ?? CreateDefaultProject(projectsKeys);

        if (network.NetworkType == NetworkType.Testnet)
        {
            PopulateTestnetData(project);
        }

        // save project to storage immediately if new
        if (!projects.Any(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier))
        {
            storage.AddFounderProject(project);
        }

        // check if the project was already published to nostr
        nostrMetadataCreated = project.NostrProfileCreated;
        nostrApplicationSpecificDataCreated = !string.IsNullOrEmpty(project.ProjectInfoEventId);

        // Select a preset
        if (!project.ProjectInfo.Stages.Any())
        {
            isPresetMode = true;
            OnStagePresetChange(new ChangeEventArgs { Value = "preset1" });
        }
    }


    private string GetActiveClass(int tabNumber)
    {
        if (tabNumber == 2)
        {
            if (nostrMetadataCreated && !nostrApplicationSpecificDataCreated)
            {
                if (!project.ProjectInfo.Stages.Any())
                {
                    // to make it easier for testing we pre add some stages
                    project.ProjectInfo.Stages = new List<Stage>
                    {
                        new() { AmountToRelease = 10, ReleaseDate = DateTime.UtcNow }, //.AddDays(10) }, during testing we often need to spend a stage immediately
                        new() { AmountToRelease = 30, ReleaseDate = DateTime.UtcNow.AddDays(20) },
                        new() { AmountToRelease = 60, ReleaseDate = DateTime.UtcNow.AddDays(30) }
                    };
                }
            }
        }

        return activeTab == tabNumber ? "active" : "";
    }

    private void ConfirmFinalizeNostrProfileCreation()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr profile already created");
            return;
        }

        if (!ValidateInputData())
        {
            // If validation fails, return early
            return;
        }

        confirmationMessage = "Are you sure you want to create the Nostr Profile?";
        finalizeAction = FinalizeNostrProfileCreation;
        showConfirmationModal = true;
    }

    private async void ConfirmFinalizeProjectInfoCreation()
    {
        if (nostrApplicationSpecificDataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr project already created");
            return;
        }

        confirmationMessage = "Are you sure you want to deploy the project info to Nostr?.";
        finalizeAction = FinalizeProjectInfoCreation;
        showConfirmationModal = true;
    }

    private void CloseConfirmationModal()
    {
        showConfirmationModal = false;
        StateHasChanged();
    }

    private void PerformFinalizeAction()
    {
        showConfirmationModal = false;
        finalizeAction.Invoke();
    }

    private async void FinalizeNostrProfileCreation()
    {
        await CreatNostrProfileAnCheckPassword();
    }

    private async void FinalizeProjectInfoCreation()
    {
        await CreatProjectInfoOnNostrAnCheckPassword();
    }

    private async Task CreatNostrProfileAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatNostrProfile);
        }
        else
        {
            await CreatNostrProfile();
        }
    }

    private async Task CreatNostrProfile()
    {
        createProfileSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectIndex);

            var resultId = await _RelayService.CreateNostrProfileAsync(
                project.Metadata.ToNostrMetadata(),
                NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes()),
                _ =>
                {
                    createProfileSpinner = false;

                    if (!_.Accepted)
                    {
                        notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!"); //TODO add export project info
                    }

                    if (nostrMetadataCreated == false)
                    {
                        nostrMetadataCreated = true;
                        project.NostrProfileCreated = true;
                        storage.UpdateFounderProject(project);
                    }

                    StateHasChanged();
                });


            if (string.IsNullOrEmpty(resultId))
            {
                notificationComponent.ShowErrorMessage("Failed to create nostr profile");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, "Error creating nostr profile.");
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            createProfileSpinner = false;
        }
    }

    private async Task CreatProjectInfoOnNostrAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectInfoOnNostr);
        }
        else
        {
            await CreatProjectInfoOnNostr();
        }
    }

    private async Task CreatProjectInfoOnNostr()
    {
        createApplicationDataSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectIndex);

            var nostrKeyHex = Encoders.Hex.EncodeData(nostrKey.ToBytes());

            var resultId = await _RelayService.AddProjectAsync(project.ProjectInfo, nostrKeyHex,
                _ =>
                {
                    createApplicationDataSpinner = false;

                    if (!_.Accepted)
                        notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!"); //TODO add export project info

                    if (nostrApplicationSpecificDataCreated == false)
                    {
                        nostrApplicationSpecificDataCreated = true;
                        project.ProjectInfoEventId = _.EventId;
                        storage.UpdateFounderProject(project);
                    }

                    StateHasChanged();
                });

            // todo: do we actually need this? does it actualy work to delete?
            if (string.IsNullOrEmpty(resultId))
            {
                createApplicationDataSpinner = false;
                await _RelayService.DeleteProjectAsync(resultId, nostrKeyHex);
                notificationComponent.ShowErrorMessage("Failed to create application data");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            createApplicationDataSpinner = false;
        }
    }

    private async Task CreatProjectTransactionAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectTransaction);
        }
        else
        {
            await CreatProjectTransaction();
        }
    }

    private async Task CreatProjectTransaction()
    {
        creatProjectSpinner = true;
        StateHasChanged();

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var accountInfo = storage.GetAccountInfo(network.Name);

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            unsignedTransaction = _founderTransactionActions.CreateNewProjectTransaction(project.ProjectInfo.FounderKey, _derivationOperations.AngorKeyToScript(project.ProjectInfo.ProjectIdentifier), NetworkConfiguration.AngorCreateFeeSats, NetworkConfiguration.NostrEventIdKeyType, project.ProjectInfoEventId);

            signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation);

            showCreateModal = true;
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            creatProjectSpinner = false;
            StateHasChanged();
        }
    }

    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showCreateModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();
                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);
                    var unconfirmedInfo = _cacheStorage.GetUnconfirmedInboundFunds();

                    signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        publishProjectSpinner = true;
        StateHasChanged();

        try
        {
            showCreateModal = false;

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            var transactionId = signedTransaction.Transaction.GetHash().ToString();

            if (string.IsNullOrEmpty(transactionId))
            {
                notificationComponent.ShowErrorMessage("Transaction ID is missing. Cannot store the project.");
                return;
            }

            project.CreationTransactionId = transactionId;
            storage.UpdateFounderProject(project);

            NavigationManager.NavigateTo($"/view/{project.ProjectInfo.ProjectIdentifier}");
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            publishProjectSpinner = false;
            passwordComponent.ClearPassword();
            StateHasChanged();
        }
    }

    private void AddStage()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        project.ProjectInfo.Stages.Add(new Stage { ReleaseDate = DateTime.UtcNow });
    }

    private void RemoveStage(Stage stage)
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        project.ProjectInfo.Stages.Remove(stage);

    }

    public MarkupString ConvertToMarkupString(string input)
    {
        string sanitizedInput = HtmlStripperService.StripHtmlTags(input);
        return new MarkupString(sanitizedInput);
    }

    private void SetActiveTab(int tabNumber)
    {
        if (!nostrMetadataCreated)
        {
            // Save the project before switching tabs
            storage.UpdateFounderProject(project);
        }

        activeTab = tabNumber;
        StateHasChanged();
    }

    private string GetProgressMessage()
    {
        if (!nostrMetadataCreated)
        {
            return "Step 1: Create Nostr Profile";
        }

        if (!nostrApplicationSpecificDataCreated)
        {
            return "Step 2: Enter Project Info";
        }

        return "Step 3: Finalize Project Creation";
    }


    private void OnStagePresetChange(ChangeEventArgs e)
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Changes not allowed after the profile was created.");
            return;
        }

        var selectedPreset = e.Value?.ToString();

        if (selectedPreset != null && presets.TryGetValue(selectedPreset, out var preset))
        {
            project.ProjectInfo.Stages.Clear();
            project.ProjectInfo.Stages = GenerateStages(preset.Percentages, preset.IntervalDays);
        }
        else
        {
            notificationComponent.ShowErrorMessage("Invalid preset selected.");
            project.ProjectInfo.Stages.Clear();
        }

        StateHasChanged();
    }

    private bool ValidateInputData()
    {
        var isTestnet = this.network.NetworkType == NetworkType.Testnet;

        if (!isTestnet)
        {
            // test that need to happen in production will go here

            if (project.ProjectInfo.PenaltyDays < 10)
            {
                notificationComponent.ShowErrorMessage("Project penalty must be higher than 10 days");
                return false;
            }

            if (project.ProjectInfo.Stages.Count() < 3)
            {
                notificationComponent.ShowErrorMessage("There must be at least 3 stages");
                return false;
            }

            if (project.ProjectInfo.TargetAmount < (decimal)0.1)
            {
                // temporary limit to not allow users to put too much in an Angor contract

                notificationComponent.ShowErrorMessage("Project target amount must be higher than 0.1 BTC");
                return false;
            }

            if (project.ProjectInfo.ExpiryDate < project.ProjectInfo.StartDate)
            {
                notificationComponent.ShowErrorMessage("Project must expire after the start date");
                return false;
            }

            if (project.ProjectInfo.Stages.Any() && project.ProjectInfo.ExpiryDate < project.ProjectInfo.Stages.Last().ReleaseDate)
            {
                notificationComponent.ShowErrorMessage("Project expiry date must be after the last stage date");
                return false;
            }

            if (project.ProjectInfo.StartDate < DateTime.UtcNow)
            {
                notificationComponent.ShowErrorMessage("Project must start in the future");
                return false;
            }
        }


        if (project.Metadata is null)
        {
            notificationComponent.ShowErrorMessage("Nostr profile must be filled");
            return false;
        }

        if (string.IsNullOrEmpty(project.Metadata.Name))
        {
            notificationComponent.ShowErrorMessage("Nostr profile name must be filled");
            return false;
        }

        if (project.ProjectInfo.Stages.Sum(s => s.AmountToRelease) != 100)
        {
            notificationComponent.ShowErrorMessage("The stages must sum to 100%");
            return false;
        }

        var projects = storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();

        if (projects.Any(a => project.ProjectInfo.ProjectIdentifier == a.ProjectInfo.ProjectIdentifier))
        {
            notificationComponent.ShowErrorMessage("This wallet already has a project with this index");
            return false;
        }

        var prev = DateTime.UtcNow;
        foreach (var stage in project.ProjectInfo.Stages)
        {
            if ((stage.ReleaseDate - prev).Days < 0)
            {
                notificationComponent.ShowErrorMessage("Stages must be chronological");
                return false;
            }

            prev = stage.ReleaseDate;
        }

        // If all checks pass, return true
        return true;
    }

    private List<Stage> GenerateStages(int[] percentages, int intervalDays)
    {
        var stages = new List<Stage>();
        var currentDate = project.ProjectInfo.StartDate;

        for (int i = 0; i < percentages.Length; i++)
        {
            stages.Add(new Stage
                {
                    AmountToRelease = percentages[i],
                    ReleaseDate = currentDate
                });

            if (i > 0)
            {
                var daysBetween = (currentDate - stages[i - 1].ReleaseDate).Days;
                _Logger.LogInformation($"Days between stage {i} and {i + 1}: {daysBetween} days");
            }

            currentDate = currentDate.AddDays(intervalDays);
        }

        return stages;
    }

    private void GenerateSmartStages()
    {
        if (totalDuration <= 0 || numberOfStages <= 0)
        {
            notificationComponent.ShowErrorMessage("Please enter valid values for duration and number of stages.");
            return;
        }

        project.ProjectInfo.Stages.Clear(); // Reset existing stages

        var stageDuration = totalDuration / numberOfStages;
        var stagePercentage = 100m / numberOfStages;

        for (int i = 0; i < numberOfStages; i++)
        {
            project.ProjectInfo.Stages.Add(new Stage
                {
                    AmountToRelease = stagePercentage,
                    ReleaseDate = project.ProjectInfo.StartDate.AddDays(i * stageDuration)
                });
        }

        StateHasChanged();
    }

    private void ToggleStageMode()
    {
        isPresetMode = !isPresetMode; // Toggle between Presets and Automatic
        StateHasChanged(); // Update the UI
    }

    private readonly string[] spacePhotos = new[]
    {
        "https://images-assets.nasa.gov/image/hubble-observes-one-of-a-kind-star-nicknamed-nasty_17754652960_o/hubble-observes-one-of-a-kind-star-nicknamed-nasty_17754652960_o~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/PIA22081/PIA22081~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e000282/GSFC_20171208_Archive_e000282~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001894/GSFC_20171208_Archive_e001894~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/PIA08216/PIA08216~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001465/GSFC_20171208_Archive_e001465~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/hubble-sees-the-wings-of-a-butterfly-the-twin-jet-nebula_20283986193_o/hubble-sees-the-wings-of-a-butterfly-the-twin-jet-nebula_20283986193_o~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/PIA14417/PIA14417~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/PIA05062/PIA05062~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e001518/GSFC_20171208_Archive_e001518~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/carina_nebula/carina_nebula~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/PIA25433/PIA25433~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/PIA15415/PIA15415~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e002086/GSFC_20171208_Archive_e002086~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/PIA14731/PIA14731~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/GSFC_20171208_Archive_e002020/GSFC_20171208_Archive_e002020~thumb.jpg?as=webp",
        "https://images-assets.nasa.gov/image/0203048/0203048~thumb.jpg?as=webp"
    };

    private FounderProject CreateDefaultProject(FounderKeys projectsKeys)
    {
        return new FounderProject
            {
                ProjectIndex = projectsKeys.Index,
                Metadata = new ProjectMetadata(),
                ProjectInfo = new ProjectInfo
                {
                    FounderKey = projectsKeys.FounderKey,
                    FounderRecoveryKey = projectsKeys.FounderRecoveryKey,
                    ProjectIdentifier = projectsKeys.ProjectIdentifier,
                    NostrPubKey = projectsKeys.NostrPubKey,
                    StartDate = DateTime.UtcNow.AddMinutes(2), // to allow testing and spending immediately
                    PenaltyDays = 90,
                    ExpiryDate = DateTime.UtcNow.AddDays(120),
                    TargetAmount = 50
                }
            };
    }

    private void PopulateTestnetData(FounderProject project)
    {
        var random = new Random();

        // Set random photos for testnet
        if (string.IsNullOrEmpty(project.Metadata.Banner))
        {
            project.Metadata.Banner = spacePhotos[random.Next(spacePhotos.Length)];
        }

        if (string.IsNullOrEmpty(project.Metadata.Picture))
        {
            project.Metadata.Picture = spacePhotos[random.Next(spacePhotos.Length)];
        }
    }
}