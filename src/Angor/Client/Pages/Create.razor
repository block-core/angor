@page "/create"
@using Angor.Shared.Models
@using Angor.Shared
@using Angor.Client.Storage
@using Blockcore.Consensus.TransactionInfo
@using Angor.Shared.ProtocolNew
@using Angor.Shared.Services
@using Blockcore.NBitcoin
@using Nostr.Client.Messages
@using Angor.Client.Models
@using Nostr.Client.Messages.Metadata

@inherits BaseComponent
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject NavigationManager NavigationManager
@inject IWalletOperations _WalletOperations
@inject IRelayService _RelayService
@inject ILogger<Create> _Logger;

@inject IFounderTransactionActions _founderTransactionActions

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container mt-4">
    <h1 class="mb-4">Create New Project</h1>

    <NotificationComponent @ref="notificationComponent"/>
    <PasswordComponent @ref="passwordComponent" />

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <button class="nav-link @GetActiveClass(1)" @onclick="() => activeTab = 1">
                <span class="oi oi-browser" aria-hidden="true"></span>  Project Metadata
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link @GetActiveClass(2)" @onclick="() => activeTab = 2" disabled="@(!nostrMetadataCreated)">
                <span class="oi oi-list" aria-hidden="true"></span>  Project Info
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link @GetActiveClass(3)" @onclick="() => activeTab = 3" disabled="@(!nostrApplicationSpecificDataCreated)">
                <span class="oi oi-globe" aria-hidden="true"></span>  On Chain
            </button>
        </li>
    </ul>
    
    <br/>

    @if (activeTab == 1)
    {
        <EditForm Model="project.Metadata" OnValidSubmit="CreatNostrProfileAnCheckPassword">
            <div class="mb-3">
                <label for="NostrMetadataName" class="form-label">Project name</label>
                <InputText id="NostrMetadataName" @bind-Value="project.Metadata.Name" class="form-control" placeholder="Enter the project name" />
            </div>

            <div class="mb-3">
                <label for="NostrMetadataAbout" class="form-label">About</label>
                <InputTextArea id="NostrMetadataAbout" @bind-Value="project.Metadata.About" class="form-control" placeholder="Enter details about the project" />
            </div>

            <div class="mb-3">
                <label for="NostrMetadataName" class="form-label">Project website</label>
                <InputText id="NostrMetadataName" @bind-Value="project.Metadata.Website" class="form-control" placeholder="Enter the project name" />
            </div>

            <div class="mb-3">
                <label for="NostrMetadataBanner" class="form-label">Banner</label>
                <InputText id="NostrMetadataBanner" @bind-Value="project.Metadata.Banner" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="NostrMetadataNip05" class="form-label">Nip 05</label>
                <InputText id="NostrMetadataNip05" @bind-Value="project.Metadata.Nip05" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="NostrMetadataNip57" class="form-label">Nip 57 (zaps)</label>
                <InputText id="NostrMetadataNip57" @bind-Value="project.Metadata.Nip57" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="NostrMetadataPicture" class="form-label">Image</label>
                <InputText id="NostrMetadataPicture" @bind-Value="project.Metadata.Picture" class="form-control" placeholder="Select a project picture" />
            </div>

            <!-- Save & Publish Buttons -->
            <div class="mb-3">
                <button type="submit" class="btn btn-success" disabled="@(createProfileSpinner || nostrMetadataCreated)">
                    @if (createProfileSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Next...</span>
                    }
                    else
                    {
                        <span>Next</span>
                    }
                </button>
            </div>
        </EditForm>
    }

    @if (activeTab == 2)
    {
        <EditForm Model="project" OnValidSubmit="CreatProjectInfoOnNostrAnCheckPassword">

            <!-- Angor Fee Key -->
            <div class="mb-3">
                <label for="angorFeeKey" class="form-label">Project identifier</label>
                <InputText id="angorFeeKey" @bind-Value="project.ProjectInfo.ProjectIdentifier" class="form-control" placeholder="Enter angor fee key" readonly />
            </div>

            <!-- Founder Key -->
            <div class="mb-3">
                <label for="founderKey" class="form-label">Founder Key</label>
                <InputText id="founderKey" @bind-Value="project.ProjectInfo.FounderKey" class="form-control" placeholder="Enter founder key" readonly />
            </div>

            <!-- Start Date -->
            <div class="mb-3">
                <label for="startDate" class="form-label">Start Date</label>
                <InputDate id="startDate" @bind-Value="project.ProjectInfo.StartDate" class="form-control" />
            </div>

            <!-- Penalty Date -->
            <div class="mb-3">
                <label for="penaltyDays" class="form-label">Penalty Days</label>
                <InputNumber id="penaltyDays" @bind-Value="project.ProjectInfo.PenaltyDays" class="form-control" />
            </div>

            <!-- Expiry Date -->
            <div class="mb-3">
                <label for="expiryDate" class="form-label">Expiry Date</label>
                <InputDate id="expiryDate" @bind-Value="project.ProjectInfo.ExpiryDate" class="form-control" />
            </div>

            <!-- Target Amount -->
            <div class="mb-3">
                <label for="targetAmount" class="form-label">Target Amount</label>
                <InputNumber id="targetAmount" @bind-Value="project.ProjectInfo.TargetAmount" class="form-control" placeholder="Enter target amount" />
            </div>

            <!-- Stages -->
            <h3 class="mb-3">Stages</h3>
            @foreach (var stage in project.ProjectInfo.Stages)
            {
                <div class="mb-3">
                    <label class="form-label">The amount in % to allocate for stage @(project.ProjectInfo.Stages.IndexOf(stage) + 1)</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="stage.AmountToRelease" class="form-control" placeholder="Enter amount to release as a percentage" min="1" max="100" step="1" />
                        <InputDate @bind-Value="stage.ReleaseDate" class="form-control" />
                        <button type="button" class="btn btn-danger" @onclick="() => RemoveStage(stage)">Remove</button>
                    </div>
                </div>
            }

            <button type="button" class="btn btn-primary mb-3" @onclick="AddStage" disabled="@nostrApplicationSpecificDataCreated">Add Stage</button>

            <!-- Save & Publish Buttons -->
            <div class="mb-3">
                <button type="submit" class="btn btn-success" disabled="@(createProfileSpinner || nostrApplicationSpecificDataCreated)">
                    @if (createApplicationDataSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Next...</span>
                    }
                    else
                    {
                        <span>Next</span>
                    }
                </button>
            </div>

        </EditForm>
    }

    @if (activeTab == 3)
    {
        <p class="mb-1"><strong>Project Name:</strong> @project.Metadata.Name</p>
        <p class="mb-1"><strong>Project About:</strong> @project.Metadata.About</p>

        <p class="mb-1"><strong>Project Identifier:</strong> @project.ProjectInfo.ProjectIdentifier</p>
        <p class="mb-1"><strong>Founder Key:</strong> @project.ProjectInfo.FounderKey.Substring(0, 10)...</p> <!-- Display only the first 10 characters -->

        <p class="mb-1"><strong>Target amount:</strong> @project.ProjectInfo.TargetAmount @network.CoinTicker</p>

        <p class="mb-1"><strong>Start date:</strong> @project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") in @((project.ProjectInfo.StartDate - DateTime.Now).Days) days</p>
        <p class="mb-1"><strong>Expiry date:</strong> @project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy") in @((project.ProjectInfo.ExpiryDate - DateTime.Now).Days) days</p>
        <p class="mb-1"><strong>Penalty days:</strong> @project.ProjectInfo.PenaltyDays days</p>

        <h6 class="mt-3 mb-2">Stages</h6>
        @foreach (var stage in project.ProjectInfo.Stages)
        {
            <div style="border-top: 1px solid #dee2e6; padding-top: 10px; margin-top: 10px; font-size: 0.85em;">
                <p class="mb-1"><strong>Stage percent:</strong> @stage.AmountToRelease % </p>
                <p class="mb-1"><strong>Stage date:</strong> @stage.ReleaseDate.ToString("dd/MM/yyyy") - @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after project starts </p>
            </div>
        }

        <button type="button" class="btn btn-success mb-3" @onclick="CreatProjectTransactionAnCheckPassword" disabled="@creatProjectSpinner">
            @if (creatProjectSpinner)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Next...</span>
            }
            else
            {
                <span>Next</span>
            }
        </button>
    }


    @if (showCreateModal)
    {
        <!-- Confirmation Modal -->
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmation</h5>
                        <button type="button" class="btn-close" @onclick="() => showCreateModal = false" disabled="@publishProjectSpinner"></button>
                    </div>
                    <div class="modal-body modal-body-scroll">
                        <p class="mb-1"><strong>Project Identifier:</strong> @project.ProjectInfo.ProjectIdentifier</p>
                        <p class="mb-1"><strong>Founder Key:</strong> @project.ProjectInfo.FounderKey.Substring(0, 10)...</p> <!-- Display only the first 10 characters -->

                        <p class="mb-1"><strong>Target amount:</strong> @project.ProjectInfo.TargetAmount @network.CoinTicker</p>

                        <p class="mb-1"><strong>Start date:</strong> @project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") in @((project.ProjectInfo.StartDate - DateTime.Now).Days) days</p>
                        <p class="mb-1"><strong>Expiry date:</strong> @project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy") in @((project.ProjectInfo.ExpiryDate - DateTime.Now).Days) days</p>
                        <p class="mb-1"><strong>Penalty days:</strong> @project.ProjectInfo.PenaltyDays days</p>
                        
                        <p class="mb-1"><strong>Miner fee:</strong> @Money.Satoshis(signedTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                        <p class="mb-1"><strong>Angor fee:</strong> @signedTransaction?.Transaction.Outputs.First().Value.ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>

                        <hr>

                        <div class="mb-3">
                            <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                            <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="FeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                        </div>

                        <hr>

                        <h6 class="mt-3 mb-2">Stages</h6>
                        @foreach (var stage in project.ProjectInfo.Stages)
                        {
                            <div style="border-top: 1px solid #dee2e6; padding-top: 10px; margin-top: 10px; font-size: 0.85em;">
                                <p class="mb-1"><strong>Stage percent:</strong> @stage.AmountToRelease % </p>
                                <p class="mb-1"><strong>Stage date:</strong> @stage.ReleaseDate.ToString("dd/MM/yyyy") - @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after project starts </p>
                            </div>
                        }

                        <hr>

                        <p class="mt-3">Are you sure you want to continue?</p>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showCreateModal = false" disabled="@publishProjectSpinner">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="Send" disabled="@publishProjectSpinner">
                            @if (publishProjectSpinner)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Confirm...</span>
                            }
                            else
                            {
                                <span>Confirm</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>

    }
</div>

@code {

    private bool sendConfirmModal;
    private bool showCreateModal;

    Transaction unsignedTransaction;
    TransactionInfo signedTransaction;

    private FeeData feeData = new();

    private FounderProject project = new()
    {
        ProjectInfo = new ProjectInfo
        {
            StartDate = DateTime.UtcNow.AddHours(2),
            PenaltyDays = 90,
            ExpiryDate = DateTime.UtcNow.AddDays(120),
            TargetAmount = 50,
        },
        Metadata = new(),
        CreationTransactionId = null,
    };

    private int activeTab = 1;

    bool createProfileSpinner = false;
    bool createApplicationDataSpinner = false;
    bool creatProjectSpinner = false;
    bool publishProjectSpinner = false;

    bool nostrMetadataCreated = false;
    bool nostrApplicationSpecificDataCreated = false;

    protected override async Task OnInitializedAsync()
    {
        if (hasWallet)
        {
            var projects = storage.GetFounderProjects();
            var keys = _walletStorage.GetFounderKeys();

            if (projects.Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList().Count == keys.Keys.Count)
            {
                notificationComponent.ShowErrorMessage("All founder keys have been used for this wallet!");
                return;
            }

            var latestProject = projects.Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).MaxBy(p => p.ProjectIndex);
            var projectsKeys = _derivationOperations.GetProjectKey(keys, latestProject?.ProjectIndex + 1 ?? 1);

            var fromStorage = projects.FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == projectsKeys.ProjectIdentifier);

            if (fromStorage != null)
            {
                project = fromStorage;

                nostrMetadataCreated = fromStorage.NostrMetadataCreated();
                nostrApplicationSpecificDataCreated = fromStorage.NostrApplicationSpecificDataCreated();
            }
            else
            {
                project.ProjectIndex = projectsKeys.Index;
                project.ProjectInfo.FounderKey = projectsKeys.FounderKey;
                project.ProjectInfo.FounderRecoveryKey = projectsKeys.FounderRecoveryKey;
                project.ProjectInfo.ProjectIdentifier = projectsKeys.ProjectIdentifier;
                project.ProjectInfo.NostrPubKey = projectsKeys.NostrPubKey;
            }
        }
    }

    private string GetActiveClass(int tabNumber)
    {
        if (tabNumber == 2)
        {
            if (nostrMetadataCreated && !nostrApplicationSpecificDataCreated)
            {
                if (!project.ProjectInfo.Stages.Any())
                {
                    // to make it easier for testing we pre add some stages
                    project.ProjectInfo.Stages = new List<Stage>
                    {
                        new() { AmountToRelease = 10, ReleaseDate = DateTime.UtcNow }, //.AddDays(10) }, during testing we often need to spend a stage immediately
                        new() { AmountToRelease = 30, ReleaseDate = DateTime.UtcNow.AddDays(20) },
                        new() { AmountToRelease = 60, ReleaseDate = DateTime.UtcNow.AddDays(30) },
                    };
                }
            }
        }

        return activeTab == tabNumber ? "active" : "";
    }

    private async Task CreatNostrProfileAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatNostrProfile);
        }
        else
        {
            await CreatNostrProfile();
        }
    }

    private async Task CreatNostrProfile()
    {
        if (nostrMetadataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr profile already created");
            return;
        }

        if (project.Metadata is null)
        {
            notificationComponent.ShowErrorMessage("Nostr profile must be filled");
            return;
        }

        if (string.IsNullOrEmpty(project.Metadata.Name))
        {
            notificationComponent.ShowErrorMessage("Nostr profile name be filled");
            return;
        }

        createProfileSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectIndex);

            var resultId = await _RelayService.CreateNostrProfileAsync(project.Metadata.ToNostrMetadata(),
                NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes()),
                _ =>
                {
                    createProfileSpinner = false;

                    if (!_.Accepted)
                        notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!"); //TODO add export project info

                    if (nostrMetadataCreated == false)
                    {
                        nostrMetadataCreated = true;
                        storage.AddFounderProject(project);
                    }

                    activeTab = 2;
                    
                    StateHasChanged();
                });

            // todo: do we actually need this? does it actualy work to delete?
            if (string.IsNullOrEmpty(resultId))
            {
                createApplicationDataSpinner = false;
                notificationComponent.ShowErrorMessage("Failed to create nostr profile");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            // nothing to do the spinner will be disabled in the call back
        }

        StateHasChanged();
    }

    private async Task CreatProjectInfoOnNostrAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectInfoOnNostr);
        }
        else
        {
            await CreatProjectInfoOnNostr();
        }
    }

    private async Task CreatProjectInfoOnNostr()
    {
        if (nostrApplicationSpecificDataCreated)
        {
            notificationComponent.ShowErrorMessage("Nostr project already created");
            return;
        }

        if (project.ProjectInfo.TargetAmount < (decimal)0.1)
        {
            notificationComponent.ShowErrorMessage("Project target amount must be higher then 0.1 BTC");
            return;
        }

        if (project.ProjectInfo.StartDate < DateTime.UtcNow)
        {
            notificationComponent.ShowErrorMessage("Project must start in the future");
            return;
        }

        if (project.ProjectInfo.ExpiryDate < project.ProjectInfo.StartDate)
        {
            notificationComponent.ShowErrorMessage("Project must expire after start date");
            return;
        }

        if (project.ProjectInfo.Stages.Any() && project.ProjectInfo.ExpiryDate < project.ProjectInfo.Stages.Last().ReleaseDate)
        {
            notificationComponent.ShowErrorMessage("Project expire date must be after the last stage date");
            return;
        }

        if (project.ProjectInfo.PenaltyDays < 10)
        {
            notificationComponent.ShowErrorMessage("Project penalty must be higher then 10 days");
            return;
        }

        if (project.ProjectInfo.Stages.Count() < 3)
        {
            notificationComponent.ShowErrorMessage("There must be at least 3 stages");
            return;
        }

        if (project.ProjectInfo.Stages.Sum(s => s.AmountToRelease) != 100)
        {
            notificationComponent.ShowErrorMessage("The stages must sum to 100%");
            return;
        }

        var projects = storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();

        if (projects.Any(a => project.ProjectInfo.ProjectIdentifier == a.ProjectInfo.ProjectIdentifier))
        {
            notificationComponent.ShowErrorMessage("This wallet already has a project with this index");
            return;
        }

        DateTime prev = DateTime.UtcNow;
        foreach (var stage in project.ProjectInfo.Stages)
        {
            if ((stage.ReleaseDate - prev).Days < 0)
            {
                notificationComponent.ShowErrorMessage("Stages must be chronological");
                return;
            }

            prev = stage.ReleaseDate;
        }

        createApplicationDataSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectIndex);

            var nostrKeyHex = NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes());

            var resultId = await _RelayService.AddProjectAsync(project.ProjectInfo, nostrKeyHex,
                _ =>
                {
                    createApplicationDataSpinner = false;

                    if (!_.Accepted)
                        notificationComponent.ShowErrorMessage("Failed to store the project information on the relay!!!"); //TODO add export project info

                    if (nostrApplicationSpecificDataCreated == false)
                    {
                        nostrApplicationSpecificDataCreated = true;
                        storage.UpdateFounderProject(project);
                    }
                    
                    activeTab = 3;
                    
                    StateHasChanged();

                });

            // todo: do we actually need this? does it actualy work to delete?
            if (string.IsNullOrEmpty(resultId))
            {
                createApplicationDataSpinner = false;
                await _RelayService.DeleteProjectAsync(resultId, nostrKeyHex);
                notificationComponent.ShowErrorMessage("Failed to create application data");
            }
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            // nothing to do the spinner will be disabled in the call back
        }      
    }

    private async Task CreatProjectTransactionAnCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CreatProjectTransaction);
        }
        else
        {
            await CreatProjectTransaction();
        }
    }

    private async Task CreatProjectTransaction()
    {
        creatProjectSpinner = true;
        StateHasChanged();

        try
        {

            var words = await passwordComponent.GetWalletAsync();
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = _cacheStorage.GetUnconfirmedInboundFunds();

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            unsignedTransaction = _founderTransactionActions.CreateNewProjectTransaction(project.ProjectInfo.FounderKey, _derivationOperations.AngorKeyToScript(project.ProjectInfo.ProjectIdentifier), NetworkConfiguration.AngorCreateFeeSats, project.ProjectInfo.NostrPubKey);

            signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation);

            showCreateModal = true;
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            creatProjectSpinner = false;
        }      

        StateHasChanged();
    }

    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showCreateModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();
                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);
                    var unconfirmedInfo = _cacheStorage.GetUnconfirmedInboundFunds();

                    signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        publishProjectSpinner = true;
        StateHasChanged();

        try
        {
            showCreateModal = false;

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            project.CreationTransactionId = signedTransaction.Transaction.GetHash().ToString();

            storage.UpdateFounderProject(project);
        }
        catch (Exception e)
        {
            _Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            publishProjectSpinner = false;
            passwordComponent.ClearPassword();
        }

        NavigationManager.NavigateTo($"/view/{project.ProjectInfo.ProjectIdentifier}");
    }

    private void AddStage()
    {
        project.ProjectInfo.Stages.Add(new Stage { ReleaseDate = DateTime.UtcNow });
    }

    private void RemoveStage(Stage stage)
    {
        project.ProjectInfo.Stages.Remove(stage);
    }
}
