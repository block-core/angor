@page "/spend/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Client.Services
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Angor.Shared.Services
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Angor.Shared.Utilities
@using ITransactionSignature = NBitcoin.ITransactionSignature
@using System.Text.Json


@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject IIndexerService _IndexerService
@inject INetworkConfiguration _NetworkConfiguration
@inject IDerivationOperations _derivationOperations
@inject IWalletOperations _WalletOperations
@inject IFounderTransactionActions _founderTransactionActions
@inject ILogger<Recover> Logger;
@inject IClipboardService _clipboardService

@inherits BaseComponent

<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />
<RawTransactionModal RawTransactionJson="@rawTransactionJson" IsVisible="@showRawTransactionModal" IsVisibleChanged="HandleRawTransactionModalVisibility"/>


@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="row mb-4">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none">
                    <Icon IconName="spend" Height="42" Width="42" />
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Founder Stage Claim
                    </h5>
                </div>
            </div>
            <button class="btn btn-border mb-2" @onclick="RefreshBalance" disabled="@refreshSpinner">

                <i class="@(refreshSpinner ? "rotate-icon" : "")">
                    <Icon IconName="refresh" Width="24" Height="24"></Icon>
                </i>
                <span class="nav-link-text ms-1">Refresh</span>
            </button>
        </div>
        <p class="mb-0 font-weight-normal text-sm text-truncate mt-4">
            Project Identifier: @project.ProjectIdentifier
        </p>
    </div>
</div>



    @if (firstTimeRefreshSpinner && refreshSpinner)
    {
        <div class="d-flex justify-content-center">
            <div class="loader"></div>
        </div>
    }


    @foreach (var stage in stageDatas)
    {
        bool stageisActive = stage.Stage.ReleaseDate < DateTime.UtcNow;
        var investedCount = stage.Items.Count(c => c.IsSpent == false);
        var investedAmount = stage.Items.Where(c => c.IsSpent == false).Sum(c => c.Amount);
        bool noCoinsToClaim = investedCount == 0 || stage.StageSpinner == true;


        <div class="mb-4">
            <div class="card card-body">
                <div class="d-flex justify-content-between">
                    <h5 class="card-title">Stage @stage.StageIndex (@stage.Stage.AmountToRelease %) - @investedAmount @network.CoinTicker (@investedCount trx) </h5>
                    @if (stageisActive)
                    {

                        <button class="btn @((noCoinsToClaim) ? "btn-light" : "btn-success")" disabled="@((noCoinsToClaim || !IsCheckboxSelectedForStage(stage.StageIndex)))" @onclick="() => ClaimCoinsCheckPassword(stage.StageIndex)">
                            @if (stage.StageSpinner)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Building trx...</span>
                            }
                            else
                            {
                                @if (investedCount == 0)
                                {
                                    <span>Claimed</span>
                                }
                                else
                                {
                                    <span>Claim Coins</span>
                                }
                            }
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-warning" disabled>In @((stage.Stage.ReleaseDate - DateTime.UtcNow).Days) Days</button>
                    }

                </div>
                <p class="card-subtitle text-muted mb-2">Estimated completion time: @stage.Stage.ReleaseDate.ToString("dd/MM/yyyy")</p>

                <button @onclick="() => Expand(stage.StageIndex)" class="btn btn-border d-block">
                    <i class="bi bi-chevron-double-down"></i> Expand
                </button>


                @if (stage.StageIndex == expandedStageId)
                {
                    <div class="mt-3">
                        @foreach (var transaction in stage.Items)
                        {
                            bool isTicked = IsUtxoSelected(transaction.Trxid, transaction.Outputindex);
                            string statusClass = transaction.IsSpent ? "bg-warning text-dark" : "bg-success text-light";
                            string statusText = transaction.IsSpent ? "Spent" : "Unspent";

                            <div class="d-flex mb-2">
                                <input id="@transaction.Trxid" type="checkbox" disabled="@(!stageisActive || transaction.IsSpent)" checked="@isTicked" @onclick="() => HandleCheckboxChange(transaction.Trxid, transaction.Outputindex)"/>
                                <label for="@transaction.Trxid">
                                    @transaction.Amount @network.CoinTicker - utxo :
                                    <span style="cursor: pointer; text-decoration: underline;" @onclick="() => CopyTRXToClipboard(transaction.Trxid)">@transaction.Trxid</span> -@transaction.Outputindex
                                    <span class="p-1 rounded @statusClass">
                                        @statusText
                                    </span>
                                </label>
                            </div>
                        }

                    </div>
                }
            </div>
        </div>
    }


    @if (showCreateModal)
    {
        <!-- Confirmation Modal -->
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmation</h5>
                         <span type="button" @onclick="() => showCreateModal = false">
                            <Icon IconName="close-circle" />
                        </span>
                    </div>
                    <div class="modal-body modal-body-scroll">

                        <p class="mb-1"><strong>Project Identifier:</strong> @project.ProjectIdentifier</p>

                        <p class="mb-1">The transactions to be spent @signedTransaction.Transaction.Outputs.Sum(s => s.Value.ToUnit(MoneyUnit.BTC)) @network.CoinTicker</p>
                        <p class="mb-1">Miner fee @Money.Satoshis(signedTransaction.TransactionFee).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>

                        <hr>

                        <div class="mb-3">
                            <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                            <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="FeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                        </div>

                        <hr>

                        <h6 class="mt-3 mb-2">Stages</h6>
                        @foreach (var utxo in selectedUtxos)
                        {
                            if (utxo.Value) // check if the UTXO is selected
                            {
                                var utxoKey = utxo.Key;
                                
                                var stageIndex = GetStageIndexForUtxo(utxoKey);

                                <p style="font-size: 0.7em;" class="mb-1">Stage: @stageIndex, Transaction: @utxoKey.Trxid, Output Index: @utxoKey.Outputindex</p>
                            }
                        }


                        <hr>

                        <p class="mt-3">Are you sure you want to continue?</p>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-border" @onclick="Send" disabled="@spendSpinner">
                            @if (spendSpinner)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Confirm...</span>
                            }
                            else
                            {
                                <span>Confirm</span>
                            }
                        </button>
                        <button class="btn btn-primary" @onclick="ShowTransactionJsonModal">
                            Show Transaction Details
                        </button>
                    </div>
                </div>
            </div>
        </div>


    }


    <div class="mt-4">
        <div class="card card-body">
            <div class="d-flex justify-content-between">
                <h5 class="card-title">Project Statistics</h5>
            </div>
            <p class="card-subtitle text-muted mb-2">Total Invested Amount (Spent + Unspent): @(totalAvailableInvestedAmount + totalSpentAmount) @network.CoinTicker</p>
            <p class="card-subtitle text-muted mb-2">Total Unspent Invested Amount: @totalAvailableInvestedAmount @network.CoinTicker</p>
            <p class="card-subtitle text-muted mb-2">Total Withdrawable Amount: @currentWithdrawableAmount @network.CoinTicker</p>
            <p class="card-subtitle text-muted mb-2">Total Transactions: @totalInvestedTransactions</p>
            <p class="card-subtitle text-muted mb-2">Total Unspent Transactions: @(totalInvestedTransactions - totalSpentTransactions) </p>
            <p class="card-subtitle text-muted mb-2">Total Spent Amount: @totalSpentAmount @network.CoinTicker</p>
            <p class="card-subtitle text-muted mb-2">Total Spent Transactions: @totalSpentTransactions</p>
            <p class="card-subtitle text-muted mb-2">Total Stages: @totalStages</p>
            @if (timeUntilNextStage.HasValue)
            {
                <p class="card-subtitle text-muted mb-2">Time until next stage: @timeUntilNextStage.Value.Days days, @timeUntilNextStage.Value.Hours hours, @timeUntilNextStage.Value.Minutes minutes</p>
            }
            else
            {
                <p class="card-subtitle text-muted mb-2">No upcoming stages.</p>
            }
        </div>
    </div>


@code {
    [Parameter]
    public string ProjectId { get; set; }

    private int? expandedStageId;
    private bool showCreateModal;
    
    private bool showRawTransactionModal = false;
    private string rawTransactionJson;

    private bool refreshSpinner = false;
    private bool firstTimeRefreshSpinner = false;
    private bool spendSpinner = false;

    decimal totalAvailableInvestedAmount = 0.0m;
    int totalInvestedTransactions = 0;
    decimal totalSpentAmount = 0.0m;
    int totalSpentTransactions = 0;
    decimal currentWithdrawableAmount = 0.0m;
    int totalStages;
    TimeSpan? timeUntilNextStage;

    private ProjectInfo project;

    private FeeData feeData = new();

    List<(Transaction Transaction, string TrxId)> transactions = new();

    Dictionary<UtxoKey, bool> selectedUtxos = new Dictionary<UtxoKey, bool>();

    public class StageData
    {
        public int StageIndex;
        public Stage Stage;
        public List<StageDataTrx> Items = new();
        public bool StageSpinner = false;
    }

    public class StageDataTrx
    {
        public string Trxid;
        public int Outputindex;
        public string OutputAddress;
        public decimal Amount;
        public bool IsSpent;
    }

    List<StageData> stageDatas = new();

    TransactionInfo signedTransaction;
    FounderContext founderContext;
    int selectedStageId;

    protected override async Task OnInitializedAsync()
    {


        project = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId)?.ProjectInfo;

        firstTimeRefreshSpinner = true;

        CalculateTotalValues();
    }

    private void CalculateTotalValues()
    {
        totalStages = stageDatas.Any() ? stageDatas.Count() : 1;

        var nextStage = stageDatas.Where(stage => stage.Stage.ReleaseDate > DateTime.UtcNow)
                                .OrderBy(stage => stage.Stage.ReleaseDate)
                                .FirstOrDefault();
        timeUntilNextStage = nextStage != null ? nextStage.Stage.ReleaseDate - DateTime.UtcNow : (TimeSpan?)null;
        totalAvailableInvestedAmount = 0.0m;
        totalInvestedTransactions = 0;
        totalSpentAmount = 0.0m;
        totalSpentTransactions = 0;
        currentWithdrawableAmount = 0.0m;

        foreach (var stage in stageDatas)
        {
            var stageIsActive = stage.Stage.ReleaseDate < DateTime.UtcNow;
            var totalStageTransactions = stage.Items.Count();
            var availableInvestedAmount = stage.Items.Where(c => !c.IsSpent).Sum(c => c.Amount);
            var spentStageAmount = stage.Items.Where(c => c.IsSpent).Sum(c => c.Amount);
            var spentStageTransactions = stage.Items.Count(c => c.IsSpent);
            var daysUntilRelease = (stage.Stage.ReleaseDate - DateTime.UtcNow).Days;
            var stageReleasePercentage = stage.Stage.AmountToRelease;

            totalAvailableInvestedAmount += availableInvestedAmount;
            totalInvestedTransactions += totalStageTransactions;
            totalSpentAmount += spentStageAmount;
            totalSpentTransactions += spentStageTransactions;

            if (daysUntilRelease <= 0)
            {
                currentWithdrawableAmount += availableInvestedAmount;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (hasWallet)
            {
                await RefreshBalance();
            }
        }
    }

    private async Task RefreshBalance()
    {
        refreshSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            await FindInvestments();

            await CheckSpentFund();
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message,e);
        }
        finally
        {
            refreshSpinner = false;
            firstTimeRefreshSpinner = false;
            CalculateTotalValues();
        }

        StateHasChanged();
        await Task.Delay(10);
    }

    private async Task FindInvestments()
    {
        var trxs = await _IndexerService.GetInvestmentsAsync(project.ProjectIdentifier);

        var trxList = transactions.ToList();

        var tasks = trxs
            .Where(a => trxList.All(b => b.TrxId != a.TransactionId))
        .Select(async _ =>
        {
            var hex = await _IndexerService.GetTransactionHexByIdAsync(_.TransactionId);
            return new { hex, _.TransactionId };
        });

        var trxHexList = await Task.WhenAll(tasks);

        // lets reuse this list
        trxList.Clear();

        foreach (var trx in trxHexList)
        {
            trxList.Add((network.CreateTransaction(trx.hex), trx.TransactionId));
        }

        if (!stageDatas.Any())
        {
            int stageIndex = 0;
            foreach (var stage in project.Stages)
            {

                var stageItem = new StageData
                    {
                        Stage = stage,
                        StageIndex = stageIndex + 1,
                    };

                stageIndex++;
                stageDatas.Add(stageItem);
            }
        }

        foreach (var stageItem in stageDatas)
        {
            foreach (var item in trxList)
            {
                var insert = new StageDataTrx
                    {
                        Trxid = item.TrxId,
                        OutputAddress = item.Transaction.Outputs[stageItem.StageIndex + 1].ScriptPubKey.WitHash.GetAddress(network).ToString(),
                        Outputindex = stageItem.StageIndex + 1,
                        Amount = item.Transaction.Outputs[stageItem.StageIndex + 1].Value.ToUnit(MoneyUnit.BTC),
                    };

                stageItem.Items.Add(insert);
                transactions.Add(item);
            }
        }
    }

    private async Task CheckSpentFund()
    {
        List<QueryTransaction> trxs = new();
        var unconfirmedOutbound = _cacheStorage.GetUnconfirmedOutboundFunds();
        bool updateUnconfirmedOutbound = false;

        foreach (StageData stageData in stageDatas)
        {
            foreach (var item in stageData.Items)
            {
                if (item.IsSpent)
                    continue;

                QueryTransaction? trx = trxs.FirstOrDefault(f => f.TransactionId == item.Trxid);

                if (trx == null)
                {
                    trx = await _IndexerService.GetTransactionInfoByIdAsync(item.Trxid);

                    trxs.Add(trx);
                }

                var output = trx.Outputs.First(outp => outp.Index == item.Outputindex);

                if (!string.IsNullOrEmpty(output.SpentInTransaction))
                {
                    item.IsSpent = true;

                    updateUnconfirmedOutbound |= LinqExtension.Remove(unconfirmedOutbound, new Outpoint(item.Trxid, item.Outputindex));

                    continue;
                }

                item.IsSpent = LinqExtension.Contains(unconfirmedOutbound, new Outpoint(item.Trxid, item.Outputindex));
            }
        }

        if (updateUnconfirmedOutbound)
        {
            _cacheStorage.SetUnconfirmedOutboundFunds(unconfirmedOutbound);
        }
    }

    protected async Task ClaimCoinsCheckPassword(int stageId)
    {
        if (passwordComponent.HasPassword())
        {
            await ClaimCoins(stageId);
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ClaimCoins(stageId);
            });
        }
    }

    private async Task ClaimCoins(int stageId)
    {
        var stage = stageDatas.First(s => s.StageIndex == stageId);
        stage.StageSpinner = true;

        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();

            selectedStageId = stageId;

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            founderContext = new FounderContext { ProjectInfo = project, ProjectSeeders = new ProjectSeeders() };

            foreach (var utxo in selectedUtxos.Where(kv => GetStageIndexForUtxo(kv.Key) == stageId && kv.Value))
            {
                var trxId = utxo.Key.Trxid;
                var trx = transactions.First(f => f.TrxId == trxId);

                founderContext.InvestmentTrasnactionsHex.Add(trx.Transaction.ToHex(network.Consensus.ConsensusFactory));
            }


            var accountInfo = storage.GetAccountInfo(network.Name);
            var address = accountInfo.GetNextReceiveAddress();
            var addressScript = BitcoinWitPubKeyAddress.Create(address, network).ScriptPubKey;

            var keys = _walletStorage.GetFounderKeys().Keys.First(k => k.ProjectIdentifier == project.ProjectIdentifier);

            var key = _derivationOperations.DeriveFounderPrivateKey(words, keys.Index);

            signedTransaction = _founderTransactionActions.SpendFounderStage(founderContext.ProjectInfo, founderContext.InvestmentTrasnactionsHex, selectedStageId, addressScript, Encoders.Hex.EncodeData(key.ToBytes()), feeData.SelectedFeeEstimation);

            showCreateModal = true;
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message,e);
        }
        finally
        {
            CalculateTotalValues();
            
            if (selectedUtxos.Keys.Any(utxoKey => GetStageIndexForUtxo(utxoKey) == selectedStageId))
            {
                selectedUtxos.Clear();
            }
            stage.StageSpinner = false;
        }
        
        StateHasChanged();
    }


    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        var selectedItem = e.Value?.ToString();

        if (selectedItem != null)
        {
            if (int.TryParse(selectedItem, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showCreateModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();
                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);
                    var address = accountInfo.GetNextReceiveAddress();
                    var addressScript = BitcoinWitPubKeyAddress.Create(address, network).ScriptPubKey;

                    var keys = _walletStorage.GetFounderKeys().Keys.First(k => k.ProjectIdentifier == project.ProjectIdentifier);
                    var key = _derivationOperations.DeriveFounderPrivateKey(words, keys.Index);

                    signedTransaction = _founderTransactionActions.SpendFounderStage(founderContext.ProjectInfo, founderContext.InvestmentTrasnactionsHex, selectedStageId, addressScript, Encoders.Hex.EncodeData(key.ToBytes()), feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        spendSpinner = true;

        StateHasChanged();
        await Task.Delay(10);

        try
        {
            showCreateModal = false;

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            // add all outptus to the pending list
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInbound = _cacheStorage.GetUnconfirmedInboundFunds();
            var pendingInbound = _WalletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, signedTransaction.Transaction);
            unconfirmedInbound.AddRange(pendingInbound);
            _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInbound);

            var unconfirmedOutbound = _cacheStorage.GetUnconfirmedOutboundFunds();
            unconfirmedOutbound.AddRange(signedTransaction.Transaction.Inputs.Select(_ => new Outpoint(_.PrevOut.Hash.ToString(), (int)_.PrevOut.N)));
            _cacheStorage.SetUnconfirmedOutboundFunds(unconfirmedOutbound);

            // mark stage as spent
            stageDatas.FirstOrDefault(_ => _.StageIndex == selectedStageId)?.Items.ForEach(_ =>
            {
                if (signedTransaction.Transaction.Inputs.Any(a => _.Trxid == a.PrevOut.Hash.ToString() && _.Outputindex == a.PrevOut.N))
                    _.IsSpent = true;
            });

            notificationComponent.ShowNotificationMessage("Done", 1);
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message,e);
            passwordComponent.ClearPassword();
        }
        finally
        {
            spendSpinner = false;
        }
    }

    private void Expand(int stageId)
    {
        expandedStageId = expandedStageId == stageId ? null : stageId;
        selectedUtxos.Clear();
    }

    private void HandleCheckboxChange(string trxId, int outputIndex)
    {
        var key = new UtxoKey(trxId, outputIndex);

        if (selectedUtxos.ContainsKey(key))
        {
            selectedUtxos.Remove(key);
        }
        else
        {
            selectedUtxos[key] = true;
        }
    }
    
    private bool IsUtxoSelected(string trxId, int outputIndex)
    {
        return selectedUtxos.ContainsKey(new UtxoKey(trxId, outputIndex));
    }

    private int GetStageIndexForUtxo(UtxoKey utxoKey)
    {
        return stageDatas.First(stage => stage.Items.Any(item => item.Trxid == utxoKey.Trxid && item.Outputindex == utxoKey.Outputindex)).StageIndex;
    }


    private bool IsCheckboxSelectedForStage(int stageIndex)
    {
        return selectedUtxos.Any(utxo => GetStageIndexForUtxo(utxo.Key) == stageIndex && utxo.Value);
    }


    private async Task CopyTRXToClipboard(string trxData)
    {
        if (string.IsNullOrEmpty(trxData))
        {
            throw new ArgumentNullException(nameof(trxData), "Transaction data is null or empty.");
        }

        await _clipboardService.WriteTextAsync(trxData);
        StateHasChanged();
    }
    
    public struct UtxoKey
    {
        public string Trxid { get; set; }
        public int Outputindex { get; set; }

        public UtxoKey(string trxid, int outputindex)
        {
            Trxid = trxid;
            Outputindex = outputindex;
        }

        public override bool Equals(object obj)
        {
            if (!(obj is UtxoKey))
                return false;

            var key = (UtxoKey)obj;
            return Trxid == key.Trxid && Outputindex == key.Outputindex;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Trxid, Outputindex);
        }
    }

    private async Task ShowTransactionJsonModal()
    {
        rawTransactionJson = PrepareTransactionDetails();
        showRawTransactionModal = true;
    }

    private string PrepareTransactionDetails()
    {
        var transactionDetails = new
        {
            ProjectIdentifier = project.ProjectIdentifier,
            TotalSpent = signedTransaction.Transaction.Outputs.Sum(s => s.Value.ToUnit(MoneyUnit.BTC)),
            MinerFee = Money.Satoshis(signedTransaction.TransactionFee).ToUnit(MoneyUnit.BTC),
            FeeRate = feeData.SelectedFeeEstimation.FeeRate,
            Confirmations = feeData.SelectedFeeEstimation.Confirmations,
            Utxos = selectedUtxos.Select(utxo => new
            {
                Stage = GetStageIndexForUtxo(utxo.Key),
                TransactionId = utxo.Key.Trxid,
                OutputIndex = utxo.Key.Outputindex
            }).ToList()
        };

        return JsonSerializer.Serialize(transactionDetails, new JsonSerializerOptions { WriteIndented = true });
    }

    private void HandleRawTransactionModalVisibility(bool isVisible)
    {
        showRawTransactionModal = isVisible;
    }
}