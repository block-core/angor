@page "/spend/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Client.Services
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Angor.Shared.Services
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Angor.Shared.Utilities
@using ITransactionSignature = NBitcoin.ITransactionSignature

@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject IIndexerService _IndexerService
@inject INetworkConfiguration _NetworkConfiguration
@inject IDerivationOperations _derivationOperations
@inject IWalletOperations _WalletOperations
@inject IFounderTransactionActions _founderTransactionActions
@inject ILogger<Recover> Logger;

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container my-4">
    <h1>Founder Stage Claim</h1>
    <h5 class="card-title">Project Identifier: @project.ProjectIdentifier</h5>

    <NotificationComponent @ref="notificationComponent" />
    <PasswordComponent @ref="passwordComponent" />
    
    @if (firstTimeRefreshSpinner && refreshSpinner)
    {
        <div class="d-flex justify-content-center">
            <div class="loader"></div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary mb-2" @onclick="RefreshBalance" disabled="@refreshSpinner">
                @if (refreshSpinner)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Refresh...</span>
                }
                else
                {
                    <span>Refresh</span>
                }
            </button>
        </div>
    }

    @foreach (var stage in stageDatas)
    {
        bool stageisActive = stage.Stage.ReleaseDate < DateTime.UtcNow;
        var investedCount = stage.Items.Count(c => c.IsSpent == false);
        var investedAmount = stage.Items.Where(c => c.IsSpent == false).Sum(c => c.Amount);

        <div class="card mb-3">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <h5 class="card-title">Stage @stage.StageIndex (@stage.Stage.AmountToRelease %) - @investedAmount @network.CoinTicker (@investedCount trx) </h5>
                    @if (stageisActive)
                    {
                        <button class="btn btn-success" disabled="@(investedCount == 0 || stage.StagePinner == true)" @onclick="() => ClaimCoinsCheckPassword(stage.StageIndex)">
                            @if (stage.StagePinner)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Building trx...</span>
                            }
                            else
                            {
                                <span>Claim Coins</span>
                            }
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-warning" disabled>In @((stage.Stage.ReleaseDate - DateTime.UtcNow).Days) Days</button>
                    }
                    
                </div>
                <p class="card-subtitle text-muted mb-2">Estimated completion time: @stage.Stage.ReleaseDate.ToString("dd/MM/yyyy")</p>

                <button @onclick="() => Expand(stage.StageIndex)" class="btn btn-link d-block text-decoration-none text-end">
                    <i class="bi bi-chevron-double-down"></i> Expand
                </button>


                @if (stage.StageIndex == expandedStageId)
                {
                    <div class="mt-3">
                        @foreach (var transaction in stage.Items)
                        {
                            bool isTicked = selected.ContainsKey(transaction.Trxid);

                            <div class="d-flex mb-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" disabled="@(!stageisActive || transaction.IsSpent)" value="@isTicked" @onclick="() => HandleCheckboxChange(transaction.Trxid)" />
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <p class="mb-0">
                                        @transaction.Amount @network.CoinTicker - utxo : @transaction.Trxid-@transaction.Outputindex

                                        @if (transaction.IsSpent)
                                        {
                                            <p class="text-primary">spent</p>
                                        }
                                        else
                                        {
                                            <p class="text-success">unspent</p>
                                        }

                                    </p>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
    
    @if (showCreateModal)
    {
        <!-- Confirmation Modal -->
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmation</h5>
                        <button type="button" class="btn-close" @onclick="() => showCreateModal = false" disabled="@spendSpinner"></button>
                    </div>
                    <div class="modal-body modal-body-scroll">
                        
                        <p class="mb-1"><strong>Project Identifier:</strong> @project.ProjectIdentifier</p>

                        <p class="mb-1">The transactions to be spent @signedTransaction.Transaction.Outputs.Sum(s => s.Value.ToUnit(MoneyUnit.BTC)) @network.CoinTicker</p>
                        <p class="mb-1">Miner fee @Money.Satoshis(signedTransaction.TransactionFee).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>

                        <hr>

                        <div class="mb-3">
                            <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                            <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="FeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                        </div>

                        <hr>

                        <h6 class="mt-3 mb-2">Stages</h6>
                        @foreach (var item in selected)
                        {
                            <p style="font-size: 0.7em;" class="mb-1">@item.Key</p>
                        }

                        <hr>

                        <p class="mt-3">Are you sure you want to continue?</p>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showCreateModal = false" disabled="@spendSpinner">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="Send" disabled="@spendSpinner">
                            @if (spendSpinner)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Confirm...</span>
                            }
                            else
                            {
                                <span>Confirm</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>

    }

</div>


@code {
    [Parameter]
    public string ProjectId { get; set; }

    private int? expandedStageId;
    private bool showCreateModal;

    private bool refreshSpinner = false;
    private bool firstTimeRefreshSpinner = false;
    private bool spendSpinner = false;

    private ProjectInfo project;

    private FeeData feeData = new();

    List<(Transaction Transaction, string TrxId)> transactions = new();

    Dictionary<string, string> selected = new();

    public class StageData
    {
        public int StageIndex;
        public Stage Stage;
        public List<StageDataTrx> Items = new ();
        public bool StagePinner = false;
    }

    public class StageDataTrx
    {
        public string Trxid;
        public int Outputindex;
        public string OutputAddress;
        public decimal Amount;
        public bool IsSpent;
    } 

    List<StageData> stageDatas = new();

    TransactionInfo signedTransaction;
    FounderContext founderContext;
    int selectedStageId;

    protected override async Task OnInitializedAsync()
    {
        project = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId)?.ProjectInfo;

        firstTimeRefreshSpinner = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (hasWallet)
            {
                await RefreshBalance();
            }
        }
    }

    private async Task RefreshBalance()
    {
        refreshSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            await FindInvestments();

            await CheckSpentFund();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            refreshSpinner = false;
            firstTimeRefreshSpinner = false;
        }

        StateHasChanged();
        await Task.Delay(10);
    }

    private async Task FindInvestments()
    {
        var trxs = await _IndexerService.GetInvestmentsAsync(project.ProjectIdentifier);

        var trxList = transactions.ToList();

        var tasks = trxs
            .Where(a => trxList.All(b => b.TrxId != a.TransactionId))
        .Select(async _ =>
        {
            var hex = await _IndexerService.GetTransactionHexByIdAsync(_.TransactionId);
            return new { hex, _.TransactionId };
        });

        var trxHexList = await Task.WhenAll(tasks);

        // lets reuse this list
        trxList.Clear();

        foreach (var trx in trxHexList)
        {
            trxList.Add((network.CreateTransaction(trx.hex), trx.TransactionId));
        }

        if(!stageDatas.Any())
        {
            int stageIndex = 0;
            foreach (var stage in project.Stages)
            {

                var stageItem = new StageData
                {
                    Stage = stage,
                    StageIndex = stageIndex + 1,
                };

                stageIndex++;
                stageDatas.Add(stageItem);
            }
        }

        foreach (var stageItem in stageDatas)
        {
            foreach (var item in trxList)
            {
                var insert = new StageDataTrx
                {
                    Trxid = item.TrxId,
                    OutputAddress = item.Transaction.Outputs[stageItem.StageIndex + 1].ScriptPubKey.WitHash.GetAddress(network).ToString(),
                    Outputindex = stageItem.StageIndex + 1,
                    Amount = item.Transaction.Outputs[stageItem.StageIndex + 1].Value.ToUnit(MoneyUnit.BTC),
                };

                stageItem.Items.Add(insert);
                transactions.Add(item);
            }
        }
    }

    private async Task CheckSpentFund()
    {
        List<QueryTransaction> trxs = new();
        var unconfirmedOutbound = _cacheStorage.GetUnconfirmedOutboundFunds();
        bool updateUnconfirmedOutbound = false;

        foreach (StageData stageData in stageDatas)
        {
            foreach (var item in stageData.Items)
            {
                if (item.IsSpent)
                    continue;

                QueryTransaction? trx = trxs.FirstOrDefault(f => f.TransactionId == item.Trxid);

                if (trx == null)
                {
                    trx = await _IndexerService.GetTransactionInfoByIdAsync(item.Trxid);

                    trxs.Add(trx);
                }

                var output = trx.Outputs.First(outp => outp.Index == item.Outputindex);

                if (!string.IsNullOrEmpty(output.SpentInTransaction))
                {
                    item.IsSpent = true;

                    updateUnconfirmedOutbound |= LinqExtension.Remove(unconfirmedOutbound, new Outpoint(item.Trxid, item.Outputindex));

                    continue;
                }

                item.IsSpent = LinqExtension.Contains(unconfirmedOutbound, new Outpoint(item.Trxid, item.Outputindex));
            }
        }

        if (updateUnconfirmedOutbound)
        {
            _cacheStorage.SetUnconfirmedOutboundFunds(unconfirmedOutbound);
        }
    }

    protected async Task ClaimCoinsCheckPassword(int stageId)
    {
        if (passwordComponent.HasPassword())
        {
            await ClaimCoins(stageId);
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ClaimCoins(stageId); ;
            });
        }
    }

    private async Task ClaimCoins(int stageId)
    {
        var stage = stageDatas.First(s => s.StageIndex == stageId);

        stage.StagePinner = true;

        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();

            selectedStageId = stageId;

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            founderContext = new FounderContext { ProjectInfo = project, ProjectSeeders = new ProjectSeeders() };

            foreach (var item in selected)
            {
                var trx = transactions.First(f => f.TrxId == item.Key);

                founderContext.InvestmentTrasnactionsHex.Add(trx.Transaction.ToHex(network.Consensus.ConsensusFactory));
            }

            var accountInfo = storage.GetAccountInfo(network.Name);
            var address = accountInfo.GetNextReceiveAddress();
            var addressScript = BitcoinWitPubKeyAddress.Create(address, network).ScriptPubKey;

            var keys = _walletStorage.GetFounderKeys().Keys.First(k => k.ProjectIdentifier == project.ProjectIdentifier);

            var key = _derivationOperations.DeriveFounderPrivateKey(words, keys.Index);

            signedTransaction = _founderTransactionActions.SpendFounderStage(founderContext.ProjectInfo, founderContext.InvestmentTrasnactionsHex, selectedStageId, addressScript, Encoders.Hex.EncodeData(key.ToBytes()), feeData.SelectedFeeEstimation);

            showCreateModal = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            stage.StagePinner = false;
        }

        StateHasChanged();
    }

    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        var selectedItem = e.Value?.ToString();

        if (selectedItem != null)
        {
            if (int.TryParse(selectedItem, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showCreateModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();
                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);
                    var address = accountInfo.GetNextReceiveAddress();
                    var addressScript = BitcoinWitPubKeyAddress.Create(address, network).ScriptPubKey;

                    var keys = _walletStorage.GetFounderKeys().Keys.First(k => k.ProjectIdentifier == project.ProjectIdentifier);
                    var key = _derivationOperations.DeriveFounderPrivateKey(words, keys.Index);

                    signedTransaction = _founderTransactionActions.SpendFounderStage(founderContext.ProjectInfo, founderContext.InvestmentTrasnactionsHex, selectedStageId, addressScript, Encoders.Hex.EncodeData(key.ToBytes()), feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        spendSpinner = true;

        StateHasChanged();
        await Task.Delay(10);

        try
        {
            showCreateModal = false;

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            // add all outptus to the pending list
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInbound = _cacheStorage.GetUnconfirmedInboundFunds();
            var pendingInbound = _WalletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, signedTransaction.Transaction);
            unconfirmedInbound.AddRange(pendingInbound);
            _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInbound);

            var unconfirmedOutbound = _cacheStorage.GetUnconfirmedOutboundFunds();
            unconfirmedOutbound.AddRange(signedTransaction.Transaction.Inputs.Select(_ => new Outpoint(_.PrevOut.Hash.ToString(), (int)_.PrevOut.N)));
            _cacheStorage.SetUnconfirmedOutboundFunds(unconfirmedOutbound);

            // mark stage as spent
            stageDatas.FirstOrDefault(_ => _.StageIndex == selectedStageId)?.Items.ForEach(_ =>
            {
                if (signedTransaction.Transaction.Inputs.Any(a => _.Trxid == a.PrevOut.Hash.ToString() && _.Outputindex == a.PrevOut.N))
                    _.IsSpent = true;
            });

            notificationComponent.ShowNotificationMessage("Done", 1);
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
            passwordComponent.ClearPassword();
        }
        finally
        {
            spendSpinner = false;
        }
    }

    private void Expand(int stageId)
    {
        expandedStageId = expandedStageId == stageId ? null : stageId;
    }

    private void HandleCheckboxChange(string trxId)
    {
        
        if (selected.ContainsKey(trxId))
        {
            selected.Remove(trxId);
        }
        else
        {
            selected.Add(trxId, null);
        }
    }
}