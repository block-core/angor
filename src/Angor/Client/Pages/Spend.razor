@page "/spend/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Client.Services
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Angor.Shared.Services
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Angor.Shared.Utilities
@using ITransactionSignature = NBitcoin.ITransactionSignature
@using System.Text.Json
@using Angor.Client.Models


@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject IIndexerService _IndexerService
@inject INetworkConfiguration _NetworkConfiguration
@inject IDerivationOperations _derivationOperations
@inject IWalletOperations _WalletOperations
@inject IFounderTransactionActions _founderTransactionActions
@inject IInvestorTransactionActions _investorTransactionActions
@inject ILogger<Recover> Logger;
@inject IClipboardService _clipboardService

@inherits BaseComponent

<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />
<RawTransactionModal RawTransactionJson="@rawTransactionJson" IsVisible="@showRawTransactionModal" IsVisibleChanged="HandleRawTransactionModalVisibility" />


@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}
<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="spend" Width="32" Height="32" />
                </span>
                <h5 class="header-text"> Founder Stage Claim</h5>
            </div>
            <div class="header-actions">
                <button class="btn btn-border-success"
                        @onclick="RefreshBalance"
                        disabled="@refreshSpinner"
                        title="Refresh">
                    @if (refreshSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <Icon IconName="refresh" Height="24" Width="24" />
                        <span class="button-text ms-2">Refresh</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="row slide-in mt-4">
    <div class="card card-body">
        <p class="mb-0 font-weight-normal text-sm animate-fade-in-delayed">
            Project ID: @project.ProjectIdentifier
        </p>
    </div>
</div>


<div class="slide-in mt-4">

    @if (firstTimeRefreshSpinner && refreshSpinner)
    {
        <div class="row card card-body">
            <div class="d-flex justify-content-center">
                <div class="loader"></div>
            </div>
        </div>
    }
    else
    {
        @if (totalInvestedAmount <= founderProject.ProjectInfo.TargetAmount && founderProject.ProjectHasStarted())
        {
            <div class="target-status-section slide-in mt-4">

                <div class="info-alert glass-effect">
                    <Icon IconName="info" Class="alert-icon" Width="24" Height="24" />
                    <p>The target investment amount has not been reached. As founder, you can only release the funds back to the investors.</p>
                </div>
                <div class="status-overview mt-4">
                    <div class="progress-circle-wrapper">
                        <div class="progress-circle"
                             role="progressbar"
                             data-percentage="@((totalInvestedAmount * 100 / founderProject.ProjectInfo.TargetAmount).ToString("0"))"
                             style="--percentage: @((totalInvestedAmount * 100 / founderProject.ProjectInfo.TargetAmount).ToString("0"))">
                            <div class="progress-circle-inner">
                                <div class="progress-circle-content">
                                    <Icon IconName="alert-circle" Height="32" Width="32" Class="warning-icon" />
                                    <h4 class="progress-title">Target Not Reached</h4>
                                    <div class="progress-value">
                                        @((totalInvestedAmount * 100 / founderProject.ProjectInfo.TargetAmount).ToString("0.0"))%
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="amount-stats">
                        <div class="amount-card glass-effect">
                            <div class="amount-card-content">
                                <Icon IconName="wallet" Height="32" Width="32" Class="card-icon" />
                                <div class="amount-info">
                                    <span class="amount-label">Current Amount</span>
                                    <span class="amount-value">
                                        @Money.Satoshis(totalInvestedAmount).ToUnit(MoneyUnit.BTC)
                                        <small class="currency">@network.CoinTicker</small>
                                    </span>
                                </div>
                            </div>
                            <div class="progress-bar-wrapper">
                                <div class="progress-bar" style="width: @((totalInvestedAmount * 100 / founderProject.ProjectInfo.TargetAmount).ToString("0"))%"></div>
                            </div>
                        </div>

                        <div class="amount-card glass-effect">
                            <div class="amount-card-content">
                                <Icon IconName="wallet" Height="32" Width="32" Class="card-icon" />
                                <div class="amount-info">
                                    <span class="amount-label">Target Amount</span>
                                    <span class="amount-value">
                                        @Money.Satoshis(founderProject.ProjectInfo.TargetAmount).ToUnit(MoneyUnit.BTC)
                                        <small class="currency">@network.CoinTicker</small>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>



                    <div class="action-section">
                        <button class="btn btn-border-warning w-100-m" @onclick="ReleaseFundsToInvestors">
                            <div class="button-content">
                                <Icon IconName="refund" Height="24" Width="24" />
                                <span> Release Funds to Investors</span>
                                <Icon IconName="arrow-right" Height="20" Width="20" />
                            </div>
                            <div class="button-background"></div>
                        </button>
                    </div>
                </div>
            </div>
        }

        <div class="card card-body slide-up mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="card-title d-flex align-items-center">
                    <span class="user-select-none animate-rotate">
                        <Icon IconName="statistics" Height="42" Width="42" />
                    </span>

                    <div class="h-100 ms-3">
                        Project Statistics
                    </div>
                </h5>
            </div>

            <div class="row g-4 mb-4">
                <div class="col-md-6 col-lg-3">
                    <div class="stat-card p-3 rounded-3 border hover-effect">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Total Investment</h6>
                                <h4 class="mb-0">@(Money.Satoshis((totalAvailableInvestedAmount + totalSpentAmount)).ToUnit(MoneyUnit.BTC)) @network.CoinTicker</h4>
                            </div>
                            <div class="stat-icon">
                                <Icon IconName="investment" Height="32" Width="32" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 col-lg-3">
                    <div class="stat-card p-3 rounded-3 border hover-effect">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Available Balance</h6>
                                <h4 class="mb-0">@Money.Satoshis(totalAvailableInvestedAmount).ToUnit(MoneyUnit.BTC) @network.CoinTicker</h4>
                            </div>
                            <div class="stat-icon">
                                <Icon IconName="wallet" Height="32" Width="32" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 col-lg-3">
                    <div class="stat-card p-3 rounded-3 border hover-effect">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Withdrawable</h6>
                                <h4 class="mb-0">@Money.Satoshis(currentWithdrawableAmount).ToUnit(MoneyUnit.BTC) @network.CoinTicker</h4>
                            </div>
                            <div class="stat-icon">
                                <Icon IconName="withdraw" Height="32" Width="32" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 col-lg-3">
                    <div class="stat-card p-3 rounded-3 border hover-effect">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="text-muted">Total Stages</h6>
                                <h4 class="mb-0">@totalStages</h4>
                            </div>
                            <div class="stat-icon">
                                <Icon IconName="stages" Height="32" Width="32" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-4">
                <div class="col-md-6">
                    <div class="stat-card p-3 rounded-3 border hover-effect h-100">
                        <div class="d-flex flex-column h-100">
                            <h6 class="text-muted mb-4">Transaction Statistics</h6>
                            <div class="d-flex justify-content-around text-center flex-grow-1">
                                <div class="stat-item">
                                    <div class="stat-value mb-2">@totalInvestedTransactions</div>
                                    <div class="stat-label">Total</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value text-success mb-2">@(totalInvestedTransactions - totalSpentTransactions)</div>
                                    <div class="stat-label">Unspent</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value text-warning mb-2">@totalSpentTransactions</div>
                                    <div class="stat-label">Spent</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="stat-card p-3 rounded-3 border hover-effect h-100">
                        <div class="d-flex flex-column h-100">
                            <h6 class="text-muted mb-4">Next Stage</h6>
                            @if (timeUntilNextStage.HasValue)
                            {
                                <div class="d-flex align-items-center justify-content-center flex-grow-1">
                                    <div class="countdown-wrapper">
                                        <Icon IconName="time" Height="24" Width="24" class="me-3" />
                                        <div class="countdown-timer">
                                            <div class="time-block">
                                                <span class="time-value">@timeUntilNextStage.Value.Days</span>
                                                <span class="time-label">days</span>
                                            </div>
                                            <div class="time-block">
                                                <span class="time-value">@timeUntilNextStage.Value.Hours</span>
                                                <span class="time-label">hours</span>
                                            </div>
                                            <div class="time-block">
                                                <span class="time-value">@timeUntilNextStage.Value.Minutes</span>
                                                <span class="time-label">mins</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex align-items-center justify-content-center flex-grow-1">
                                    <p class="mb-0">No upcoming stages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="row animate-fade-up mt-4">
            @foreach (var stage in stageDatas)
            {
                bool stageisActive = stage.Stage.ReleaseDate < DateTime.UtcNow;
                var investedCount = stage.Items.Count(c => c.IsSpent == false);
                var unspentInvestedAmount = stage.Items.Where(c => c.IsSpent == false).Sum(c => c.Amount);
                bool noCoinsToClaim = investedCount == 0 || stage.StageSpinner == true;

                <div class="col-12 mb-4 animate-card">
                    <div class="card card-body hover-effect b-shadow">
                        <p class="mb-4">
                            Click on the expand button to view and select transactions. After selecting transactions, use the Claim button at the bottom to process them.
                        </p>

                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                            <h5 class="card-title mb-2">
                                Stage @stage.StageIndex
                                <span class="badge bg-primary ms-2"
                                      title="Amount left to spend: @Money.Satoshis(unspentInvestedAmount).ToUnit(MoneyUnit.BTC) @network.CoinTicker">
                                    @Money.Satoshis(unspentInvestedAmount).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                </span>
                                <span class="badge bg-secondary ms-2">@investedCount trx</span>
                            </h5>

                            <button @onclick="() => Expand(stage.StageIndex)"
                                    class="btn btn-border animate-scale d-flex align-items-center w-100-m">
                                @if (stage.StageIndex == expandedStageId)
                                {
                                    <Icon IconName="collapse" Width="20" Height="20" />
                                    <span class="ms-2">Collapse</span>
                                }
                                else
                                {
                                    <Icon IconName="expand" Width="20" Height="20" />
                                    <span class="ms-2">Expand</span>
                                }
                            </button>
                        </div>

                        <p class="card-subtitle text-muted mb-2 mt-4">
                            Estimated completion: @stage.Stage.ReleaseDate.ToString("dd/MM/yyyy")
                        </p>

                        @if (stage.StageIndex == expandedStageId)
                        {
                            <div class="mt-3 animate-fade-in">
                                @foreach (var transaction in stage.Items)
                                {
                                    bool isTicked = IsUtxoSelected(transaction.Trxid, transaction.Outputindex);
                                    string statusClass = transaction.IsSpent ? "bg-warning text-dark" : "bg-success text-light";
                                    string statusText = transaction.IsSpent ? "Spent" : "Unspent";

                                    <div class="d-flex align-items-center mb-2 p-2 border rounded hover-effect">
                                        <div class="me-3">
                                            <div class="form-check">
                                                <input class="form-check-input"
                                                       type="checkbox"
                                                       checked="@isTicked"
                                                       disabled="@(!stageisActive || transaction.IsSpent)"
                                                       @onchange="(e) => HandleCheckboxChange(transaction.Trxid, transaction.Outputindex)"
                                                       id="@($"utxo_{transaction.Trxid}_{transaction.Outputindex}")" />
                                                <label class="form-check-label" for="@($"utxo_{transaction.Trxid}_{transaction.Outputindex}")">
                                                    <span>@Money.Satoshis(transaction.Amount).ToUnit(MoneyUnit.BTC) @network.CoinTicker</span>
                                                </label>
                                            </div>
                                        </div>
                                        <div class="flex-grow-1 d-flex justify-content-between align-items-center">
                                            <span class="text-primary cursor-pointer small"
                                                  @onclick="() => CopyTRXToClipboard(transaction.Trxid)">
                                                @transaction.Trxid.Substring(0, 8)...
                                            </span>
                                            <span class="badge @statusClass">@statusText</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        @if (stageisActive && stage.StageIndex == expandedStageId)
                        {
                            <div class="card-footer text-end mt-4 p-0">
                                <button class="btn @((noCoinsToClaim) ? "btn-border" : "btn-border-success") animate-scale w-100-m"
                                        disabled="@((noCoinsToClaim || !IsCheckboxSelectedForStage(stage.StageIndex)))"
                                        @onclick="() => ClaimCoinsCheckPassword(stage.StageIndex)">
                                    @if (stage.StageSpinner)
                                    {
                                        <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Building trx...</span>
                                    }
                                    else
                                    {
                                        <Icon IconName="claim" Width="24" Height="24" />
                                        <span class="m-2">@(investedCount == 0 ? "Claimed" : "Claim Selected Coins")</span>
                                    }
                                </button>
                            </div>
                        }
                        else if (!stageisActive)
                        {
                            <div class="card-footer text-end mt-4 p-0">
                                <button class="btn btn-border-warning animate-scale w-100-m" disabled>
                                    <Icon IconName="clock-square" Width="24" Height="24" />
                                    <span class="m-2"> Available in @((stage.Stage.ReleaseDate - DateTime.UtcNow).Days) Days </span>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }


</div>


@if (showCreateModal)
{
    <div class="modal-wrapper">
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content modern-modal">
                    <div class="modal-header border-0 pb-0">
                        <div class="d-flex align-items-center">
                            <Icon IconName="transaction" Height="32" Width="32" class="me-2" />
                            <h5 class="modal-title">Transaction Confirmation</h5>
                        </div>
                        <button class="btn-close-custom" @onclick="() => showCreateModal = false">
                            <Icon IconName="close-circle" Height="24" Width="24" />
                        </button>
                    </div>

                    <div class="modal-body modal-body-scroll py-4">
                        <div class="transaction-info-section mb-4">
                            <div class="project-id-card mb-3">
                                <div class="d-flex align-items-center">
                                    <Icon IconName="project" Height="24" Width="24" class="me-2" />
                                    <div class="d-flex flex-column flex-grow-1 overflow-hidden">
                                        <div class="info-label mb-1">Project ID</div>
                                        <div class="project-id-value text-truncate" title="@project.ProjectIdentifier">
                                            @project.ProjectIdentifier
                                        </div>
                                    </div>
                                    <i class="ms-2" role="button" @onclick="() => CopyToClipboard(project.ProjectIdentifier)">
                                        <Icon IconName="copy" Height="24" Width="24" />
                                    </i>
                                </div>
                            </div>

                            <div class="d-flex justify-content-between mb-3">
                                <div class="info-card flex-grow-1 me-2">
                                    <div class="info-label">Amount to Spend</div>
                                    <div class="info-value text-success">
                                        @signedTransaction.Transaction.Outputs.Sum(s => s.Value.ToUnit(MoneyUnit.BTC)) @network.CoinTicker
                                    </div>
                                </div>
                                <div class="info-card flex-grow-1 ms-2">
                                    <div class="info-label">Miner Fee</div>
                                    <div class="info-value text-warning">
                                        @Money.Satoshis(signedTransaction.TransactionFee).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="fee-section mb-4">
                            <h6 class="section-title">
                                <Icon IconName="fee" Height="20" Width="20" class="me-2" />
                                Network Fee Rate
                            </h6>
                            <div class="fee-slider-container">
                                <input type="range"
                                       class="form-range custom-range"
                                       id="feeRange"
                                       @bind="feeData.FeePosition"
                                       @oninput="FeeRangeChanged"
                                       min="@feeData.FeeMin"
                                       max="@feeData.FeeMax">
                                <div class="fee-info">
                                    <small class="text-muted">
                                        Estimated confirmation in @feeData.SelectedFeeEstimation.Confirmations blocks
                                        (@feeData.SelectedFeeEstimation.FeeRate sats/byte)
                                    </small>
                                </div>
                            </div>
                        </div>
                        @if (selectedUtxos.Where(u => u.Value).Count() > 0)
                        {
                            <div class="selected-utxos-section">
                                <h6 class="section-title">
                                    <Icon IconName="list" Height="20" Width="20" class="me-2" />
                                    Selected Transactions
                                </h6>
                                <div class="utxo-list">
                                    @foreach (var utxo in selectedUtxos.Where(u => u.Value))
                                    {
                                        var stageIndex = GetStageIndexForUtxo(utxo.Key);
                                        <div class="utxo-item">
                                            <div class="stage-badge">Stage @stageIndex</div>
                                            <div class="transaction-details">
                                                <small class="text-muted">TX: @utxo.Key.Trxid.Substring(0, 8)...</small>
                                                <small class="text-muted">Output: @utxo.Key.Outputindex</small>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <div class="confirmation-section mt-4 text-center">
                            <Icon IconName="alert" Height="24" Width="24" class="mb-2" />
                            <p class="confirmation-text">
                                Please review the transaction details carefully before confirming.
                            </p>
                        </div>
                    </div>

                    <div class="modal-footer border-0 pt-0">
                        <button class="btn btn-border-warning" @onclick="ShowTransactionJsonModal">
                            View Details
                        </button>
                        <button class="btn btn-border-success"
                                @onclick="Send"
                                disabled="@spendSpinner">
                            @if (spendSpinner)
                            {
                                <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>Confirm Transaction</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public string ProjectId { get; set; }

    private int? expandedStageId;
    private bool showCreateModal;

    private bool showRawTransactionModal = false;
    private string rawTransactionJson;

    private bool refreshSpinner = false;
    private bool firstTimeRefreshSpinner = false;
    private bool spendSpinner = false;

    long totalAvailableInvestedAmount = 0;
    long totalInvestedAmount = 0;
    int totalInvestedTransactions = 0;
    long totalSpentAmount = 0;
    int totalSpentTransactions = 0;
    long currentWithdrawableAmount = 0;
    int totalStages;
    TimeSpan? timeUntilNextStage;

    private ProjectInfo project;
    private FounderProject founderProject;

    private FeeData feeData = new();

    List<(Transaction Transaction, string TrxId)> transactions = new();

    Dictionary<UtxoKey, bool> selectedUtxos = new Dictionary<UtxoKey, bool>();

    public class StageData
    {
        public int StageIndex;
        public Stage Stage;
        public List<StageDataTrx> Items = new();
        public bool StageSpinner = false;
    }

    public class StageDataTrx
    {
        public string Trxid;
        public int Outputindex;
        public string OutputAddress;
        public long Amount;
        public bool IsSpent;
    }

    List<StageData> stageDatas = new();

    TransactionInfo signedTransaction;
    FounderContext founderContext;
    int selectedStageId;

    private long amount;

    protected override async Task OnInitializedAsync()
    {
        founderProject = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);
        project = founderProject?.ProjectInfo;

        firstTimeRefreshSpinner = true;

        CalculateTotalValues();
    }

    private void CalculateTotalValues()
    {
        totalStages = stageDatas.Any() ? stageDatas.Count() : 1;

        var nextStage = stageDatas.Where(stage => stage.Stage.ReleaseDate > DateTime.UtcNow)
            .OrderBy(stage => stage.Stage.ReleaseDate)
            .FirstOrDefault();
        timeUntilNextStage = nextStage != null ? nextStage.Stage.ReleaseDate - DateTime.UtcNow : (TimeSpan?)null;
        totalAvailableInvestedAmount = 0;
        totalInvestedTransactions = 0;
        totalSpentAmount = 0;
        totalSpentTransactions = 0;
        currentWithdrawableAmount = 0;
        totalInvestedAmount = 0;

        foreach (var stage in stageDatas)
        {
            var stageIsActive = stage.Stage.ReleaseDate < DateTime.UtcNow;
            var totalStageTransactions = stage.Items.Count();
            var investedAmount = stage.Items.Sum(c => c.Amount);
            var availableInvestedAmount = stage.Items.Where(c => !c.IsSpent).Sum(c => c.Amount);
            var spentStageAmount = stage.Items.Where(c => c.IsSpent).Sum(c => c.Amount);
            var spentStageTransactions = stage.Items.Count(c => c.IsSpent);
            var daysUntilRelease = (stage.Stage.ReleaseDate - DateTime.UtcNow).Days;
            var stageReleasePercentage = stage.Stage.AmountToRelease;

            totalInvestedAmount += investedAmount;
            totalAvailableInvestedAmount += availableInvestedAmount;
            totalInvestedTransactions += totalStageTransactions;
            totalSpentAmount += spentStageAmount;
            totalSpentTransactions += spentStageTransactions;

            if (daysUntilRelease <= 0)
            {
                currentWithdrawableAmount += availableInvestedAmount;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (hasWallet)
            {
                await RefreshBalance();
            }
        }
    }

    private async Task RefreshBalance()
    {
        refreshSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            await FindInvestments();

            await CheckSpentFund();
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            refreshSpinner = false;
            firstTimeRefreshSpinner = false;
            CalculateTotalValues();
        }

        StateHasChanged();
        await Task.Delay(10);
    }

    private async Task FindInvestments()
    {
        var trxs = await _IndexerService.GetInvestmentsAsync(project.ProjectIdentifier);

        var trxList = transactions.ToList();

        var tasks = trxs
            .Where(a => trxList.All(b => b.TrxId != a.TransactionId))
            .Select(async _ =>
            {
                var hex = await _IndexerService.GetTransactionHexByIdAsync(_.TransactionId);
                return new { hex, _.TransactionId };
            });

        var trxHexList = await Task.WhenAll(tasks);

        // lets reuse this list
        trxList.Clear();

        foreach (var trx in trxHexList)
        {
            trxList.Add((network.CreateTransaction(trx.hex), trx.TransactionId));
        }

        if (!stageDatas.Any())
        {
            int stageIndex = 0;
            foreach (var stage in project.Stages)
            {
                var stageItem = new StageData
                    {
                        Stage = stage,
                        StageIndex = stageIndex + 1,
                    };

                stageIndex++;
                stageDatas.Add(stageItem);
            }
        }

        foreach (var stageItem in stageDatas)
        {
            foreach (var item in trxList)
            {
                var insert = new StageDataTrx
                    {
                        Trxid = item.TrxId,
                        OutputAddress = item.Transaction.Outputs[stageItem.StageIndex + 1].ScriptPubKey.WitHash.GetAddress(network).ToString(),
                        Outputindex = stageItem.StageIndex + 1,
                        Amount = item.Transaction.Outputs[stageItem.StageIndex + 1].Value.Satoshi,
                    };

                stageItem.Items.Add(insert);
                transactions.Add(item);
            }
        }
    }

    private async Task CheckSpentFund()
    {
        List<QueryTransaction> trxs = new();
        var unconfirmedOutbound = _cacheStorage.GetUnconfirmedOutboundFunds();
        bool updateUnconfirmedOutbound = false;

        foreach (StageData stageData in stageDatas)
        {
            foreach (var item in stageData.Items)
            {
                if (item.IsSpent)
                    continue;

                QueryTransaction? trx = trxs.FirstOrDefault(f => f.TransactionId == item.Trxid);

                if (trx == null)
                {
                    trx = await _IndexerService.GetTransactionInfoByIdAsync(item.Trxid);

                    trxs.Add(trx);
                }

                var output = trx.Outputs.First(outp => outp.Index == item.Outputindex);

                if (!string.IsNullOrEmpty(output.SpentInTransaction))
                {
                    item.IsSpent = true;

                    updateUnconfirmedOutbound |= LinqExtension.Remove(unconfirmedOutbound, new Outpoint(item.Trxid, item.Outputindex));

                    continue;
                }

                item.IsSpent = LinqExtension.Contains(unconfirmedOutbound, new Outpoint(item.Trxid, item.Outputindex));
            }
        }

        if (updateUnconfirmedOutbound)
        {
            _cacheStorage.SetUnconfirmedOutboundFunds(unconfirmedOutbound);
        }
    }

    protected async Task ClaimCoinsCheckPassword(int stageId)
    {
        if (totalInvestedAmount <= founderProject.ProjectInfo.TargetAmount)
        {
            notificationComponent.ShowErrorMessage("Target investment amount has not been reached, you can only release the funds back to the investors");
            return;
        }

        if (passwordComponent.HasPassword())
        {
            await ClaimCoins(stageId);
        }
        else
        {
            passwordComponent.ShowPassword(async () => { await ClaimCoins(stageId); });
        }
    }

    private async Task ClaimCoins(int stageId)
    {
        var stage = stageDatas.First(s => s.StageIndex == stageId);
        stage.StageSpinner = true;

        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();

            selectedStageId = stageId;

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            founderContext = new FounderContext { ProjectInfo = project, ProjectSeeders = new ProjectSeeders() };

            foreach (var utxo in selectedUtxos.Where(kv => GetStageIndexForUtxo(kv.Key) == stageId && kv.Value))
            {
                var trxId = utxo.Key.Trxid;
                var trx = transactions.First(f => f.TrxId == trxId);

                founderContext.InvestmentTrasnactionsHex.Add(trx.Transaction.ToHex(network.Consensus.ConsensusFactory));
            }


            var accountInfo = storage.GetAccountInfo(network.Name);
            var address = accountInfo.GetNextReceiveAddress();
            var addressScript = BitcoinWitPubKeyAddress.Create(address, network).ScriptPubKey;

            var keys = _walletStorage.GetFounderKeys().Keys.First(k => k.ProjectIdentifier == project.ProjectIdentifier);

            var key = _derivationOperations.DeriveFounderPrivateKey(words, keys.Index);

            signedTransaction = _founderTransactionActions.SpendFounderStage(founderContext.ProjectInfo, founderContext.InvestmentTrasnactionsHex, selectedStageId, addressScript, Encoders.Hex.EncodeData(key.ToBytes()), feeData.SelectedFeeEstimation);

            showCreateModal = true;
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            CalculateTotalValues();

            if (selectedUtxos.Keys.Any(utxoKey => GetStageIndexForUtxo(utxoKey) == selectedStageId))
            {
                selectedUtxos.Clear();
            }

            stage.StageSpinner = false;
        }

        StateHasChanged();
    }


    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        var selectedItem = e.Value?.ToString();

        if (selectedItem != null)
        {
            if (int.TryParse(selectedItem, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showCreateModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();
                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);
                    var address = accountInfo.GetNextReceiveAddress();
                    var addressScript = BitcoinWitPubKeyAddress.Create(address, network).ScriptPubKey;

                    var keys = _walletStorage.GetFounderKeys().Keys.First(k => k.ProjectIdentifier == project.ProjectIdentifier);
                    var key = _derivationOperations.DeriveFounderPrivateKey(words, keys.Index);

                    signedTransaction = _founderTransactionActions.SpendFounderStage(founderContext.ProjectInfo, founderContext.InvestmentTrasnactionsHex, selectedStageId, addressScript, Encoders.Hex.EncodeData(key.ToBytes()), feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        spendSpinner = true;

        StateHasChanged();
        await Task.Delay(10);

        try
        {
            showCreateModal = false;

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            // add all outptus to the pending list
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInbound = _cacheStorage.GetUnconfirmedInboundFunds();
            var pendingInbound = _WalletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, signedTransaction.Transaction);
            unconfirmedInbound.AddRange(pendingInbound);
            _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInbound);

            var unconfirmedOutbound = _cacheStorage.GetUnconfirmedOutboundFunds();
            unconfirmedOutbound.AddRange(signedTransaction.Transaction.Inputs.Select(_ => new Outpoint(_.PrevOut.Hash.ToString(), (int)_.PrevOut.N)));
            _cacheStorage.SetUnconfirmedOutboundFunds(unconfirmedOutbound);

            // mark stage as spent
            stageDatas.FirstOrDefault(_ => _.StageIndex == selectedStageId)?.Items.ForEach(_ =>
            {
                if (signedTransaction.Transaction.Inputs.Any(a => _.Trxid == a.PrevOut.Hash.ToString() && _.Outputindex == a.PrevOut.N))
                    _.IsSpent = true;
            });

            notificationComponent.ShowNotificationMessage("Done", 1);
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
            passwordComponent.ClearPassword();
        }
        finally
        {
            spendSpinner = false;
        }
    }

    private void Expand(int stageId)
    {
        expandedStageId = expandedStageId == stageId ? null : stageId;
        selectedUtxos.Clear();
    }

    private void HandleCheckboxChange(string trxId, int outputIndex)
    {
        var key = new UtxoKey(trxId, outputIndex);

        if (selectedUtxos.ContainsKey(key))
        {
            selectedUtxos.Remove(key);
        }
        else
        {
            selectedUtxos[key] = true;
        }
    }

    private bool IsUtxoSelected(string trxId, int outputIndex)
    {
        return selectedUtxos.ContainsKey(new UtxoKey(trxId, outputIndex));
    }

    private int GetStageIndexForUtxo(UtxoKey utxoKey)
    {
        return stageDatas.First(stage => stage.Items.Any(item => item.Trxid == utxoKey.Trxid && item.Outputindex == utxoKey.Outputindex)).StageIndex;
    }


    private bool IsCheckboxSelectedForStage(int stageIndex)
    {
        return selectedUtxos.Any(utxo => GetStageIndexForUtxo(utxo.Key) == stageIndex && utxo.Value);
    }


    private async Task CopyTRXToClipboard(string trxData)
    {
        if (string.IsNullOrEmpty(trxData))
        {
            throw new ArgumentNullException(nameof(trxData), "Transaction data is null or empty.");
        }

        await _clipboardService.WriteTextAsync(trxData);
        StateHasChanged();
    }

    private async Task CopyToClipboard(string text)
    {
        await _clipboardService.WriteTextAsync(text);
        notificationComponent.ShowNotificationMessage("Copied to clipboard", 1);
    }

    public struct UtxoKey
    {
        public string Trxid { get; set; }
        public int Outputindex { get; set; }

        public UtxoKey(string trxid, int outputindex)
        {
            Trxid = trxid;
            Outputindex = outputindex;
        }

        public override bool Equals(object obj)
        {
            if (!(obj is UtxoKey))
                return false;

            var key = (UtxoKey)obj;
            return Trxid == key.Trxid && Outputindex == key.Outputindex;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Trxid, Outputindex);
        }
    }

    private async Task ShowTransactionJsonModal()
    {
        rawTransactionJson = PrepareTransactionDetails();
        showRawTransactionModal = true;
    }

    private string PrepareTransactionDetails()
    {
        var transactionDetails = new
        {
            ProjectIdentifier = project.ProjectIdentifier,
            TotalSpent = signedTransaction.Transaction.Outputs.Sum(s => s.Value.ToUnit(MoneyUnit.BTC)),
            MinerFee = Money.Satoshis(signedTransaction.TransactionFee).ToUnit(MoneyUnit.BTC),
            FeeRate = feeData.SelectedFeeEstimation.FeeRate,
            Confirmations = feeData.SelectedFeeEstimation.Confirmations,
            Utxos = selectedUtxos.Select(utxo => new
            {
                Stage = GetStageIndexForUtxo(utxo.Key),
                TransactionId = utxo.Key.Trxid,
                OutputIndex = utxo.Key.Outputindex
            }).ToList()
        };

        return JsonSerializer.Serialize(transactionDetails, new JsonSerializerOptions { WriteIndented = true });
    }

    private void HandleRawTransactionModalVisibility(bool isVisible)
    {
        showRawTransactionModal = isVisible;
    }

    private void ReleaseFundsToInvestors(MouseEventArgs e)
    {
        NavigationManager.NavigateTo($"/unfunded/{ProjectId}");
    }
}