@page "/messages"
@page "/messages/{ProjectId}"
@page "/messages/{ProjectId}/{ChatMode}"
@page "/messages/{ProjectId}/{ChatMode}/{PartnerPubKey}"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Client.Shared
@using Blockcore.NBitcoin.DataEncoders
@using System.Security.Cryptography
@using Angor.Client.Models
@using Angor.Shared.Utilities
@using Blockcore.NBitcoin
@using Angor.Shared
@using Nostr.Client.Messages
@using System.Collections.ObjectModel
@using System.Timers
@using System.Reactive.Linq

@inject IClientStorage storage
@inject IWalletStorage _walletStorage
@inject IDerivationOperations _derivationOperations
@inject NavigationManager NavigationManager
@inject IIndexerService _IndexerService
@inject IRelayService _RelayService
@inject INostrCommunicationFactory _nostrCommunicationFactory
@inject ISignService _SignService
@inject ISerializer serializer
@inject IEncryptionService _encryptionService
@inject IJSRuntime JS
@inject NavMenuState NavMenuState
@inject NostrConversionHelper NostrHelper
@inject INetworkService _NetworkService
@implements IDisposable

@inherits BaseComponent

<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="message" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Messages</h5>
            </div>
            <div class="header-actions">
                <button class="btn btn-border-success"
                        @onclick="RefreshProjects"
                        disabled="@refreshSpinner"
                        title="Refresh">
                    @if (refreshSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <Icon IconName="refresh" Height="24" Width="24" />
                        <span class="button-text ms-2">Refresh</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="row mt-0 g-4">
    <div class="col-md-4">
        <!-- Contact/Project List -->
        <div class="card card-body mb-4">
            @if (showingInvestorsInSidebar && currentFounderProject != null)
            {
                <!-- Investors List in Sidebar -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <button class="btn btn-sm btn-border" @onclick="BackToProjects">
                        <Icon IconName="arrow-left" Height="16" Width="16" />
                        <span class="ms-1">Back to Projects</span>
                    </button>
                    <h6 class="mb-0">Project Investors</h6>
                </div>

                @if (loadingInvestors)
                {
                    <div class="d-flex justify-content-center my-4">
                        <div class="loader"></div>
                    </div>
                }
                else if (!projectInvestors.Any())
                {
                    <div class="info-alert my-4">
                        <Icon IconName="info" Class="alert-icon" Width="24" Height="24" />
                        <p class="text-warning">
                            This project doesn't have any investors yet.
                        </p>
                    </div>
                }
                else
                {
                    <div class="investors-list mt-3">
                        @foreach (var investor in projectInvestors)
                        {
                            <div class="contact-item" @onclick="() => StartChatWithInvestor(investor)">
                                <div class="contact-avatar">
                                    <div class="avatar-placeholder">
                                        <Icon IconName="user" Height="24" Width="24" />
                                    </div>
                                </div>
                                <div class="contact-info">
                                    <div class="contact-name">@GetTruncatedNpub(investor.InvestorNPub)</div>
                                    <div class="contact-preview">@investor.TotalAmount.ToUnitBtc() @network.CoinTicker</div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <div class="tab-container">
                    <div class="tabs-wrapper">
                        <div class="tab-item @(activeTab == 1 ? "active" : "")" @onclick="() => SetActiveTab(1)" data-cy="investments-tab">
                            <div class="tab-content">
                                <div class="tab-icon @(activeTab == 1 ? "heartbeat" : "")" aria-hidden="true">
                                    <Icon IconName="portfolio" Height="20" Width="20" />
                                </div>
                                <span class="tab-label">Investments</span>
                            </div>
                        </div>

                        <div class="tab-item @(activeTab == 2 ? "active" : "")" @onclick="() => SetActiveTab(2)" data-cy="founder-tab">
                            <div class="tab-content">
                                <div class="tab-icon @(activeTab == 2 ? "heartbeat" : "")" aria-hidden="true">
                                    <Icon IconName="founder" Height="20" Width="20" />
                                </div>
                                <span class="tab-label">Projects</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="input-group mt-3 mb-3">
                    <input type="text" class="form-control" placeholder="Search contacts..." @bind="searchQuery" @oninput="SearchContacts">
                    <button class="btn btn-border" type="button">
                        <Icon IconName="search" />
                    </button>
                </div>

                <div class="contacts-list mt-3">
                    @if (activeTab == 1)
                    {
                        <!-- Investments List -->
                        @if (!filteredInvestorProjects.Any())
                        {
                            <div class="text-center p-3">
                                <p class="text-muted">No investments found.</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var project in filteredInvestorProjects)
                            {
                                <div class="contact-item @(currentChat?.ProjectId == project.ProjectInfo.ProjectIdentifier && !isFounderChat ? "active" : "")" @onclick="() => SelectInvestorChat(project)">
                                    <div class="contact-avatar">
                                        @if (!string.IsNullOrEmpty(project.Metadata?.Picture))
                                        {
                                            <img src="@project.Metadata.Picture" alt="Project" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';">
                                        }
                                        else
                                        {
                                            <div class="avatar-placeholder">
                                                <Icon IconName="project" Height="24" Width="24" />
                                            </div>
                                        }
                                    </div>
                                    <div class="contact-info">
                                        <div class="contact-name">@(project.Metadata?.Name ?? "Project " + project.ProjectInfo.ProjectIdentifier.Substring(0, 8))</div>
                                        <div class="contact-preview">@project.ProjectInfo.ProjectIdentifier.Substring(0, 8)...</div>
                                    </div>
                                    @if (unreadMessages.ContainsKey($"investor-{project.ProjectInfo.ProjectIdentifier}") && unreadMessages[$"investor-{project.ProjectInfo.ProjectIdentifier}"] > 0)
                                    {
                                        <div class="message-badge">@unreadMessages[$"investor-{project.ProjectInfo.ProjectIdentifier}"]</div>
                                    }
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <!-- Founder Projects List -->
                        @if (!filteredFounderProjects.Any())
                        {
                            <div class="text-center p-3">
                                <p class="text-muted">No projects found.</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var project in filteredFounderProjects)
                            {
                                <div class="contact-item @(currentChat?.ProjectId == project.ProjectInfo.ProjectIdentifier && isFounderChat ? "active" : "")" @onclick="() => SelectFounderChat(project)">
                                    <div class="contact-avatar">
                                        @if (!string.IsNullOrEmpty(project.Metadata?.Picture))
                                        {
                                            <img src="@project.Metadata.Picture" alt="Project" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';">
                                        }
                                        else
                                        {
                                            <div class="avatar-placeholder">
                                                <Icon IconName="founder" Height="24" Width="24" />
                                            </div>
                                        }
                                    </div>
                                    <div class="contact-info">
                                        <div class="contact-name">@(project.Metadata?.Name ?? "Project " + project.ProjectInfo.ProjectIdentifier.Substring(0, 8))</div>
                                        <div class="contact-preview">@(projectInvestorCounts.ContainsKey(project.ProjectInfo.ProjectIdentifier) ? projectInvestorCounts[project.ProjectInfo.ProjectIdentifier] : 0) investors</div>
                                    </div>
                                    @if (unreadMessages.ContainsKey($"founder-{project.ProjectInfo.ProjectIdentifier}") && unreadMessages[$"founder-{project.ProjectInfo.ProjectIdentifier}"] > 0)
                                    {
                                        <div class="message-badge">@unreadMessages[$"founder-{project.ProjectInfo.ProjectIdentifier}"]</div>
                                    }
                                </div>
                            }
                        }
                    }
                </div>
            }
        </div>
    </div>

    <div class="col-md-8">
        <!-- Chat Interface -->
        <div class="card card-body chat-container">
            @if (currentChat == null)
            {
                <div class="empty-chat-state">
                    <div class="empty-chat-icon">
                        <Icon IconName="message" Width="64" Height="64" />
                    </div>
                    <h5>Select a contact to start messaging</h5>
                    <p class="text-muted">Choose a project or investment to begin your conversation</p>
                </div>
            }
            else
            {
                <!-- Chat Header -->
                <div class="chat-header">
                    <div class="d-flex align-items-center">
                        <div class="chat-avatar me-3">
                            @if (!string.IsNullOrEmpty(currentChat.Picture))
                            {
                                <img src="@currentChat.Picture" alt="Chat" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';">
                            }
                            else
                            {
                                <div class="avatar-placeholder">
                                    <Icon IconName="@(isFounderChat ? "founder" : "project")" Height="24" Width="24" />
                                </div>
                            }
                        </div>
                        <div>
                            <h5 class="mb-0">@currentChat.Name</h5>
                            <small class="text-muted">@currentChat.Description</small>
                        </div>
                    </div>
                    <div>
                        <button class="btn btn-border" @onclick="ShowIdentitiesModal">
                            <Icon IconName="key" Height="20" Width="20" />
                        </button>
                    </div>
                </div>

                <!-- Chat Messages -->
                <div class="chat-messages" @ref="messagesContainerRef">
                    @if (isLoadingMessages)
                    {
                        <div class="loading-messages">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading messages...</p>
                        </div>
                    }
                    else if (!chatMessages.Any())
                    {
                        <div class="empty-messages">
                            <Icon IconName="message" Width="32" Height="32" />
                            <p>No messages yet. Start a conversation!</p>
                        </div>
                    }
                    else
                    {
                        <div class="messages-list">
                            @foreach (var message in chatMessages)
                            {
                                <div class="message-item @(message.IsFromCurrentUser ? "outgoing" : "incoming")">
                                    <div class="message-bubble">
                                        <div class="message-content">@message.Content</div>
                                        <div class="message-timestamp">@message.Timestamp.ToLocalTime().ToString("HH:mm")</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Chat Input -->
                <div class="chat-input">
                    <div class="input-group">
                        <textarea class="form-control"
                                  placeholder="Type a message..."
                                  @bind="newMessage"
                                  @onkeypress="@(async e => { if(e.Key is "Enter" or "NumpadEnter") await SendMessageAndCheckPassword(); })"
                                  disabled="@isSendingMessage" />
                        <button class="btn btn-border-success"
                                @onclick="SendMessageAndCheckPassword"
                                disabled="@isSendingMessage">
                            @if (isSendingMessage)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            }
                            else
                            {
                                <Icon IconName="send" Height="20" Width="20" />
                            }
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Identities Modal -->
@if (showIdentitiesModal)
{
    <div class="modal-wrapper">
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content modern-modal animate-fade-in">
                    <div class="modal-header border-0 pb-0">
                        <div class="d-flex align-items-center">
                            <Icon IconName="key" Height="32" Width="32" class="me-2" />
                            <h5 class="modal-title">Nostr Identities</h5>
                        </div>
                        <button class="btn-close-custom" @onclick="() => showIdentitiesModal = false">
                            <Icon IconName="close-circle" Height="24" Width="24" />
                        </button>
                    </div>

                    <div class="modal-body py-4">
                        <div class="d-flex flex-column gap-3">
                            <div class="info-card p-3 mt-2 animate-fade-in">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="info-label mb-2">Your NPUB:</div>
                                    <button class="btn btn-sm btn-border" @onclick="() => CopyToClipboard(currentUserNpub)">
                                        <Icon IconName="copy" Width="16" Height="16" />
                                    </button>
                                </div>
                                <div class="info-value text-break word-wrap">
                                    @currentUserNpub
                                </div>
                            </div>

                            <div class="info-card p-3 mt-2 animate-fade-in">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="info-label mb-2">Partner NPUB:</div>
                                    <button class="btn btn-sm btn-border" @onclick="() => CopyToClipboard(partnerNpub)">
                                        <Icon IconName="copy" Width="16" Height="16" />
                                    </button>
                                </div>
                                <div class="info-value text-break word-wrap">
                                    @partnerNpub
                                </div>
                            </div>

                            <button type="button" class="btn btn-border-warning w-100" @onclick="ShowNsecAndCheckPassword">
                                <Icon IconName="key" Width="20" Height="20" class="me-2" />
                                <span>Show NSEC</span>
                            </button>

                            @if (showNsec)
                            {
                                <div class="info-card p-3 mt-2 animate-fade-in">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="info-label mb-2">NSEC (Private Key):</div>
                                        <button class="btn btn-sm btn-border" @onclick="() => CopyToClipboard(nsecValue)">
                                            <Icon IconName="copy" Width="16" Height="16" />
                                        </button>
                                    </div>
                                    <div class="info-value text-break word-wrap">
                                        @nsecValue
                                    </div>
                                    <div class="mt-2 alert alert-warning">
                                        <strong>Warning:</strong> Never share your private key with anyone.
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="modal-footer border-0 pt-0">
                        <button type="button" class="btn btn-border-warning" @onclick="() => showIdentitiesModal = false">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Investors List Modal -->
@if (showInvestorsModal)
{
    <div class="modal-wrapper">
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content modern-modal animate-fade-in">
                    <div class="modal-header border-0 pb-0">
                        <div class="d-flex align-items-center">
                            <Icon IconName="users" Height="32" Width="32" class="me-2" />
                            <h5 class="modal-title">Project Investors</h5>
                        </div>
                        <button class="btn-close-custom" @onclick="() => showInvestorsModal = false">
                            <Icon IconName="close-circle" Height="24" Width="24" />
                        </button>
                    </div>

                    <div class="modal-body py-4">
                        @if (loadingInvestors)
                        {
                            <div class="d-flex justify-content-center my-4">
                                <div class="loader"></div>
                            </div>
                        }
                        else if (!projectInvestors.Any())
                        {
                            <div class="info-alert my-4">
                                <Icon IconName="info" Class="alert-icon" Width="24" Height="24" />
                                <p class="text-warning">
                                    This project doesn't have any investors yet.
                                </p>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive form-control">
                                <table class="table align-items-center mb-0">
                                    <thead>
                                        <tr>
                                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Investor</th>
                                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Amount</th>
                                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var investor in projectInvestors)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex flex-column">
                                                        <h6 class="mb-0 text-sm">@GetTruncatedNpub(investor.InvestorPublicKey)</h6>
                                                        <p class="text-xs text-secondary mb-0">Investor</p>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-gradient-success">@investor.TotalAmount.ToUnitBtc() @network.CoinTicker</span>
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-border-success" @onclick="() => StartChatWithInvestor(investor)">
                                                        <Icon IconName="chat" Height="16" Width="16" class="me-1" />
                                                        Chat
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>

                    <div class="modal-footer border-0 pt-0">
                        <button type="button" class="btn btn-border-warning" @onclick="() => showInvestorsModal = false">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Core components
    private NotificationComponent notificationComponent;
    private PasswordComponent passwordComponent;
    private ElementReference messagesContainerRef;
    private Timer refreshTimer;
    private IDisposable messageSubscription;

    // UI state
    private int activeTab = 1;
    private bool refreshSpinner = false;
    private bool isLoadingMessages = false;
    private bool isSendingMessage = false;
    private string searchQuery = "";
    private string newMessage = "";
    private bool showingInvestorsInSidebar = false;  // New state variable to track investor display mode

    // Projects
    private List<InvestorProject> investorProjects = new();
    private List<InvestorProject> filteredInvestorProjects = new();
    private List<FounderProject> founderProjects = new();
    private List<FounderProject> filteredFounderProjects = new();
    private Dictionary<string, int> projectInvestorCounts = new();
    private Dictionary<string, int> unreadMessages = new();

    // Chat properties
    private bool showIdentitiesModal = false;
    private bool isFounderChat = false;
    private string currentUserNpub = "";
    private string partnerNpub = "";
    private string nsecValue = "";
    private bool showNsec = false;
    private string currentUserPrivateKeyHex = "";
    private ChatSession currentChat;
    private List<ChatMessage> chatMessages = new();

    // Investors modal
    private bool showInvestorsModal = false;
    private bool loadingInvestors = false;
    private List<InvestmentInfo> projectInvestors = new();
    private FounderProject currentFounderProject;

    //  navigation parameters - now from route instead of query
    [Parameter]
    public string ProjectId { get; set; }

    [Parameter]
    public string PartnerPubKey { get; set; }

    [Parameter]
    public string ChatMode { get; set; }

    // Chat Models
    public class ChatSession
    {
        public string ProjectId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Picture { get; set; }
        public string UserNpub { get; set; }
        public string PartnerNpub { get; set; }
        public string UserPrivateKeyHex { get; set; }
        public string PartnerPubKeyHex { get; set; } // Added to store the raw hex format
    }

    public class ChatMessage
    {
        public string Id { get; set; }
        public string Content { get; set; }
        public string SenderPubkey { get; set; }
        public DateTime Timestamp { get; set; }
        public bool IsFromCurrentUser { get; set; }
    }

    public class InvestmentInfo
    {
        public string InvestorPublicKey { get; set; }
        public string InvestorNPub { get; set; }
        public long TotalAmount { get; set; }
        public string TransactionId { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set active menu
        NavMenuState.SetActivePage("messages");

        if (hasWallet)
        {
            try
            {
                await LoadProjects();

                // Check if we have chat parameters
                if (!string.IsNullOrEmpty(ProjectId))
                {
                    await InitializeChat();
                }
            }
            catch (Exception ex)
            {
                notificationComponent?.ShowErrorMessage("An error occurred during initialization", ex);
            }

            // Initialize timer to periodically refresh messages
            refreshTimer = new Timer(15000); // 15 seconds
            refreshTimer.Elapsed += async (sender, e) => await RefreshCurrentChat();
            refreshTimer.AutoReset = true;
            refreshTimer.Enabled = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // No need for additional initialization
        }

        // Scroll to bottom of the messages container when new messages arrive
        if (messagesContainerRef.Context != null && chatMessages.Any())
        {
            await JS.InvokeVoidAsync("scrollToBottom", messagesContainerRef);
        }
    }

    private async Task LoadProjects()
    {
        refreshSpinner = true;
        StateHasChanged();

        try
        {
            // Load investor projects
            investorProjects = storage?.GetInvestmentProjects()
                .Where(p => !string.IsNullOrEmpty(p.TransactionId))
                .ToList() ?? new List<InvestorProject>();

            filteredInvestorProjects = investorProjects.ToList();

            // Load founder projects
            founderProjects = storage?.GetFounderProjects()
                .Where(p => !string.IsNullOrEmpty(p.CreationTransactionId))
                .ToList() ?? new List<FounderProject>();

            filteredFounderProjects = founderProjects.ToList();

            // Get investor counts for founder projects
            foreach (var project in founderProjects)
            {
                var count = await GetInvestorCount(project.ProjectInfo.ProjectIdentifier);
                projectInvestorCounts[project.ProjectInfo.ProjectIdentifier] = count;
            }
        }
        catch (Exception ex)
        {
            notificationComponent?.ShowErrorMessage("Failed to load projects", ex);
        }
        finally
        {
            refreshSpinner = false;
            StateHasChanged();
        }
    }

    private async Task<int> GetInvestorCount(string projectIdentifier)
    {
        try
        {
            var investments = await _IndexerService.GetInvestmentsAsync(projectIdentifier);
            return investments?.Count ?? 0;
        }
        catch
        {
            return 0;
        }
    }

    private void SetActiveTab(int tabNumber)
    {
        activeTab = tabNumber;
    }

    private void SearchContacts(ChangeEventArgs e)
    {
        var query = e.Value?.ToString().ToLower() ?? "";
        searchQuery = query;

        if (string.IsNullOrWhiteSpace(query))
        {
            filteredInvestorProjects = investorProjects.ToList();
            filteredFounderProjects = founderProjects.ToList();
        }
        else
        {
            filteredInvestorProjects = investorProjects
                .Where(p => p.Metadata?.Name?.ToLower().Contains(query) == true ||
                           p.ProjectInfo.ProjectIdentifier.ToLower().Contains(query))
                .ToList();

            filteredFounderProjects = founderProjects
                .Where(p => p.Metadata?.Name?.ToLower().Contains(query) == true ||
                            p.ProjectInfo.ProjectIdentifier.ToLower().Contains(query))
                .ToList();
        }

        StateHasChanged();
    }

    private async Task RefreshProjects()
    {
        await LoadProjects();
    }

    private async Task SelectInvestorChat(InvestorProject project)
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(async () =>
            {
                await InitializeInvestorChat(project);
                // Update URL without adding to browser history - using route format
                UpdateBrowserUrl(project.ProjectInfo.ProjectIdentifier, "investor", null);
            });
        }
        else
        {
            await InitializeInvestorChat(project);
            // Update URL without adding to browser history - using route format
            UpdateBrowserUrl(project.ProjectInfo.ProjectIdentifier, "investor", null);
        }
    }

    private async Task InitializeInvestorChat(InvestorProject project)
    {
        try
        {
            isLoadingMessages = true;
            isFounderChat = false;
            chatMessages.Clear();
            StateHasChanged();

            var words = await passwordComponent.GetWalletAsync();
            var investorNostrPrivateKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);
            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(investorNostrPrivateKey.ToBytes());
            currentUserPrivateKeyHex = nostrPrivateKeyHex;

            string investorNpub = NostrHelper.ConvertHexToNpub(project.InvestorNPub) ?? project.InvestorNPub;
            string founderNpub = NostrHelper.ConvertHexToNpub(project.ProjectInfo.NostrPubKey) ?? project.ProjectInfo.NostrPubKey;

            // Get the raw format of the partner's public key (not npub format)
            // Store both hex and npub formats to ensure proper communication
            string partnerPubKeyHex = project.ProjectInfo.NostrPubKey;
            if (partnerPubKeyHex.StartsWith("npub"))
            {
                partnerPubKeyHex = SafeConvertBech32ToHex(partnerPubKeyHex);
                Console.WriteLine($"Founder pubkey (converted): {partnerPubKeyHex}");
            }
            else
            {
                Console.WriteLine($"Founder pubkey (hex): {partnerPubKeyHex}");
            }

            currentUserNpub = investorNpub;
            partnerNpub = founderNpub;

            currentChat = new ChatSession
                {
                    ProjectId = project.ProjectInfo.ProjectIdentifier,
                    Name = project.Metadata?.Name ?? $"Project {project.ProjectInfo.ProjectIdentifier.Substring(0, 8)}",
                    Description = "Chat with project founder",
                    Picture = project.Metadata?.Picture,
                    UserNpub = investorNpub,
                    PartnerNpub = founderNpub,
                    UserPrivateKeyHex = nostrPrivateKeyHex,
                    PartnerPubKeyHex = partnerPubKeyHex // Store the raw hex format
                };

            // Reset unread counter
            string chatKey = $"investor-{project.ProjectInfo.ProjectIdentifier}";
            if (unreadMessages.ContainsKey(chatKey))
            {
                unreadMessages[chatKey] = 0;
            }

            // Load messages
            await LoadChatMessages();

            // Subscribe to new messages
            SubscribeToMessages();
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage("Failed to initialize chat", ex);
        }
        finally
        {
            isLoadingMessages = false;
            StateHasChanged();
        }
    }

    private async Task SelectFounderChat(FounderProject project)
    {
        // Instead of showing modal, we'll load investors in sidebar
        currentFounderProject = project;
        showingInvestorsInSidebar = true;
        loadingInvestors = true;

        // Update URL with project ID and mode - using route format
        UpdateBrowserUrl(project.ProjectInfo.ProjectIdentifier, "founder", null);

        StateHasChanged();

        try
        {
            var investments = await _IndexerService.GetInvestmentsAsync(project.ProjectInfo.ProjectIdentifier);

            // Convert the investments to our local InvestmentInfo model
            projectInvestors = investments.Select(inv => new InvestmentInfo
                {
                    InvestorPublicKey = inv.InvestorPublicKey,
                    InvestorNPub = inv.InvestorPublicKey,
                    TotalAmount = inv.TotalAmount,
                    TransactionId = inv.TransactionId
                }).ToList();

            if (projectInvestors.Count == 0)
            {
                notificationComponent.ShowNotificationMessage("This project has no investors yet.");
            }
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage("Failed to load investors", ex);
            projectInvestors = new List<InvestmentInfo>();
        }
        finally
        {
            loadingInvestors = false;
            StateHasChanged();
        }
    }

    private async Task ViewInvestors(FounderProject project, bool forChat = false)
    {
        // If forChat is true, we use the sidebar approach instead of modal
        if (forChat)
        {
            await SelectFounderChat(project);
            return;
        }

        // Original implementation for modal display (kept for compatibility with other features)
        currentFounderProject = project;
        showInvestorsModal = true;
        loadingInvestors = true;
        StateHasChanged();

        try
        {
            var investments = await _IndexerService.GetInvestmentsAsync(project.ProjectInfo.ProjectIdentifier);

            projectInvestors = investments.Select(inv => new InvestmentInfo
                {
                    InvestorPublicKey = inv.InvestorPublicKey,
                    InvestorNPub = inv.InvestorPublicKey,
                    TotalAmount = inv.TotalAmount,
                    TransactionId = inv.TransactionId
                }).ToList();

            if (!forChat && projectInvestors.Count == 0)
            {
                notificationComponent.ShowNotificationMessage("This project has no investors yet.");
            }
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage("Failed to load investors", ex);
            projectInvestors = new List<InvestmentInfo>();
        }
        finally
        {
            loadingInvestors = false;
            StateHasChanged();
        }
    }

    private async Task StartChatWithInvestor(InvestmentInfo investor)
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(async () =>
            {
                await InitializeFounderChat(investor);
                // Update URL with project ID, mode, and investor pubkey - using route format
                UpdateBrowserUrl(currentFounderProject.ProjectInfo.ProjectIdentifier, "founder", investor.InvestorPublicKey);
            });
        }
        else
        {
            await InitializeFounderChat(investor);
            // Update URL with project ID, mode, and investor pubkey - using route format
            UpdateBrowserUrl(currentFounderProject.ProjectInfo.ProjectIdentifier, "founder", investor.InvestorPublicKey);
        }
    }

    private async Task InitializeFounderChat(InvestmentInfo investor)
    {
        try
        {
            isLoadingMessages = true;
            isFounderChat = true;
            chatMessages.Clear();
            showInvestorsModal = false;
            // Keep showingInvestorsInSidebar as true so the state persists
            StateHasChanged();

            if (currentFounderProject == null) return;

            var words = await passwordComponent.GetWalletAsync();
            var founderNostrPrivateKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, currentFounderProject.ProjectInfo.FounderKey);
            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(founderNostrPrivateKey.ToBytes());
            currentUserPrivateKeyHex = nostrPrivateKeyHex;

            string founderNpub = NostrHelper.ConvertHexToNpub(currentFounderProject.ProjectInfo.NostrPubKey) ??
                               currentFounderProject.ProjectInfo.NostrPubKey;
            string investorNpub = NostrHelper.ConvertHexToNpub(investor.InvestorPublicKey) ?? investor.InvestorPublicKey;

            // Get the raw hex format of the partner's public key
            string partnerPubKeyHex = investor.InvestorPublicKey;
            if (investorNpub.StartsWith("npub") && partnerPubKeyHex.StartsWith("npub"))
            {
                partnerPubKeyHex = SafeConvertBech32ToHex(investorNpub);
            }

            currentUserNpub = founderNpub;
            partnerNpub = investorNpub;

            currentChat = new ChatSession
                {
                    ProjectId = currentFounderProject.ProjectInfo.ProjectIdentifier,
                    Name = $"Investor {GetTruncatedNpub(investor.InvestorPublicKey)}",
                    Description = $"Investment: {investor.TotalAmount.ToUnitBtc()} {network.CoinTicker}",
                    Picture = null,
                    UserNpub = founderNpub,
                    PartnerNpub = investorNpub,
                    UserPrivateKeyHex = nostrPrivateKeyHex,
                    PartnerPubKeyHex = partnerPubKeyHex // Store the raw hex format
                };

            // Reset unread counter
            string chatKey = $"founder-{currentFounderProject.ProjectInfo.ProjectIdentifier}";
            if (unreadMessages.ContainsKey(chatKey))
            {
                unreadMessages[chatKey] = 0;
            }

            // Load messages
            await LoadChatMessages();

            // Subscribe to new messages
            SubscribeToMessages();
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage("Failed to initialize chat", ex);
        }
        finally
        {
            isLoadingMessages = false;
            StateHasChanged();
        }
    }

    private async Task LoadChatMessages()
    {
        if (currentChat == null) return;

        chatMessages.Clear();

        try
        {
            var nostrClient = _nostrCommunicationFactory.GetOrCreateClient(_NetworkService);

            // If we have an existing subscription, dispose of it
            messageSubscription?.Dispose();

            // Create a new subscription for direct messages
            var subscriptionId = $"chat-{DateTime.UtcNow.Ticks}";

            // Load chat history - we need both sent messages (where we're the author)
            // and received messages (where we're tagged as P)
            await _RelayService.LookupDirectMessagesForPubKeyAsync(
                currentChat.PartnerNpub,
                DateTime.UtcNow.AddDays(-7), // Get last 7 days of messages
                100, // Limit to 100 messages
                async eventMessage => await ProcessChatMessage(eventMessage),
                SafeConvertBech32ToHex(currentChat.UserNpub) // Messages from current user to partner
            );

            await _RelayService.LookupDirectMessagesForPubKeyAsync(
                currentChat.UserNpub,
                DateTime.UtcNow.AddDays(-7),
                100,
                async eventMessage => await ProcessChatMessage(eventMessage),
                SafeConvertBech32ToHex(currentChat.PartnerNpub) // Messages from partner to current user
            );
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage("Failed to load chat messages", ex);
        }
    }

    private void SubscribeToMessages()
    {
        // If we already have a subscription, dispose it
        messageSubscription?.Dispose();

        // Get the client
        var nostrClient = _nostrCommunicationFactory.GetOrCreateClient(_NetworkService);

        // Subscribe to incoming messages with safer hex conversion
        messageSubscription = nostrClient.Streams.EventStream
            .Where(_ => _.Event?.Kind == NostrKind.EncryptedDm)
            .Where(_ => (_.Event?.Pubkey == SafeConvertBech32ToHex(currentChat.PartnerNpub) &&
                          _.Event?.Tags?.FindFirstTagValue(NostrEventTag.ProfileIdentifier) == SafeConvertBech32ToHex(currentChat.UserNpub)) ||
                        (_.Event?.Pubkey == SafeConvertBech32ToHex(currentChat.UserNpub) &&
                          _.Event?.Tags?.FindFirstTagValue(NostrEventTag.ProfileIdentifier) == SafeConvertBech32ToHex(currentChat.PartnerNpub)))
            .Subscribe(async messageEvent =>
            {
                await ProcessChatMessage(messageEvent.Event);
                StateHasChanged();
            });
    }

    private async Task ProcessChatMessage(NostrEvent eventMessage)
    {
        try
        {
            if (eventMessage == null || string.IsNullOrEmpty(eventMessage.Content)) return;

            // Check if we already have this message
            if (chatMessages.Any(m => m.Id == eventMessage.Id)) return;

            // Determine if this message is from the current user using safer conversion
            bool isFromCurrentUser = eventMessage.Pubkey == SafeConvertBech32ToHex(currentChat.UserNpub);

            // Try to decrypt the message
            string decryptedContent;
            try
            {
                // For decryption, use the direct pubkey from the event
                string partnerPubKeyHex = isFromCurrentUser
                    ? eventMessage.Tags?.FindFirstTagValue(NostrEventTag.ProfileIdentifier)
                    : eventMessage.Pubkey;

                // Make sure partner key is properly formatted for decryption
                string formattedPartnerKey = FormatNostrPubkeyForEncryption(partnerPubKeyHex);

                // Debug info
                Console.WriteLine($"Decrypting message - Using formatted key: {formattedPartnerKey?.Substring(0, 10)}...");

                decryptedContent = await _encryptionService.DecryptNostrContentAsync(
                    currentChat.UserPrivateKeyHex,
                    formattedPartnerKey,
                    eventMessage.Content
                );

                // If decryption was successful, update the partner's pubkey in the chat session
                if (!isFromCurrentUser && !string.IsNullOrEmpty(formattedPartnerKey))
                {
                    currentChat.PartnerPubKeyHex = formattedPartnerKey;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Decryption error: {ex.Message}");

                try
                {
                    // Try alternative formatting if initial decryption fails
                    string alternativeKey = isFromCurrentUser
                        ? FormatNostrPubkeyForEncryption(SafeConvertBech32ToHex(currentChat.PartnerNpub))
                        : FormatNostrPubkeyForEncryption(SafeConvertBech32ToHex(currentChat.UserNpub));

                    Console.WriteLine($"Retrying with alternative key format: {alternativeKey.Substring(0, 10)}...");

                    decryptedContent = await _encryptionService.DecryptNostrContentAsync(
                        currentChat.UserPrivateKeyHex,
                        alternativeKey,
                        eventMessage.Content
                    );
                }
                catch (Exception fallbackEx)
                {
                    Console.WriteLine($"Fallback decryption also failed: {fallbackEx.Message}");
                    decryptedContent = "[Could not decrypt message]";
                }
            }

            // Create the chat message
            var chatMessage = new ChatMessage
                {
                    Id = eventMessage.Id,
                    Content = decryptedContent,
                    SenderPubkey = eventMessage.Pubkey,
                    Timestamp = eventMessage.CreatedAt.GetValueOrDefault(DateTime.UtcNow),
                    IsFromCurrentUser = isFromCurrentUser
                };

            // Add to our list and sort by timestamp
            chatMessages.Add(chatMessage);
            chatMessages = chatMessages
                .OrderBy(m => m.Timestamp)
                .ToList();

            // If the message is not from current user, mark as unread
            if (!isFromCurrentUser)
            {
                string chatKey = isFounderChat ?
                    $"founder-{currentChat.ProjectId}" :
                    $"investor-{currentChat.ProjectId}";

                if (!unreadMessages.ContainsKey(chatKey))
                {
                    unreadMessages[chatKey] = 0;
                }

                unreadMessages[chatKey]++;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Just log the error but don't show notification to avoid spamming the user
            Console.WriteLine($"Error processing message: {ex.Message}");
        }
    }

    private async Task RefreshCurrentChat()
    {
        if (currentChat != null)
        {
            await InvokeAsync(async () =>
            {
                await LoadChatMessages();
                StateHasChanged();
            });
        }
    }

    private async Task SendMessageAndCheckPassword()
    {
        if (string.IsNullOrWhiteSpace(newMessage)) return;

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(SendMessage);
        }
        else
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (currentChat == null || string.IsNullOrWhiteSpace(newMessage)) return;

        isSendingMessage = true;
        StateHasChanged();

        try
        {
            // Get keys for encryption
            string userPrivKey = currentChat.UserPrivateKeyHex;
            string partnerPubKey;

            try
            {
                // Get properly formatted partner key
                if (string.IsNullOrEmpty(currentChat.PartnerPubKeyHex))
                {
                    partnerPubKey = SafeConvertBech32ToHex(currentChat.PartnerNpub);
                    currentChat.PartnerPubKeyHex = partnerPubKey;
                }
                else
                {
                    partnerPubKey = currentChat.PartnerPubKeyHex;
                }

                // Format the key properly for encryption
                partnerPubKey = FormatNostrPubkeyForEncryption(partnerPubKey);

                Console.WriteLine($"Sending message with partner key: {partnerPubKey}");

                // Encrypt the content using the service
                string encryptedContent = await _encryptionService.EncryptNostrContentAsync(
                    userPrivKey,
                    partnerPubKey,
                    newMessage
                );

                // Send encrypted message using the existing method
                var sentMessageId = _RelayService.SendDirectMessagesForPubKeyAsync(
                    userPrivKey,
                    partnerPubKey,
                    encryptedContent,
                    response =>
                    {
                        Console.WriteLine($"Message send response: {(response != null ? "Success" : "No response")}");
                    }
                );

                Console.WriteLine($"Successfully sent message with ID: {sentMessageId}");

                // Add to chat UI
                var sentChatMessage = new ChatMessage
                    {
                        Id = sentMessageId,
                        Content = newMessage,
                        SenderPubkey = SafeConvertBech32ToHex(currentChat.UserNpub),
                        Timestamp = DateTime.UtcNow,
                        IsFromCurrentUser = true
                    };

                // Clear the input field
                newMessage = "";

                // Add message to UI
                chatMessages.Add(sentChatMessage);
                chatMessages = chatMessages
                    .OrderBy(m => m.Timestamp)
                    .ToList();

                // Save the working partner key for future use
                currentChat.PartnerPubKeyHex = partnerPubKey;
            }
            catch (Exception ex)
            {
                // Log the error
                Console.WriteLine($"First encryption attempt failed: {ex.Message}");
                Console.WriteLine("Attempting with alternative key format...");

                // Try a different key format as fallback
                try
                {
                    // Try alternative formatting of the key
                    partnerPubKey = SafeConvertBech32ToHex(currentChat.PartnerNpub);

                    // Ensure it's exactly 64 chars with no prefix
                    if (partnerPubKey.StartsWith("0x")) partnerPubKey = partnerPubKey.Substring(2);
                    partnerPubKey = partnerPubKey.PadLeft(64, '0').Substring(0, 64);

                    string encryptedContent = await _encryptionService.EncryptNostrContentAsync(
                        userPrivKey,
                        partnerPubKey,
                        newMessage
                    );

                    var fallbackMessageId = _RelayService.SendDirectMessagesForPubKeyAsync(
                        userPrivKey,
                        partnerPubKey,
                        encryptedContent,
                        null // No callback
                    );

                    // Add to chat UI
                    var fallbackChatMessage = new ChatMessage
                        {
                            Id = fallbackMessageId,
                            Content = newMessage,
                            SenderPubkey = SafeConvertBech32ToHex(currentChat.UserNpub),
                            Timestamp = DateTime.UtcNow,
                            IsFromCurrentUser = true
                        };

                    // Clear input field
                    newMessage = "";

                    // Add message to UI
                    chatMessages.Add(fallbackChatMessage);
                    chatMessages = chatMessages.OrderBy(m => m.Timestamp).ToList();

                    // Save the working key format
                    currentChat.PartnerPubKeyHex = partnerPubKey;
                }
                catch (Exception fallbackEx)
                {
                    throw new Exception($"Failed to send message: Original error: {ex.Message}, Fallback error: {fallbackEx.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage($"Failed to send message: {ex.Message}", ex);
            Console.WriteLine($"Error details: {ex}");
        }
        finally
        {
            isSendingMessage = false;
            StateHasChanged();
        }
    }

    private void ShowIdentitiesModal()
    {
        showNsec = false;
        showIdentitiesModal = true;
    }

    private void ShowNsecAndCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            showIdentitiesModal = false;
            passwordComponent.ShowPassword(RetrieveAndShowNsec);
        }
        else
        {
            RetrieveAndShowNsec();
        }
    }

    private async Task RetrieveAndShowNsec()
    {
        try
        {
            var words = await passwordComponent.GetWalletAsync();

            if (currentChat != null)
            {
                if (isFounderChat)
                {
                    // Get founder's nsec
                    var project = founderProjects.FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == currentChat.ProjectId);
                    if (project != null)
                    {
                        var founderNostrPrivateKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);
                        var nostrHexSecKey = Encoders.Hex.EncodeData(founderNostrPrivateKey.ToBytes());
                        nsecValue = NostrHelper.ConvertHexToNsec(nostrHexSecKey)!;
                    }
                }
                else
                {
                    // Get investor's nsec
                    var project = investorProjects.FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == currentChat.ProjectId);
                    if (project != null)
                    {
                        var investorNostrPrivateKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);
                        var nostrHexSecKey = Encoders.Hex.EncodeData(investorNostrPrivateKey.ToBytes());
                        nsecValue = NostrHelper.ConvertHexToNsec(nostrHexSecKey)!;
                    }
                }
            }

            showNsec = true;
            showIdentitiesModal = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage("Failed to retrieve NSEC: " + e.Message);
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        notificationComponent.ShowNotificationMessage("Copied to clipboard", 2);
    }

    private string GetTruncatedNpub(string npub)
    {
        if (string.IsNullOrEmpty(npub)) return "Unknown";
        if (npub.Length <= 12) return npub;
        return $"{npub.Substring(0, 6)}...{npub.Substring(npub.Length - 6)}";
    }

    private string GetTruncatedTxId(string txId)
    {
        if (string.IsNullOrEmpty(txId)) return "Unknown";
        if (txId.Length <= 16) return txId;
        return $"{txId.Substring(0, 8)}...{txId.Substring(txId.Length - 8)}";
    }

    public void Dispose()
    {
        // Dispose of subscriptions and timer
        messageSubscription?.Dispose();
        refreshTimer?.Dispose();
    }

    // Helper method to properly format public keys for Nostr encryption
    private string FormatNostrPubkeyForEncryption(string pubkeyInput)
    {
        try
        {
            if (string.IsNullOrEmpty(pubkeyInput))
                return null;

            string pubkeyHex = pubkeyInput;

            // Convert from npub to hex if necessary
            if (pubkeyInput.StartsWith("npub"))
            {
                pubkeyHex = SafeConvertBech32ToHex(pubkeyInput);

                // If conversion failed, try a basic regex cleanup as fallback
                if (string.IsNullOrEmpty(pubkeyHex) || pubkeyHex.StartsWith("npub"))
                {
                    // Failed to convert - log the error
                    Console.WriteLine("Failed to convert npub to hex, using original value");
                    pubkeyHex = pubkeyInput;
                }
                else
                {
                    Console.WriteLine($"Converted npub to hex: {pubkeyHex}");
                }
            }

            // Strip any prefix
            if (pubkeyHex.StartsWith("0x"))
                pubkeyHex = pubkeyHex.Substring(2);

            // Additional cleanup to ensure only valid hex characters
            pubkeyHex = new string(pubkeyHex.Where(c =>
                (c >= '0' && c <= '9') ||
                (c >= 'a' && c <= 'f') ||
                (c >= 'A' && c <= 'F')).ToArray());

            // Ensure correct length (Nostr uses 32-byte keys = 64 hex chars)
            if (pubkeyHex.Length > 64)
                pubkeyHex = pubkeyHex.Substring(pubkeyHex.Length - 64); // Get the last 64 chars
            else if (pubkeyHex.Length < 64)
                pubkeyHex = pubkeyHex.PadLeft(64, '0'); // Pad with zeros if too short

            // Final validation
            if (!System.Text.RegularExpressions.Regex.IsMatch(pubkeyHex, "^[0-9a-fA-F]{64}$"))
            {
                Console.WriteLine($"Warning: Generated key may not be valid: {pubkeyHex}"); // Fixed missing semicolon here
                // Instead of throwing exception, return best effort result
            }

            return pubkeyHex;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error formatting public key: {ex.Message}");
            // Instead of throwing an exception, try to return a usable string

            // Last resort cleanup - strip non-hex chars and pad/truncate
            try
            {
                var cleanedKey = new string((pubkeyInput ?? "").Where(c =>
                    (c >= '0' && c <= '9') ||
                    (c >= 'a' && c <= 'f') ||
                    (c >= 'A' && c <= 'F')).ToArray());

                if (cleanedKey.Length > 64)
                    cleanedKey = cleanedKey.Substring(cleanedKey.Length - 64);
                else if (cleanedKey.Length < 64)
                    cleanedKey = cleanedKey.PadLeft(64, '0');

                return cleanedKey;
            }
            catch
            {
                // If all else fails, return a string of zeros (valid hex, but likely wrong key)
                return "0000000000000000000000000000000000000000000000000000000000000000";
            }
        }
    }

    private void BackToProjects()
    {
        showingInvestorsInSidebar = false;
        loadingInvestors = false;
        projectInvestors = new List<InvestmentInfo>();

        // Reset URL to base messages path
        NavigationManager.NavigateTo("/messages", false);
    }

    private async Task InitializeChat()
    {
        try
        {
            // Check if we have required parameters
            if (string.IsNullOrEmpty(ProjectId) || string.IsNullOrEmpty(ChatMode))
            {
                return;
            }

            // Check if password is available, if not show password dialog first
            if (!passwordComponent.HasPassword())
            {
                passwordComponent.ShowPassword(async () =>
                {
                    await InitializeChatWithPassword();
                });
                return;
            }

            await InitializeChatWithPassword();
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage("Failed to initialize chat from parameters", ex);
        }
    }

    private async Task InitializeChatWithPassword()
    {
        try
        {
            if (string.IsNullOrEmpty(ChatMode)) return;

            if (ChatMode.ToLower() == "founder")
            {
                // Find the founder project
                var founderProject = founderProjects?.FirstOrDefault(p =>
                    p.ProjectInfo.ProjectIdentifier == ProjectId);

                if (founderProject != null)
                {
                    // If we have a specific partner public key, open chat with that investor
                    if (!string.IsNullOrEmpty(PartnerPubKey))
                    {
                        // First load the investors
                        await SelectFounderChat(founderProject);

                        // Find the matching investor
                        var investor = projectInvestors?.FirstOrDefault(i =>
                            i.InvestorPublicKey == PartnerPubKey ||
                            i.InvestorNPub == PartnerPubKey);

                        if (investor != null)
                        {
                            await StartChatWithInvestor(investor);
                        }
                    }
                    else
                    {
                        // Just show the investors list
                        await SelectFounderChat(founderProject);
                    }
                }
            }
            else if (ChatMode.ToLower() == "investor")
            {
                // Find the investor project
                var investorProject = investorProjects?.FirstOrDefault(p =>
                    p.ProjectInfo.ProjectIdentifier == ProjectId);

                if (investorProject != null)
                {
                    await SelectInvestorChat(investorProject);
                }
            }
        }
        catch (Exception ex)
        {
            notificationComponent?.ShowErrorMessage("Failed to initialize chat with parameters", ex);
        }
    }

    // Helper method to generate URL for  chat navigation
    public string GetChatUrl(string projectId, string mode, string partnerPubKey)
    {
        if (string.IsNullOrEmpty(partnerPubKey))
            return $"/messages/{Uri.EscapeDataString(projectId)}/{Uri.EscapeDataString(mode)}";
        else
            return $"/messages/{Uri.EscapeDataString(projectId)}/{Uri.EscapeDataString(mode)}/{Uri.EscapeDataString(partnerPubKey)}";
    }

    // Update browser URL without triggering navigation - now using route parameters
    private void UpdateBrowserUrl(string projectId, string mode, string partnerPubKey)
    {
        string url;

        if (string.IsNullOrEmpty(projectId))
        {
            url = "/messages";
        }
        else if (string.IsNullOrEmpty(mode))
        {
            url = $"/messages/{Uri.EscapeDataString(projectId)}";
        }
        else if (string.IsNullOrEmpty(partnerPubKey))
        {
            url = $"/messages/{Uri.EscapeDataString(projectId)}/{Uri.EscapeDataString(mode)}";
        }
        else
        {
            url = $"/messages/{Uri.EscapeDataString(projectId)}/{Uri.EscapeDataString(mode)}/{Uri.EscapeDataString(partnerPubKey)}";
        }

        // Replace current URL without adding to browser history
        NavigationManager.NavigateTo(url, false, true);
    }

    // Fix for hex encoding/decoding issues with improved error handling
    private string SafeConvertBech32ToHex(string input)
    {
        try
        {
            if (string.IsNullOrEmpty(input))
                return null;

            // Check if already in hex format
            if (System.Text.RegularExpressions.Regex.IsMatch(input, "^[0-9a-fA-F]{64}$"))
                return input;

            // Only try to convert if it starts with npub
            if (input.StartsWith("npub"))
            {
                try
                {
                    var hex = NostrHelper.ConvertBech32ToHex(input);

                    // Validate the conversion result
                    if (!string.IsNullOrEmpty(hex) &&
                        !hex.StartsWith("npub") &&
                        System.Text.RegularExpressions.Regex.IsMatch(hex, "^[0-9a-fA-F]+$"))
                    {
                        // Ensure hex output is valid length (64 characters)
                        if (hex.Length > 64)
                            hex = hex.Substring(hex.Length - 64);
                        else if (hex.Length < 64)
                            hex = hex.PadLeft(64, '0');

                        Console.WriteLine($"Successfully converted npub to hex: {hex}");
                        return hex;
                    }
                    else
                    {
                        Console.WriteLine($"Invalid conversion result: {hex ?? "(null)"}");
                    }
                }
                catch (Exception convEx)
                {
                    Console.WriteLine($"Error in npub to hex conversion: {convEx.Message}");
                }
            }

            // Fallback: Strip non-hex characters and ensure even length
            var hexChars = new string(input.Where(c =>
                ((c >= '0' && c <= '9') ||
                 (c >= 'a' && c <= 'f') ||
                 (c >= 'A' && c <= 'F'))).ToArray());

            // Ensure even length (required by from_hex)
            if (hexChars.Length % 2 != 0)
            {
                hexChars = "0" + hexChars;
            }

            // Normalize length to 64 characters
            if (hexChars.Length > 64)
                hexChars = hexChars.Substring(hexChars.Length - 64);
            else if (hexChars.Length < 64)
                hexChars = hexChars.PadLeft(64, '0');

            Console.WriteLine($"Fallback hex conversion: {hexChars}");
            return hexChars;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error converting to hex: {ex.Message}");
            // Return a valid placeholder hex string
            return "0000000000000000000000000000000000000000000000000000000000000000";
        }
    }
}
