@page "/settings"
@using Angor.Client.Storage;
@using Angor.Shared
@using Angor.Shared.Models;
@using Angor.Client.Services
@using Angor.Shared.Services

@inherits BaseComponent
@inject INetworkConfiguration _networkConfiguration
@inject IClientStorage _clientStorage
@inject INetworkService _networkService

<div class="container">
    
    <NotificationComponent @ref="notificationComponent" />

    <div class="row">
        <div class="col">
            <h3>Settings</h3><br/>

            <p>Network Type: <strong>@networkType</strong></p>
            <p>Explorer url: <a href="@_networkConfiguration.GetDefaultExplorerUrl().First().Url" target="_blank">@_networkConfiguration.GetDefaultExplorerUrl().First().Url</a> </p>

            <hr/> <!-- Line separator -->
            <br/>
            
            <div class="d-flex justify-content-end">
                <button class="btn btn-info" @onclick="Refresh">Refresh</button>
            </div>   

            <!-- Indexers Section -->
            <h4>Indexers</h4>
            <form @onsubmit="AddIndexer">
                <div class="input-group mb-3">
                    <input type="text" @bind-value="newIndexerLink" class="form-control" placeholder="Enter new indexer link" aria-label="Enter new indexer link" aria-describedby="button-addon">
                    <button class="btn btn-outline-secondary" type="submit" id="button-addon">Add indexer Link</button>
                </div>
            </form>

            <table class="table">
                <thead>
                <tr>
                    <th>Link</th>
                    <th>Status</th>
                    <th>Default</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var indexer in settingsInfo.Indexers)
                {
                    <tr>
                        <td><a href="@indexer.Url" target="_blank">@indexer.Url</a></td>
                            <td style="color: @(indexer.Status == UrlStatus.Online ? "green" : indexer.Status == UrlStatus.NotReady ? "yellow" :  "red");">@indexer.Status.ToString()</td>
                        <td>
                            @if (indexer.IsPrimary)
                            {
                                <button class="btn btn-primary btn-sm" disabled>Primary</button>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-sm" @onclick="() => SetPrimaryIndexer(indexer)">Set</button>
                            }
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveIndexer(indexer.Url)">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <br/>
            @* <hr />*@ <!-- Line separator -->
            <!-- Nostr Relays Section -->

            <h4>Nostr Relays</h4>
            <form @onsubmit="AddRelay">
                <div class="input-group mb-3">
                    <input type="text" @bind-value="newRelayLink" class="form-control" placeholder="Enter new relay link" aria-label="Enter new relay link" aria-describedby="button-addon2">
                    <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Add relay Link</button>
                </div>
            </form>

            <table class="table">
                <thead>
                <tr>
                    <th>Link</th>
                    <th>Status</th>
                    <th>Default</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var relay in settingsInfo.Relays)
                {
                    <tr>
                        <td><a href="@relay.Url" target="_blank">@relay.Url</a></td>
                            <td style="color: @(relay.Status == UrlStatus.Online ? "green" : relay.Status == UrlStatus.NotReady ? "yellow" :  "red");">@relay.Status.ToString()</td>
                        <td>
                            @if (relay.IsPrimary)
                            {
                                <button class="btn btn-primary btn-sm" disabled>Primary</button>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-sm" @onclick="() => SetPrimaryRelay(relay)">Set</button>
                            }
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveRelay(relay.Url)">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

        </div>
    </div>
</div>

@code {
    private string newIndexerLink;
    private string newRelayLink;

    private string networkType;

    private SettingsInfo settingsInfo;

    protected override Task OnInitializedAsync()
    {
        settingsInfo = _clientStorage.GetSettingsInfo();

        if(!settingsInfo.Indexers.Any())
        {
            settingsInfo.Indexers.AddRange(_networkConfiguration.GetDefaultIndexerUrls());
            _clientStorage.SetSettingsInfo(settingsInfo);
        }

        if(!settingsInfo.Relays.Any())
        {
            settingsInfo.Relays.AddRange(_networkConfiguration.GetDefaultRelayUrls());
            _clientStorage.SetSettingsInfo(settingsInfo);
        }

        networkType = _networkConfiguration.GetNetwork().Name;

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh(false);
        }
    }

    private async Task AddIndexer()
    {
        if (!string.IsNullOrWhiteSpace(newIndexerLink))
        {
            if (!Uri.TryCreate(newIndexerLink, UriKind.Absolute, out Uri? uri))
            {
                notificationComponent.ShowErrorMessage($"invalid url {newIndexerLink}");
                return;
            }

            if (uri.Scheme is not ("http" or "https"))
            {
                notificationComponent.ShowErrorMessage($"invalid url {newIndexerLink} schema must be http or https");
                return;
            }

            newIndexerLink = new Uri($"{uri.Scheme}://{uri.Host}").ToString();

            if (settingsInfo.Indexers.Any(a => a.Url == newIndexerLink))
            {
                notificationComponent.ShowErrorMessage($"url exists {newIndexerLink}");
                return;
            }

            settingsInfo.Indexers.Add(new SettingsUrl { Url = newIndexerLink, IsPrimary = !settingsInfo.Indexers.Any() });
            _clientStorage.SetSettingsInfo(settingsInfo);
            newIndexerLink = string.Empty;
        }

        await Refresh(false);
    }

    private async Task AddRelay()
    {
        if (!string.IsNullOrWhiteSpace(newRelayLink))
        {
            if (!Uri.TryCreate(newRelayLink, UriKind.Absolute, out Uri? uri))
            {
                notificationComponent.ShowErrorMessage($"invalid url {newRelayLink}");
                return;
            }

            if (uri.Scheme is not ("ws" or "wss"))
            {
                notificationComponent.ShowErrorMessage($"invalid url {newRelayLink} schema must be ws or wss");
                return;
            }

            newRelayLink = new Uri($"{uri.Scheme}://{uri.Host}").ToString();

            if (settingsInfo.Relays.Any(a => a.Url == newRelayLink))
            {
                notificationComponent.ShowErrorMessage($"url exists {newRelayLink}");
                return;
            }

            settingsInfo.Relays.Add(new SettingsUrl { Url = newRelayLink, IsPrimary = !settingsInfo.Relays.Any() });
            _clientStorage.SetSettingsInfo(settingsInfo);
            newRelayLink = string.Empty;
        }

        await Refresh(false);
    }

    private void RemoveIndexer(string url)
    {
        var res = settingsInfo.Indexers.FirstOrDefault(f => f.Url == url);
        if (res != null)
        {
            settingsInfo.Indexers.Remove(res);
            
            if (res.IsPrimary && settingsInfo.Indexers.Any())
            {
                var next = settingsInfo.Indexers.OrderBy(a => a.Status).First();
                next.IsPrimary = true;
            }
            
            _clientStorage.SetSettingsInfo(settingsInfo);

        }
    }

    private void RemoveRelay(string url)
    {
        var res = settingsInfo.Relays.FirstOrDefault(f => f.Url == url);
        if (res != null)
        {
            settingsInfo.Relays.Remove(res);
            
            if (res.IsPrimary && settingsInfo.Relays.Any())
            {
                var next = settingsInfo.Relays.OrderBy(a => a.Status).First();
                next.IsPrimary = true;
            }

            _clientStorage.SetSettingsInfo(settingsInfo);
        }
    }

    private void SetPrimaryIndexer(SettingsUrl indexer)
    {
        foreach (var idx in settingsInfo.Indexers)
        {
            if (idx.Url == indexer.Url)
            {
                idx.IsPrimary = true;
            }
            else
            {
                idx.IsPrimary = false;
            }
        }

        _clientStorage.SetSettingsInfo(settingsInfo);

        StateHasChanged();
    }

    private void SetPrimaryRelay(SettingsUrl indexer)
    {
        foreach (var idx in settingsInfo.Relays)
        {
            if (idx.Url == indexer.Url)
            {
                idx.IsPrimary = true;
            }
            else
            {
                idx.IsPrimary = false;
            }
        }

        _clientStorage.SetSettingsInfo(settingsInfo);

        StateHasChanged();
    }

    private async Task Refresh()
    {
        await Refresh(true);
    }

    private async Task Refresh(bool forace)
    {
        var operationResult = await notificationComponent.LongOperation(async () =>
        {
            await _networkService.CheckServices(forace);

            return new OperationResult { Success = true };

        });

        if (operationResult.Success)
        {
            settingsInfo = _clientStorage.GetSettingsInfo();
            StateHasChanged();
        }        
    }
}