@page "/settings"
@using Angor.Client.Storage;
@using Angor.Shared
@using Angor.Shared.Models;
@using Angor.Client.Services
@using Angor.Shared.Services

@inject INetworkConfiguration _networkConfiguration
@inject INetworkService _networkService
@inject IClientStorage _clientStorage
@inject ICacheStorage _cacheStorage;
@inject IWalletStorage _walletStorage;
@inject NavMenuState NavMenuState
@inject ILogger<Settings> Logger;
@inject NavigationManager _navManager

@inherits BaseComponent

<div class="container my-4">
    <h1>Settings</h1><br />

    <NotificationComponent @ref="notificationComponent" />

    <div class="row">
        <div class="col">

            <p>Network Type: <strong>@networkType</strong></p>
            <p>Explorer url: <a href="@_networkConfiguration.GetDefaultExplorerUrl().First().Url" target="_blank">@_networkConfiguration.GetDefaultExplorerUrl().First().Url</a> </p>

            <div class="d-flex justify-content-end">
                <button class="btn btn-danger" @onclick="() => showWipeallModal = true">Wipe All Storage</button>
            </div>

            @if (showWipeallModal)
            {
                <div class="modal fade show d-block" id="coinControlModal" tabindex="-1" aria-labelledby="coinControlModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="coinControlModalLabel">Wipe Storage</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="() => showWipeallModal = false" aria-label="Close"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">
                                <div class="alert alert-danger" role="alert">
                                    <h5>Are you sure you want to wipe all storage?</h5>
                                </div>

                                <p>This will wipe your wallet as well!</p>

                                <!-- Checkbox for confirmation -->
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="confirmWipeCheckbox" @bind="confirmWipe">
                                    <label class="form-check-label" for="confirmWipeCheckbox">
                                        I confirm I have a backup of my wallet words, yes wipe all data from this device.
                                    </label>
                                </div>
                                <br />
                                @if (showConfirmWipeMessage)
                                {
                                    <p class="text-danger-emphasis">Please tick the box to wipe all storage!</p>
                                }

                                <hr />

                                <!-- Dropdown for network selection -->
                                <div class="mb-3">
                                    <label for="networkSelection">Select Network:</label>
                                    <select class="form-control" id="networkSelection" @bind="selectedNetwork">
                                        <option value="testnet" selected>Testnet</option>
                                        <option value="mainnet">Mainnet</option>
                                    </select>
                                </div>

                                <button class="btn btn-danger" @onclick="WipteAllData">Wipe Storage</button>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => showWipeallModal = false">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

            }

            <hr /> <!-- Line separator -->
            <br />

            <div class="d-flex justify-content-end">
                <button class="btn btn-info" @onclick="Refresh" disabled="@refreshSpinner">
                    @if (refreshSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Refresh...</span>
                    }
                    else
                    {
                        <span>Refresh</span>
                    }
                </button>
            </div>

            <!-- Indexers Section -->
            <h4>Indexers</h4>
            <form @onsubmit="AddIndexer">
                <div class="input-group mb-3">
                    <input type="text" @bind-value="newIndexerLink" class="form-control" placeholder="Enter new indexer link" aria-label="Enter new indexer link" aria-describedby="button-addon">
                    <button class="btn btn-primary" type="submit" id="button-addon">Add indexer Link</button>
                </div>
            </form>

            <div class="col-md-12">
                <div class="card">
                    <div class="card-header pb-0 p-3">
                        <div class="row">
                            <div class="col-6 d-flex align-items-center">
                                <h6 class="mb-0">Indexers</h6>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Link</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Status</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Default</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var indexer in settingsInfo.Indexers)
                                    {
                                        <tr>
                                            <td><a href="@indexer.Url" target="_blank">@indexer.Url</a></td>
                                            <td style="color: @(indexer.Status == UrlStatus.Online ? "green" : indexer.Status == UrlStatus.NotReady ? "yellow" :  "red");">@indexer.Status.ToString()</td>
                                            <td>
                                                @if (indexer.IsPrimary)
                                                {
                                                    <button class="btn btn-primary btn-sm" disabled>Primary</button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-secondary btn-sm" @onclick="() => SetPrimaryIndexer(indexer)">Set</button>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveIndexer(indexer.Url)">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            @* <hr />*@ <!-- Line separator -->
            <!-- Nostr Relays Section -->

            <h4>Nostr Relays</h4>
            <form @onsubmit="AddRelay">
                <div class="input-group mb-3">
                    <input type="text" @bind-value="newRelayLink" class="form-control" placeholder="Enter new relay link" aria-label="Enter new relay link" aria-describedby="button-addon2">
                    <button class="btn btn-primary" type="submit" id="button-addon2">Add relay Link</button>
                </div>
            </form>

            <div class="col-md-12">
                <div class="card">
                    <div class="card-header pb-0 p-3">
                        <div class="row">
                            <div class="col-6 d-flex align-items-center">
                                <h6 class="mb-0">Nostr Relays</h6>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Link</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Name</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Status</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Default</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var relay in settingsInfo.Relays)
                                    {
                                        <tr>
                                            <td><a href="@relay.Url" target="_blank">@relay.Url</a></td>
                                            <td>@relay.Name</td>
                                            <td style="color: @(relay.Status == UrlStatus.Online ? "green" : relay.Status == UrlStatus.NotReady ? "yellow" :  "red");">@relay.Status.ToString()</td>
                                            <td>
                                                @if (relay.IsPrimary)
                                                {
                                                    <button class="btn btn-primary btn-sm" disabled>Primary</button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-secondary btn-sm" @onclick="() => SetPrimaryRelay(relay)">Set</button>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveRelay(relay.Url)">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string newIndexerLink;
    private string newRelayLink;

    private string networkType;
    private bool refreshSpinner = false;

    private bool showWipeallModal = false;
    private bool confirmWipe = false;
    private bool showConfirmWipeMessage = false;
    private string selectedNetwork = "testnet"; // Default to "testnet"

    private SettingsInfo settingsInfo;

    protected override Task OnInitializedAsync()
    {
        _networkService.AddSettingsIfNotExist();

        settingsInfo = _clientStorage.GetSettingsInfo();

        networkType = _networkConfiguration.GetNetwork().Name;

        if (!networkType.ToLower().Contains("test"))
            selectedNetwork = "mainnet";

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh(false);
        }
    }

    private async Task AddIndexer()
    {
        if (!string.IsNullOrWhiteSpace(newIndexerLink))
        {
            if (!Uri.TryCreate(newIndexerLink, UriKind.Absolute, out Uri? uri))
            {
                notificationComponent.ShowErrorMessage($"invalid url {newIndexerLink}");
                return;
            }

            if (uri.Scheme is not ("http" or "https"))
            {
                notificationComponent.ShowErrorMessage($"invalid url {newIndexerLink} schema must be http or https");
                return;
            }

            newIndexerLink = new Uri($"{uri.Scheme}://{uri.Host}").AbsoluteUri.TrimEnd('/');

            if (settingsInfo.Indexers.Any(a => a.Url == newIndexerLink))
            {
                notificationComponent.ShowErrorMessage($"url exists {newIndexerLink}");
                return;
            }

            settingsInfo.Indexers.Add(new SettingsUrl { Url = newIndexerLink, IsPrimary = !settingsInfo.Indexers.Any() });
            _clientStorage.SetSettingsInfo(settingsInfo);
            newIndexerLink = string.Empty;
        }

        await Refresh(false);
    }

    private async Task AddRelay()
    {
        if (!string.IsNullOrWhiteSpace(newRelayLink))
        {
            if (!Uri.TryCreate(newRelayLink, UriKind.Absolute, out Uri? uri))
            {
                notificationComponent.ShowErrorMessage($"invalid url {newRelayLink}");
                return;
            }

            if (uri.Scheme is not ("ws" or "wss"))
            {
                notificationComponent.ShowErrorMessage($"invalid url {newRelayLink} schema must be ws or wss");
                return;
            }

            newRelayLink = new Uri($"{uri.Scheme}://{uri.Host}").AbsoluteUri.TrimEnd('/');

            if (settingsInfo.Relays.Any(a => a.Url == newRelayLink))
            {
                notificationComponent.ShowErrorMessage($"url exists {newRelayLink}");
                return;
            }

            settingsInfo.Relays.Add(new SettingsUrl { Url = newRelayLink, IsPrimary = !settingsInfo.Relays.Any() });
            _clientStorage.SetSettingsInfo(settingsInfo);
            newRelayLink = string.Empty;
        }

        await Refresh(false);
    }

    private void RemoveIndexer(string url)
    {
        var res = settingsInfo.Indexers.FirstOrDefault(f => f.Url == url);
        if (res != null)
        {
            settingsInfo.Indexers.Remove(res);

            if (res.IsPrimary && settingsInfo.Indexers.Any())
            {
                var next = settingsInfo.Indexers.OrderBy(a => a.Status).First();
                next.IsPrimary = true;
            }

            _clientStorage.SetSettingsInfo(settingsInfo);

        }
    }

    private void RemoveRelay(string url)
    {
        var res = settingsInfo.Relays.FirstOrDefault(f => f.Url == url);
        if (res != null)
        {
            settingsInfo.Relays.Remove(res);

            if (res.IsPrimary && settingsInfo.Relays.Any())
            {
                var next = settingsInfo.Relays.OrderBy(a => a.Status).First();
                next.IsPrimary = true;
            }

            _clientStorage.SetSettingsInfo(settingsInfo);
        }
    }

    private void SetPrimaryIndexer(SettingsUrl indexer)
    {
        foreach (var idx in settingsInfo.Indexers)
        {
            if (idx.Url == indexer.Url)
            {
                idx.IsPrimary = true;
            }
            else
            {
                idx.IsPrimary = false;
            }
        }

        _clientStorage.SetSettingsInfo(settingsInfo);

        StateHasChanged();
    }

    private void SetPrimaryRelay(SettingsUrl indexer)
    {
        foreach (var idx in settingsInfo.Relays)
        {
            if (idx.Url == indexer.Url)
            {
                idx.IsPrimary = true;
            }
            else
            {
                idx.IsPrimary = false;
            }
        }

        _clientStorage.SetSettingsInfo(settingsInfo);

        StateHasChanged();
    }

    private async Task Refresh()
    {
        await Refresh(true);
    }

    private async Task Refresh(bool force)
    {
        refreshSpinner = true;

        try
        {
            await _networkService.CheckServices(force);

            settingsInfo = _clientStorage.GetSettingsInfo();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            refreshSpinner = false;
        }
    }

    private void WipteAllData()
    {
        if (!confirmWipe)
        {
            showConfirmWipeMessage = true;
            return;
        }

        _clientStorage.WipeStorage();
        _cacheStorage.WipeSession();

        showWipeallModal = false;
        showConfirmWipeMessage = false;

        _networkService.CheckAndSetNetwork(_navManager.Uri.ToLower(), selectedNetwork);
        _networkService.AddSettingsIfNotExist();

        networkType = _networkConfiguration.GetNetwork().Name;
        settingsInfo = _clientStorage.GetSettingsInfo();

        hasWallet = _walletStorage.HasWallet();
        StateHasChanged();

        NavMenuState.NotifyStateChanged();
    }
}