@page "/settings"
@using Angor.Client.Storage;
@using Angor.Shared
@using Angor.Shared.Models;
@using Angor.Shared.Services

@inject INetworkConfiguration NetworkConfiguration
@inject INetworkService NetworkService
@inject IClientStorage ClientStorage
@inject ICacheStorage CacheStorage;
@inject IWalletStorage WalletStorage;
@inject NavMenuState NavMenuState
@inject ILogger<Settings> Logger;

@inherits BaseComponent

<div class="container my-4">
    <h1>Settings</h1><br/>

    <NotificationComponent @ref="NotificationComponent" />

    <div class="row">
        <div class="col">

            <p>Network Type: <strong>@_networkType</strong></p>
            <p>Explorer url: <a href="@NetworkConfiguration.GetDefaultExplorerUrl().First().Url" target="_blank">@NetworkConfiguration.GetDefaultExplorerUrl().First().Url</a> </p>
            
            <div class="d-flex justify-content-end">
                <button class="btn btn-danger" @onclick="() => _showWipeallModal = true">Wipe All Storage</button>
            </div>

            @if (_showWipeallModal)
            {
                <div class="modal fade show d-block" id="coinControlModal" tabindex="-1" aria-labelledby="coinControlModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="coinControlModalLabel">Wipe Storage</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="() => _showWipeallModal = false" aria-label="Close"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">
                                <div class="alert alert-danger" role="alert">
                                    <h5>Are you sure you want to wipe all storage?</h5>
                                </div>                                
                                
                                <p>This will wipe your wallet as well!</p>

                                <!-- Checkbox for confirmation -->
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="confirmWipeCheckbox" @bind="_confirmWipe">
                                    <label class="form-check-label" for="confirmWipeCheckbox">
                                        I confirm I have a backup of my wallet words, yes wipe all data from this device.
                                    </label>
                                </div>
                                <br/>
                                @if (_showConfirmWipeMessage)
                                {
                                    <p class="text-danger-emphasis">Please tick the box to wipe all storage!</p>
                                }

                                <button class="btn btn-danger" @onclick="WipteAllData">Wipe Storage</button>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => _showWipeallModal = false">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

            }

            <hr/> <!-- Line separator -->
            <br/>
            
            <div class="d-flex justify-content-end">
                <button class="btn btn-info" @onclick="Refresh" disabled="@_refreshSpinner">
                    @if (_refreshSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Refresh...</span>
                    }
                    else
                    {
                        <span>Refresh</span>
                    }
                </button>
            </div>   

            <!-- Indexers Section -->
            <h4>Indexers</h4>
            <form @onsubmit="AddIndexer">
                <div class="input-group mb-3">
                    <input type="text" @bind-value="_newIndexerLink" class="form-control" placeholder="Enter new indexer link" aria-label="Enter new indexer link" aria-describedby="button-addon">
                    <button class="btn btn-outline-secondary" type="submit" id="button-addon">Add indexer Link</button>
                </div>
            </form>

            <table class="table">
                <thead>
                <tr>
                    <th>Link</th>
                    <th>Status</th>
                    <th>Default</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var indexer in _settingsInfo.Indexers)
                {
                    <tr>
                        <td><a href="@indexer.Url" target="_blank">@indexer.Url</a></td>
                            <td style="color: @(indexer.Status == UrlStatus.Online ? "green" : indexer.Status == UrlStatus.NotReady ? "yellow" :  "red");">@indexer.Status.ToString()</td>
                        <td>
                            @if (indexer.IsPrimary)
                            {
                                <button class="btn btn-primary btn-sm" disabled>Primary</button>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-sm" @onclick="() => SetPrimaryIndexer(indexer)">Set</button>
                            }
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveIndexer(indexer.Url)">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <br/>
            @* <hr />*@ <!-- Line separator -->
            <!-- Nostr Relays Section -->

            <h4>Nostr Relays</h4>
            <form @onsubmit="AddRelay">
                <div class="input-group mb-3">
                    <input type="text" @bind-value="_newRelayLink" class="form-control" placeholder="Enter new relay link" aria-label="Enter new relay link" aria-describedby="button-addon2">
                    <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Add relay Link</button>
                </div>
            </form>

            <table class="table">
                <thead>
                <tr>
                    <th>Link</th>
                    <th>Name</th>
                    <th>Status</th>
                    <th>Default</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var relay in _settingsInfo.Relays)
                {
                    <tr>
                        <td><a href="@relay.Url" target="_blank">@relay.Url</a></td>
                        <td>@relay.Name</td>
                        <td style="color: @(relay.Status == UrlStatus.Online ? "green" : relay.Status == UrlStatus.NotReady ? "yellow" :  "red");">@relay.Status.ToString()</td>
                        <td>
                            @if (relay.IsPrimary)
                            {
                                <button class="btn btn-primary btn-sm" disabled>Primary</button>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-sm" @onclick="() => SetPrimaryRelay(relay)">Set</button>
                            }
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveRelay(relay.Url)">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

        </div>
    </div>
</div>

@code {
    private string _newIndexerLink;
    private string _newRelayLink;

    private string _networkType;
    private bool _refreshSpinner = false;

    private bool _showWipeallModal = false;
    private bool _confirmWipe = false;
    private bool _showConfirmWipeMessage = false;

    private SettingsInfo _settingsInfo;

    protected override Task OnInitializedAsync()
    {
        NetworkService.AddSettingsIfNotExist();

        _settingsInfo = ClientStorage.GetSettingsInfo();

        _networkType = NetworkConfiguration.GetNetwork().Name;

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh(false);
        }
    }

    private async Task AddIndexer()
    {
        if (!string.IsNullOrWhiteSpace(_newIndexerLink))
        {
            if (!Uri.TryCreate(_newIndexerLink, UriKind.Absolute, out Uri? uri))
            {
                NotificationComponent.ShowErrorMessage($"invalid url {_newIndexerLink}");
                return;
            }

            if (uri.Scheme is not ("http" or "https"))
            {
                NotificationComponent.ShowErrorMessage($"invalid url {_newIndexerLink} schema must be http or https");
                return;
            }

            _newIndexerLink = new Uri($"{uri.Scheme}://{uri.Host}").AbsoluteUri.TrimEnd('/');

            if (_settingsInfo.Indexers.Any(a => a.Url == _newIndexerLink))
            {
                NotificationComponent.ShowErrorMessage($"url exists {_newIndexerLink}");
                return;
            }

            _settingsInfo.Indexers.Add(new SettingsUrl { Url = _newIndexerLink, IsPrimary = !_settingsInfo.Indexers.Any() });
            ClientStorage.SetSettingsInfo(_settingsInfo);
            _newIndexerLink = string.Empty;
        }

        await Refresh(false);
    }

    private async Task AddRelay()
    {
        if (!string.IsNullOrWhiteSpace(_newRelayLink))
        {
            if (!Uri.TryCreate(_newRelayLink, UriKind.Absolute, out Uri? uri))
            {
                NotificationComponent.ShowErrorMessage($"invalid url {_newRelayLink}");
                return;
            }

            if (uri.Scheme is not ("ws" or "wss"))
            {
                NotificationComponent.ShowErrorMessage($"invalid url {_newRelayLink} schema must be ws or wss");
                return;
            }

            _newRelayLink = new Uri($"{uri.Scheme}://{uri.Host}").AbsoluteUri.TrimEnd('/');

            if (_settingsInfo.Relays.Any(a => a.Url == _newRelayLink))
            {
                NotificationComponent.ShowErrorMessage($"url exists {_newRelayLink}");
                return;
            }

            _settingsInfo.Relays.Add(new SettingsUrl { Url = _newRelayLink, IsPrimary = !_settingsInfo.Relays.Any() });
            ClientStorage.SetSettingsInfo(_settingsInfo);
            _newRelayLink = string.Empty;
        }

        await Refresh(false);
    }

    private void RemoveIndexer(string url)
    {
        var res = _settingsInfo.Indexers.FirstOrDefault(f => f.Url == url);
        if (res != null)
        {
            _settingsInfo.Indexers.Remove(res);
            
            if (res.IsPrimary && _settingsInfo.Indexers.Any())
            {
                var next = _settingsInfo.Indexers.OrderBy(a => a.Status).First();
                next.IsPrimary = true;
            }
            
            ClientStorage.SetSettingsInfo(_settingsInfo);

        }
    }

    private void RemoveRelay(string url)
    {
        var res = _settingsInfo.Relays.FirstOrDefault(f => f.Url == url);
        if (res != null)
        {
            _settingsInfo.Relays.Remove(res);
            
            if (res.IsPrimary && _settingsInfo.Relays.Any())
            {
                var next = _settingsInfo.Relays.OrderBy(a => a.Status).First();
                next.IsPrimary = true;
            }

            ClientStorage.SetSettingsInfo(_settingsInfo);
        }
    }

    private void SetPrimaryIndexer(SettingsUrl indexer)
    {
        foreach (var idx in _settingsInfo.Indexers)
        {
            if (idx.Url == indexer.Url)
            {
                idx.IsPrimary = true;
            }
            else
            {
                idx.IsPrimary = false;
            }
        }

        ClientStorage.SetSettingsInfo(_settingsInfo);

        StateHasChanged();
    }

    private void SetPrimaryRelay(SettingsUrl indexer)
    {
        foreach (var idx in _settingsInfo.Relays)
        {
            if (idx.Url == indexer.Url)
            {
                idx.IsPrimary = true;
            }
            else
            {
                idx.IsPrimary = false;
            }
        }

        ClientStorage.SetSettingsInfo(_settingsInfo);

        StateHasChanged();
    }

    private async Task Refresh()
    {
        await Refresh(true);
    }

    private async Task Refresh(bool force)
    {
        _refreshSpinner = true;

        try
        {
            await NetworkService.CheckServices(force);

            _settingsInfo = ClientStorage.GetSettingsInfo();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _refreshSpinner = false;
        }
    }

    private void WipteAllData()
    {
        if (!_confirmWipe)
        {
            _showConfirmWipeMessage = true;
            return;
        }

        ClientStorage.WipeStorage();
        CacheStorage.WipeSession();

        _showWipeallModal = false;
        _showConfirmWipeMessage = false;

        NetworkService.AddSettingsIfNotExist();

        HasWallet = WalletStorage.HasWallet();
        StateHasChanged();

        NavMenuState.NotifyStateChanged();
    }
}