@page "/browse"
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Nostr.Client.Keys
@using Nostr.Client.Messages
@using System.Text.Json
@using Angor.Client.Models
@using Angor.Client.Storage
@inject ICacheStorage SessionStorage;
@inject NavigationManager NavigationManager
@inject IRelayService RelayService
@inject IIndexerService IndexerService

<div class="container my-4">
    <h1>Browse Projects</h1>
    
    <NotificationComponent @ref="_notificationComponent"/>

    <div class="row">
        <div class="col">
			
            <!-- Search Section -->
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Enter search query" id="searchQuery" @bind="_searchQuery">
                <button class="btn btn-primary" type="button" @onclick="FindProject" disabled="@_findInProgress">Find</button>
            </div>
            
            @if (_findInProgress)
            {
                <div class="d-flex justify-content-center">
                    <div class="loader"></div>
                </div>
            }

            <!-- Search Result -->
            @if (_findProject != null)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        @if (SessionStorage.IsProjectInStorageById(_findProject.ProjectIdentifier))
                        {
                            var project = SessionStorage.GetProjectById(_findProject.ProjectIdentifier);
                            if (project?.Metadata != null)
                            {
                                <h3 class="card-title">@project.Metadata.Name</h3>
                                <p class="card-subtitle">@project.Metadata.About</p>
                                <hr>
                            }
                        }
                        else
                        {
                            <p class="text-warning-emphasis">Project not found in any relay!</p>
                        }
                        <p>
                            Project ID:@_findProject.ProjectIdentifier
                            <br/>
                            Nostr ID  :@(NostrPublicKey.FromHex(_findProject.NostrPubKey).Bech32)
                        </p>
                        <button @onclick="() => ViewProjectDetails(_findProject.ProjectIdentifier)" class="btn btn-primary card-">View</button>

                    </div>
                </div>
            }
            
            <div class="d-flex justify-content-center">
                <button class="btn btn-secondary my-3" @onclick="SearchProjects">Fetch The Last 20 Projects</button>
            </div>

            <!-- List of projects -->
            @if (_searchInProgress)
            {
                <div class="d-flex justify-content-center">
                    <div class="loader"></div>
                </div>
            }
            else
            {
                @if (_projects.Count == 0)
                {
                    <div class="d-flex justify-content-center">
                        <p>No projects found.</p>
                    </div>
                }
                else
                {
                    foreach (var indexerData in _projects.OrderByDescending(project => project.CreatedOnBlock))
                    {
                        <div class="card mb-3">
                            @if (!_nostrSearchInProgress && SessionStorage.IsProjectInStorageById(indexerData.ProjectIdentifier))
                            {
                                var project = SessionStorage.GetProjectById(indexerData.ProjectIdentifier);
                                if (project?.Metadata?.Banner != null)
                                {
                                    <div class="card-header overflow-hidden">
                                        <img class="card-img-top" src="@project.Metadata.Banner" alt=""/>
                                    </div>
                                }
                            }

                            <div class="card-body">
                                @if (_nostrSearchInProgress)
                                {
                                    <div class="loader-small"></div>
                                }
                                else
                                {
                                    @if (SessionStorage.IsProjectInStorageById(indexerData.ProjectIdentifier))
                                    {
                                        var project = SessionStorage.GetProjectById(indexerData.ProjectIdentifier);
                                        if (project?.Metadata != null)
                                        {
                                            <h3 class="card-title">@project.Metadata.Name</h3>
                                            <p class="card-subtitle">@project.Metadata.About</p>
                                            <hr>
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-warning-emphasis">Project not found in any relay!</p>
                                    }
                                }
                                <p>
                                    Project ID:@indexerData.ProjectIdentifier
                                    <br/>
                                    Nostr ID  :@(NostrPublicKey.FromHex(indexerData.NostrPubKey).Bech32)
                                </p>
                                <button @onclick="() => ViewProjectDetails(indexerData.ProjectIdentifier)" class="btn btn-primary card-">View</button>
                            </div>
                        </div>
                    }
                }
            }
            
          
        </div>
    </div>
</div>

@code {
    NotificationComponent _notificationComponent;
    private string _searchQuery;
    bool _searchInProgress = false;
    bool _nostrSearchInProgress;
    bool _findInProgress = false;

    ProjectIndexerData? _findProject = null;

    private List<ProjectIndexerData> _projects = new();

    protected override async Task OnInitializedAsync()
    {
        _projects = SessionStorage.GetProjectIndexerData() ?? new();
    }

    private async Task FindProject()
    {
        _findProject = _projects.FirstOrDefault(_ => _.ProjectIdentifier == _searchQuery);

        if (_findProject != null)
        {
            return;
        }

        _findInProgress = true;

        _findProject = await IndexerService.GetProjectByIdAsync(_searchQuery);

        if (_findProject != null)
        {
            RelayService.RequestProjectCreateEventsByPubKey(HandleProjectEvents(),
                StateHasChanged, 
            new[] { _findProject.NostrPubKey });
        }

        _findInProgress = false;
    }

    private async Task SearchProjects()
    {
        _searchInProgress = true;
        _nostrSearchInProgress = true;
        
        var blockchainProjects = await IndexerService.GetProjectsAsync(null, 20);
        
        var projectsNotInList = blockchainProjects
            .Where(blockchainProject => _projects.All(_ => _.ProjectIdentifier != blockchainProject.ProjectIdentifier))
            .ToList();

        if (projectsNotInList.Any())
        {
            _projects.AddRange(projectsNotInList.ToArray());
            SessionStorage.SetProjectIndexerData(_projects);

            var projectsForLookup = projectsNotInList
                .Where(_ => _.NostrPubKey != null) //For old projects in the indexer
                .Select(_ => _.NostrPubKey)
                .ToArray();

            if (projectsForLookup.Any())
                RelayService.RequestProjectCreateEventsByPubKey(HandleProjectEvents(),
                    () =>
                {
                    _nostrSearchInProgress = false;
                    StateHasChanged();
                },
                projectsForLookup);

            StateHasChanged();
        }

        _searchInProgress = false;
    }

    private Action<NostrEvent> HandleProjectEvents()
    {
        return e =>
        {
            var projectIndexerData = _projects.FirstOrDefault(x => x.NostrPubKey == e.Pubkey);

            if (projectIndexerData == null && _findProject?.NostrPubKey == e.Pubkey)
            {
                projectIndexerData = _findProject;
            }

            switch (e)
            {
                case { Kind: NostrKind.Metadata }:
                  
                    var nostrMetadata = JsonSerializer.Deserialize<ProjectMetadata>(e.Content, Angor.Shared.Services.RelayService.Settings);
                    if (projectIndexerData != null)
                    {
                        var project = SessionStorage.GetProjectById(projectIndexerData.ProjectIdentifier);
                        if (project != null)
                        {
                            project.Metadata = nostrMetadata;
                            SessionStorage.StoreProject(project);   
                        }
                    }
                    
                    break;

                case { Kind: NostrKind.ApplicationSpecificData }:
                    
                    var projectInfo = JsonSerializer.Deserialize<ProjectInfo>(e.Content, Angor.Shared.Services.RelayService.Settings);
                    if (projectInfo != null && projectIndexerData != null)
                    {
                        if (!SessionStorage.IsProjectInStorageById(projectInfo.ProjectIdentifier))
                        {
                            SessionStorage.StoreProject(new Project { ProjectInfo = projectInfo, CreationTransactionId = projectIndexerData.TrxId });
                        }
                    }

                    break;
            }
        };
    }

    private void ViewProjectDetails(string projectIdentifier)
    {
        if (SessionStorage.IsProjectInStorageById(projectIdentifier))
        {
            NavigationManager.NavigateTo($"/view/{projectIdentifier}");
        }
        else
        {
            _notificationComponent.ShowNotificationMessage("The project was not loaded from the relay yet");   
        }
    }
}