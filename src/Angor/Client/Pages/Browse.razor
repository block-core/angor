@page "/browse"
@using Angor.Client.Storage
@using Angor.Client.Services
@using Angor.Shared.Models
@using Angor.Shared.Services
@inject HttpClient Http
@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IRelayService _RelayService
@inject IIndexerService _IndexerService

<div class="container">
    <div class="row">
        <div class="col">
            <h3>Browse Projects</h3>

            <!-- Search form -->
            <form @onsubmit="SearchProjects">
                <div class="mb-3">
                    <label for="searchQuery" class="form-label">Search</label>
                    <input type="text" id="searchQuery" @bind="searchQuery" class="form-control" placeholder="Enter search query" />
                </div>
                <button type="submit" class="btn btn-primary">Search</button>
                <br /> <br />
            </form>

            <!-- List of projects -->
            @if (projects.Count == 0)
            {
                <p>No projects found.</p>
            }
            else
            {
                foreach (var project in projects.OrderByDescending(d => d.StartDate))
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">@project.ProjectIdentifier</h5>
                            <p class="card-text">Nostr ID: <a href="/" target="_blank">@(new Blockcore.NBitcoin.Key().PubKey.ToHex())</a></p>
                            <button @onclick="() => ImportProject(project)" class="btn btn-primary">View</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private string searchQuery;

    private List<ProjectInfo> projects= new();

    protected override async Task OnInitializedAsync()
    {
        await _RelayService.ConnectToRelaysAsync();
    }

    private async Task SearchProjects()
    {
        var blockchainProjects = await _IndexerService.GetProjectsAsync();

        // foreach (var blockchainProject in blockchainProjects)
        // {
        //     _RelayService.RequestProjectDataAsync(blockchainProject.)
        // }
        
        foreach (var blockchainProject in blockchainProjects)
        {
            var project = await _RelayService.GetProjectAsync(blockchainProject.ProjectIdentifier);

            if (project != null)
            {
                projects.Add(project);
            }
        }
    }

    private void ImportProject(ProjectInfo project)
    {
        storage.AddBrowseProject(project); 

        NavigationManager.NavigateTo($"/view/{project.ProjectIdentifier}");
    }
}