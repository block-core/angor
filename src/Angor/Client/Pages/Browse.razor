@page "/browse"
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Nostr.Client.Messages
@using Angor.Client.Models
@using Angor.Client.Storage
@using System.Text.RegularExpressions
@inject ICacheStorage SessionStorage
@inject NavigationManager NavigationManager
@inject IRelayService _RelayService
@inject IIndexerService _IndexerService
@inject INetworkService _NetworkService
@inject ISerializer serializer
@inject ILogger<Browse> Logger;
@inject IHtmlStripperService HtmlStripperService;

<NotificationComponent @ref="notificationComponent" />



<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="browse" Class="header-icon" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Browse Projects</h5>
            </div>
            <div class="header-actions">
                @if (projects.Count > 0)
                {
                    <button class="btn btn-border-success" @onclick="ToggleView">
                        <Icon IconName="@viewModeIcon" Width="24" Height="24" />
                    </button>
                }
            </div>
        </div>
    </div>
</div>


<div class="row mt-4 mb-4">
    <div class="card card-body">
        <div class="d-flex align-items-center">
            <!-- Search Section -->
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Enter Angor project identifier" id="searchQuery" @oninput="UpdateSearchQuery" @onkeydown="HandleKeyDown">
                <button class="btn btn-border" type="button" @onclick="SearchProject" disabled="@searchInProgress" data-cy="find-button">
                    <Icon IconName="search" />
                </button>
            </div>
        </div>
    </div>
</div>

@if (searchInProgress)
{
    <div class="row card card-body">
        <div class="d-flex justify-content-center">
            <div class="loader"></div>
        </div>
    </div>
}

@if (!projects.Any() && !searchInProgress && noProject)
{
    <div class="row mt-4 mb-4">
        <div class="card card-body angor-alert-info pt-2 pb-2">
            <div class="d-flex align-items-center">
                <span class="me-3 user-select-none">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                </span>
                <span class="text-white" data-cy="projectsGrid">No projects found.</span>
            </div>
        </div>
    </div>
}
else
{
    @if (isGridView)
    {
        <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-3 project-wrapper g-4" data-cy="project-grid">
            @foreach (var indexerData in projects.OrderByDescending(project => project.CreatedOnBlock))
            {
                <div class="col d-flex align-items-stretch">
                    <div class="card  w-100 project-card hover-effect">
                        <a class="d-block card-zoom">
                            @if (!nostrSearchInProgress && SessionStorage.IsProjectInStorageById(indexerData.ProjectIdentifier))
                            {
                                var project = SessionStorage.GetProjectById(indexerData.ProjectIdentifier);
                                <div class="banner-container">
                                    <img class="banner-image fade-in" src="@(project?.Metadata?.Banner ?? "/assets/img/no-image.jpg")" alt="@(project?.Metadata?.Banner != null ? "" : "no-image")" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                    <div class="profile-container slide-up">
                                        <img class="profile-image pulse" src="@(project?.Metadata?.Picture ?? "/assets/img/no-image.jpg")" alt="@(project?.Metadata?.Banner != null ? "" : "no-image")" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                    </div>
                                </div>
                            }
                        </a>

                        <div class="card-body pb-0">
                            @if (nostrSearchInProgress)
                            {
                                <div class="p-3">
                                    <div class="loader-small m-auto"></div>
                                </div>
                            }
                            else
                            {
                                @if (SessionStorage.IsProjectInStorageById(indexerData.ProjectIdentifier))
                                {
                                    var project = SessionStorage.GetProjectById(indexerData.ProjectIdentifier);
                                    if (project?.Metadata != null)
                                    {
                                        <div class="d-flex align-items-center mb-4">
                                            <span class="user-select-none">
                                                <Icon IconName="view" Height="24" Width="24"></Icon>
                                            </span>
                                            <div class="h-100 ms-3">
                                                <h5 class="mb-0 font-weight-bolder" @onclick="() => ViewProjectDetails(indexerData.ProjectIdentifier)">
                                                    <a href="/view/@project.ProjectInfo.ProjectIdentifier"> @project.Metadata.Name</a>
                                                </h5>
                                            </div>
                                        </div>
                                        <p class="mb-0 line-clamp-3" data-cy="searchedSubTitle">@(ConvertToMarkupString(project.Metadata.About))</p>
                                    }
                                }
                                else
                                {
                                    <p class="text-warning-emphasis">Project not found in any relay!</p>
                                }
                            }
                        </div>
                        <div class="card-footer pt-0">
                            <hr class="horizontal light mt-3">

                            <div role="button" class="d-flex align-items-center btn btn-border w-100-m" @onclick="() => ViewProjectDetails(indexerData.ProjectIdentifier)">
                                <span class="user-select-none">
                                    <Icon IconName="view-project" Height="24" Width="24"></Icon>
                                </span>
                                <div class="h-100 ms-3">
                                    <span class="mb-0 font-weight-bolder text-primary">
                                        View Project
                                    </span>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>

    }
    else
    {
        <div class="project-wrapper">
            @foreach (var indexerData in projects.OrderByDescending(project => project.CreatedOnBlock))
            {

                <div class="card project-card slide-in hover-effect mx-2 mb-4">
                    <div class="row">
                        <div class="col-md-4 position-relative card-zoom">
                            <div class="banner-container-list">
                                @if (!nostrSearchInProgress && SessionStorage.IsProjectInStorageById(indexerData.ProjectIdentifier))
                                {
                                    var project = SessionStorage.GetProjectById(indexerData.ProjectIdentifier);
                                    <img class="banner-image fade-in" src="@(project?.Metadata?.Banner ?? "/assets/img/no-image.jpg")" alt="@(project?.Metadata?.Banner != null ? "" : "no-image")" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                    <div class="profile-container slide-up">
                                        <img class="profile-image" src="@(project?.Metadata?.Picture ?? "/assets/img/no-image.jpg")" alt="Profile Image" />
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-8 d-flex align-items-center">
                            <div class="card-body">
                                @if (nostrSearchInProgress)
                                {
                                    <div class="p-3">
                                        <div class="loader-small m-auto"></div>
                                    </div>
                                }
                                else
                                {
                                    <div class="project-list">
                                        <div>
                                            @if (SessionStorage.IsProjectInStorageById(indexerData.ProjectIdentifier))
                                            {
                                                var project = SessionStorage.GetProjectById(indexerData.ProjectIdentifier);
                                                if (project?.Metadata != null)
                                                {

                                                    <div class="d-flex align-items-center mb-4">
                                                        <span class="user-select-none">
                                                            <Icon IconName="view" Height="24" Width="24"></Icon>
                                                        </span>
                                                        <div class="h-100 ms-3">
                                                            <h5 class="mb-0 font-weight-bolder" @onclick="() => ViewProjectDetails(indexerData.ProjectIdentifier)">
                                                                <a href="/view/@project.ProjectInfo.ProjectIdentifier"> @project.Metadata.Name</a>
                                                            </h5>
                                                        </div>
                                                    </div>

                                                    <p class="card-text line-clamp-3" role="button" @onclick="() => ViewProjectDetails(indexerData.ProjectIdentifier)">@ConvertToMarkupString(project.Metadata.About)</p>
                                                }
                                            }
                                            else
                                            {
                                                <p class="text-warning-emphasis">Project not found in any relay!</p>
                                            }
                                        </div>
                                        <hr class="horizontal light m-only">

                                        <div role="button" class="d-flex align-items-center btn btn-border vertical-button w-100-m" @onclick="() => ViewProjectDetails(indexerData.ProjectIdentifier)">
                                            <span class="user-select-none">
                                                <Icon IconName="view-project" Height="24" Width="24"></Icon>
                                            </span>
                                            <div class="h-100 mt-3">
                                                <span class="mb-0 font-weight-bolder">
                                                    View Project
                                                </span>
                                            </div>
                                        </div>


                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

            }
        </div>

    }
}

@if (!searchInProgress)
{
    <div class="d-flex justify-content-center mt-4">
        <a class="btn btn-border my-3" href="https://hub.angor.io" target="_blank">
            <i>
                <Icon IconName="browse"></Icon>
            </i>
            <span class="nav-link-text ms-1">Angor Hub</span>
        </a>
    </div>
}



@code {
    private NotificationComponent notificationComponent;
    private string searchQuery;
    private bool searchInProgress = false;
    private bool nostrSearchInProgress;
    private bool isGridView = true;
    private string viewModeIcon = "list";
    private bool noProject = false;

    private ProjectIndexerData? findProject = null;
    private List<ProjectIndexerData> projects = new();

    protected override async Task OnInitializedAsync()
    {
        await GetAllProjects();
        projects = SessionStorage.GetProjectIndexerData() ?? new List<ProjectIndexerData>();

        if (projects.Any())
        {
            // Check for indexer and relay availability in the background
            _ = CheckIndexerAndRelayAvailability();
        }
        else
        {
            searchInProgress = true;
            // No projects are cached, fetch new projects after ensuring services are available
            await FetchAndEnsureServices();
        }
    }

    private async Task FetchAndEnsureServices()
    {
        try
        {
            _NetworkService.AddSettingsIfNotExist();
            await _NetworkService.CheckServices(true);

            var primaryIndexer = _NetworkService.GetPrimaryIndexer();
            var primaryRelay = _NetworkService.GetPrimaryRelay();

            if (primaryIndexer == null || primaryRelay == null)
            {
                notificationComponent.ShowNotificationMessage("No primary indexer or relay found. Please configure them in settings.");
                searchInProgress = false;
                noProject = true;
                return;
            }

            await GetAllProjects();
        }
        catch (Exception ex)
        {
            notificationComponent.ShowNotificationMessage($"Initialization failed: {ex.Message}");
        }
    }

    private async Task CheckIndexerAndRelayAvailability()
    {
        try
        {
            // Attempt to retrieve primary indexer and relay
            var primaryIndexer = _NetworkService.GetPrimaryIndexer();
            var primaryRelay = _NetworkService.GetPrimaryRelay();

            // Initialize flags to track service availability
            bool indexerAvailable = false;
            bool relayAvailable = false;

            // Check if the primary indexer is available
            if (primaryIndexer != null)
            {
                await _NetworkService.CheckServices(false); // Refresh service status
                indexerAvailable = primaryIndexer.Status == UrlStatus.Online;
                if (!indexerAvailable)
                {
                    notificationComponent.ShowNotificationMessage("Primary indexer is offline. Please check your network settings.");
                }
            }
            else
            {
                notificationComponent.ShowNotificationMessage("No primary indexer configured. Please add one in settings.");
            }

            // Check if the primary relay is available
            if (primaryRelay != null)
            {
                await _NetworkService.CheckServices(false); // Refresh service status
                relayAvailable = primaryRelay.Status == UrlStatus.Online;
                if (!relayAvailable)
                {
                    notificationComponent.ShowNotificationMessage("Primary relay is offline. Please check your relay settings.");
                }
            }
            else
            {
                notificationComponent.ShowNotificationMessage("No primary relay configured. Please add one in settings.");
            }
        }
        catch (Exception ex)
        {
            // General error handling if the service check fails
            notificationComponent.ShowNotificationMessage($"Service check failed: {ex.Message}");
        }
    }

    private void ToggleView()
    {
        isGridView = !isGridView;
        viewModeIcon = isGridView ? "list" : "grid";
    }

    private async Task SearchProject()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            await GetAllProjects();
            return;
        }

        findProject = projects.FirstOrDefault(_ => _.ProjectIdentifier == searchQuery);

        if (findProject != null)
        {
            projects = new List<ProjectIndexerData> { findProject };
            StateHasChanged();
            return;
        }

        searchInProgress = true;

        try
        {
            findProject = await _IndexerService.GetProjectByIdAsync(searchQuery);

            if (findProject != null)
            {

                var projectNpub = string.Empty;
                _RelayService.LookupProjectsInfoByEventIds<ProjectInfo>(p =>
                    {
                        if (SessionStorage.IsProjectInStorageById(p.ProjectIdentifier))
                            return;
                        SessionStorage.StoreProject(new Project { ProjectInfo = p, CreationTransactionId = findProject.TrxId });
                        projectNpub = p.NostrPubKey;
                    },
                    () =>
                    {
                        _RelayService.LookupNostrProfileForNPub((npub, nostrMetadata) =>
                            {
                                var project = SessionStorage.GetProjectById(findProject.ProjectIdentifier);

                                if (project!.Metadata != null)
                                    return;

                                project.Metadata = nostrMetadata;
                                SessionStorage.StoreProject(project);
                            }, () =>
                            {
                                searchInProgress = false;
                                StateHasChanged();
                            },
                            projectNpub);
                    },
                    findProject.NostrEventId);
                projects = new List<ProjectIndexerData> { findProject };
            }
            else
            {
                projects.Clear();
                StateHasChanged();
            }
        }
        finally
        {
            searchInProgress = false;
            StateHasChanged();
        }
    }

    private async Task GetAllProjects()
    {
        searchInProgress = true;

        var blockchainProjects = await _IndexerService.GetProjectsAsync(null, 21);

        var projectsNotInList = blockchainProjects
            .Where(blockchainProject => projects.All(_ => _.ProjectIdentifier != blockchainProject.ProjectIdentifier))
            .ToList();

        if (projectsNotInList.Any())
        {
            projects.AddRange(projectsNotInList);
            SessionStorage.SetProjectIndexerData(projects);

            var projectsForLookup = projectsNotInList
                .Where(_ => !string.IsNullOrEmpty(_.NostrEventId))
                .Select(_ => _.NostrEventId)
                .ToArray();

            nostrSearchInProgress = true;

            if (projectsForLookup.Any())
            {
                var projectNpubsForLookup = new Dictionary<string, string>();

                _RelayService.LookupProjectsInfoByEventIds<ProjectInfo>(x =>
                    {
                        if (SessionStorage.IsProjectInStorageById(x.ProjectIdentifier))
                            return;

                        var projectIndexerData = projectsNotInList.First(p => p.ProjectIdentifier == x.ProjectIdentifier);

                        SessionStorage.StoreProject(new Project { ProjectInfo = x, CreationTransactionId = projectIndexerData.TrxId });

                        projectNpubsForLookup.Add(x.NostrPubKey, projectIndexerData.ProjectIdentifier);

                    }, () =>
                        _RelayService.LookupNostrProfileForNPub((npub, nostrMetadata) =>
                            {
                                var project = SessionStorage.GetProjectById(projectNpubsForLookup[npub]);
                                if (project == null)
                                {
                                    throw new ArgumentOutOfRangeException("Unable to find the project in storage for requested metadata " + npub);
                                }

                                if (project.Metadata != null)
                                    return;

                                project.Metadata = nostrMetadata;
                                SessionStorage.StoreProject(project);
                            }, () =>
                            {
                                nostrSearchInProgress = false;
                                StateHasChanged();
                            },
                            projectNpubsForLookup.Keys.ToArray()),
                    projectsForLookup);
            }

            StateHasChanged();
        }

        searchInProgress = false;
    }

    private void ViewProjectDetails(string projectIdentifier)
    {
        if (SessionStorage.IsProjectInStorageById(projectIdentifier))
        {
            NavigationManager.NavigateTo($"/view/{projectIdentifier}");
        }
        else
        {
            notificationComponent.ShowNotificationMessage("The project was not loaded from the relay yet");
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchProject();
        }
    }

    private void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
    }


    public MarkupString ConvertToMarkupString(string input)
    {
        string sanitizedInput = HtmlStripperService.StripHtmlTags(input);
        return new MarkupString(sanitizedInput);
    }
}
