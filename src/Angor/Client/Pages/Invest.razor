@page "/invest/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Shared.ProtocolNew
@using Blockcore.NBitcoin.DataEncoders
@using JSException = Microsoft.JSInterop.JSException
@using Money = Blockcore.NBitcoin.Money
@using Transaction = Blockcore.Consensus.TransactionInfo.Transaction
@using Angor.Shared.Services
@using Nostr.Client.Keys
@using System.Diagnostics
@using Angor.Client.Models
@using Blockcore.Networks
@using System.Text.Json
@using Angor.Shared.Utilities


@inherits BaseComponent

@inject IJSRuntime JS

@inject ILogger<Invest> _Logger;
@inject IDerivationOperations _derivationOperations;
@inject IClientStorage storage;
@inject ICacheStorage SessionStorage;
@inject IWalletOperations _WalletOperations;
@inject IApplicationLogicService applicationLogicService;
@inject ISignService _SignService;
@inject IRelayService _RelayService;

@inject IInvestorTransactionActions _InvestorTransactionActions;

@inject ISerializer serializer
@inject IEncryptionService encryption

<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />
<RawTransactionModal RawTransactionJson="@transactionJson" IsVisible="@showTransactionJsonModal" IsVisibleChanged="HandleTransactionJsonModalVisibility" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="portfolio" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Project Investment</h5>
            </div>
            <div class="header-actions">
            </div>
        </div>
    </div>
</div>

<div class="row mt-4 slide-in">
    <div class="card card-body">
        <div class="header-container">
            <div class="header-content">
                <div class="header-title animate-fade-in">
                    <span class="header-icon-wrapper">
                        <Icon IconName="info" Width="32" Height="32" />
                    </span>
                    <h5 class="header-text">Investment Information</h5>
                </div>
            </div>
        </div>

        <p class="mb-4 mt-4">
            To invest in this project, the founder must sign a recovery agreement.
            This ensures that you can recover your funds if the project does not succeed.
        </p>
        <div class="row g-4">
            <div class="col-md-4">
                <div class="stat-card p-3 rounded-3 border hover-effect animate-fade-in">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="text-muted">Target Amount</h6>
                            <h4 class="mb-0">@project.ProjectInfo.TargetAmount.ToUnitBtc() @network.CoinTicker</h4>
                        </div>
                        <div class="stat-icon">
                            <Icon IconName="balance" Height="32" Width="32" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="stat-card p-3 rounded-3 border hover-effect animate-fade-in">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="text-muted">Start Date</h6>
                            <h4 class="mb-0">@project.ProjectInfo.StartDate.ToString("dd/MM/yyyy")</h4>
                        </div>
                        <div class="stat-icon">
                            <Icon IconName="calendar" Height="32" Width="32" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="stat-card p-3 rounded-3 border hover-effect animate-fade-in">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="text-muted">Total Stages</h6>
                            <h4 class="mb-0">@project.ProjectInfo.Stages.Count()</h4>
                        </div>
                        <div class="stat-icon">
                            <Icon IconName="stages" Height="32" Width="32" />
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>



@if (invested)
{
    <div class="row mt-4">
        <div class="card card-body angor-alert-info pt-2 pb-2 animate-fade-in">
            <div class="d-flex align-items-center align-items-center">
                <span class="me-3 user-select-none">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                </span>
                <span class="text-white">
                    You already invested.
                </span>
            </div>
        </div>
    </div>
    return;
}

@if (founder)
{
    <div class="row mt-4">
        <div class="card card-body angor-alert-info pt-2 pb-2 animate-fade-in">
            <div class="d-flex align-items-center align-items-center">
                <span class="me-3 user-select-none">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                </span>
                <span class="text-white">
                    You are the founder.
                </span>
            </div>
        </div>
    </div>
    return;
}

@if (project == null)
{
    <div class="row mt-4">
        <div class="card card-body angor-alert-info pt-2 pb-2 animate-fade-in">
            <div class="d-flex align-items-center align-items-center">
                <span class="me-3 user-select-none">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                </span>
                <span class="text-white">
                    The project was not found.
                </span>
            </div>
        </div>
    </div>
    return;
}

@if (project is not InvestorProject investorProject)
{
    <div class="animate-fade-in mt-4">
        <div class="card card-body slide-in">
            <div class="header-container">
                <div class="header-content">
                    <div class="header-title animate-fade-in">
                        <span class="header-icon-wrapper">
                            <Icon IconName="investment" Width="32" Height="32" />
                        </span>
                        <h5 class="header-text">Investment Details</h5>
                    </div>
                </div>
            </div>

            <EditForm Model="Investment" OnValidSubmit="InvestFundsAndCheckPassword" class="investment-form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-4">
                    <label for="investmentAmount" class="form-label">Investment Amount</label>
                    <div class="input-group">


                        <InputNumber class="form-control" id="investmentAmount" @bind-Value="@Investment.InvestmentAmountBtc" @oninput="UpdateStagesBreakdown" />


                        <span role="button" class="btn btn-border d-flex align-items-center justify-content-center">
                            @network.CoinTicker
                        </span>
                    </div>
                </div>

                <div class="form-group mb-4">
                    <label for="investmentSlider" class="form-label mb-4">Select Investment Amount</label>
                    <input type="range" class="form-range custom-range" id="investmentSlider"
                           min="0.001" max="@project.ProjectInfo.TargetAmount.ToUnitBtc()" step="0.001"
                    @bind="Investment.InvestmentAmountBtc"
                    @oninput="UpdateStagesBreakdown" />
                    <div class="d-flex justify-content-between">
                        <small>0.001 @network.CoinTicker</small>
                        <small>@project.ProjectInfo.TargetAmount.ToUnitBtc() @network.CoinTicker</small>
                    </div>
                </div>

                <button type="submit" class="btn btn-border-success w-100" disabled="@buildSpinner">
                    @if (buildSpinner)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Building Transaction...</span>
                    }
                    else
                    {
                        <Icon IconName="arrow-right" Height="20" Width="20" class="me-2" />
                        <span>Continue to Confirmation</span>
                    }
                </button>
            </EditForm>

            @if (StagesBreakdown?.Any() == true)
            {
                <div class="stages-section mt-4">
                    <h6 class="section-title mb-3">
                        <Icon IconName="stage" Height="32" Width="32" class="me-2" />
                        Investment Stages Breakdown
                    </h6>
                    <div class="stages-grid">
                        @foreach (var stage in StagesBreakdown)
                        {
                            <div class="stage-card animate-fade-up">
                                <div class="stage-header">
                                    <h6 class="mb-0">Stage @stage.StageNumber</h6>
                                    <span class="badge bg-primary">@stage.AmountBtc @network.CoinTicker</span>
                                </div>
                                <div class="stage-body">
                                    <p class="mb-2">
                                        <Icon IconName="calendar" Height="16" Width="16" class="me-2" />
                                        Release: @stage.StageDateTime.ToString("dd/MM/yyyy")
                                    </p>
                                    <p class="mb-0">
                                        <Icon IconName="clock-square" Height="16" Width="16" class="me-2" />
                                        @stage.DaysFromStartDate days from start
                                    </p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>


    @if (showCreateModal)
    {
        <div class="modal-wrapper">
            <div class="modal fade show d-block" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content modern-modal animate-fade-in">
                        <div class="modal-header border-0 pb-0">
                            <div class="d-flex align-items-center">
                                <Icon IconName="transaction" Height="32" Width="32" class="me-2" />
                                <h5 class="modal-title">Investment Confirmation</h5>
                            </div>
                            <button class="btn-close-custom" @onclick="() => showCreateModal = false">
                                <Icon IconName="close-circle" Height="24" Width="24" />
                            </button>
                        </div>

                        <div class="modal-body modal-body-scroll py-4">
                            <div class="mb-4">
                                <div class="project-id-card mb-3">
                                    <div class="d-flex align-items-center">
                                        <Icon IconName="project" Height="24" Width="24" class="me-2" />
                                        <div class="d-flex flex-column flex-grow-1 overflow-hidden">
                                            <div class="info-label mb-1">Project ID</div>
                                            <div class="project-id-value text-truncate" title="@project.ProjectInfo.ProjectIdentifier">
                                                @project.ProjectInfo.ProjectIdentifier
                                            </div>
                                        </div>
                                        <i class="ms-2" role="button" @onclick="() => CopyToClipboard(project.ProjectInfo.ProjectIdentifier)">
                                            <Icon IconName="copy" Height="24" Width="24" />
                                        </i>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-between mb-3">
                                    <div class="info-card flex-grow-1 me-2">
                                        <div class="info-label">Amount to Invest</div>
                                        <div class="info-value text-success">
                                            @Investment.InvestmentAmountBtc @network.CoinTicker
                                        </div>
                                    </div>
                                    <div class="info-card flex-grow-1 ms-2">
                                        <div class="info-label">Miner Fee</div>
                                        <div class="info-value text-warning">
                                            @Money.Satoshis(signedTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                        </div>
                                    </div>
                                </div>

                                <div class="info-card mb-3">
                                    <div class="info-label">Angor Fee</div>
                                    <div class="info-value">
                                        @signedTransaction?.Transaction.Outputs.First().Value.ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                    </div>
                                </div>
                            </div>

                            <div class="fee-section mb-4">
                                <h6 class="section-title">
                                    <Icon IconName="fee" Height="20" Width="20" class="me-2" />
                                    Network Fee Rate
                                </h6>
                                <div class="fee-slider-container">
                                    <input type="range"
                                           class="form-range custom-range"
                                           id="feeRange"
                                           @bind="feeData.FeePosition"
                                           @oninput="FeeRangeChanged"
                                           min="@feeData.FeeMin"
                                           max="@feeData.FeeMax">
                                    <div class="fee-info">
                                        <small class="text-muted">
                                            Estimated confirmation in @feeData.SelectedFeeEstimation.Confirmations blocks
                                            (@feeData.SelectedFeeEstimation.FeeRate sats/byte)
                                        </small>
                                    </div>
                                </div>
                            </div>

                            <div class="stages-section mb-4">
                                <h6 class="section-title">
                                    <Icon IconName="stage" Height="20" Width="20" class="me-2" />
                                    Investment Stages
                                </h6>
                                <div class="stages-list">
                                    @{
                                        int index = 0;
                                        @foreach (var stage in project.ProjectInfo.Stages)
                                        {
                                            <div class="info-card mb-3 p-3 shadow-sm rounded animate-fade-in">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <div class="info-label">Stage @(++index):</div>
                                                        <div class="info-value">@StagesBreakdown[index - 1].AmountBtc @network.CoinTicker</div>
                                                    </div>
                                                    <div>
                                                        <div class="info-label">Release:</div>
                                                        <div class="info-value">@stage.ReleaseDate.ToString("dd/MM/yyyy")</div>
                                                    </div>
                                                </div>
                                                <div class="text-muted small mt-2">
                                                    @stage.AmountToRelease% of investment - @((stage.ReleaseDate - project.ProjectInfo.StartDate).Days) days after start
                                                </div>
                                            </div>

                                        }
                                    }
                                </div>
                            </div>

                            <div class="confirmation-section mt-4 text-center">
                                <Icon IconName="alert" Height="24" Width="24" class="mb-2" />
                                <p class="confirmation-text">
                                    Please review the investment details carefully before confirming.
                                </p>
                            </div>
                        </div>

                        <div class="modal-footer border-0 pt-0">
                            <button class="btn btn-border-warning" @onclick="ShowTransactionJsonModal">
                                View Details
                            </button>
                            <button type="button" class="btn btn-border-success" @onclick="Send" disabled="@investSpinner">
                                @if (investSpinner)
                                {
                                    <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Processing...</span>
                                }
                                else
                                {
                                    <span>Confirm Investment</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    if (investorProject.WaitingForFounderResponse())
    {
        <div class="card card-body hover-effect animate-fade-in mt-4">
            <div class="header-container">
                <div class="header-content">
                    <div class="header-title animate-fade-in">
                        <span class="header-icon-wrapper">
                            <Icon IconName="pending" Width="32" Height="32" />
                        </span>
                        <h5 class="header-text">Waiting for the founder to approve</h5>
                    </div>
                    <div class="header-actions">
                        <button type="button" class="btn btn-border-danger" @onclick="CancelInvestment">
                            <Icon IconName="close-circle" Width="20" Height="20" />
                            <span class="button-text ms-2">Cancel</span>
                        </button>
                        <button class="btn btn-border ms-2" @onclick="RefreshSignatures" disabled="@refreshSpinner">
                            @if (refreshSpinner)
                            {
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                <span class="button-text ms-2">Refreshing...</span>
                            }
                            else
                            {
                                <Icon IconName="refresh" Width="20" Height="20" />
                                <span class="button-text ms-2">Refresh</span>
                            }
                        </button>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-center align-items-center mt-4">
                <div class="loader-slow"></div>
            </div>
        </div>
    }
    else
    {
        @if (investorProject.ReceivedFounderSignatures() && !investorProject.InvestedInProject())
        {
            <div class="card mt-4 animate-fade-in">
                <div class="card-header d-flex justify-content-between align-items-center flex-wrap">
                    <h4 class="mb-0">Founder has signed</h4>
                    <button type="button" class="btn btn-border-danger animate-scale mt-2 mt-md-0" @onclick="CancelInvestment">
                        <Icon IconName="cancel" Width="20" Height="20" class="me-1" />
                        <span>Cancel</span>
                    </button>
                </div>
                <div class="card-body">
                    <p class="modal-title">
                        The founder has signed a transaction agreement ensuring that you can recover your funds if the project does not succeed, you may now invest.
                    </p>
                    <div class="d-flex justify-content-center mt-4">
                        <button type="button" class="btn btn-border-success animate-scale" @onclick="PublishSignedTransactionAsync" disabled="@publishSpinner">
                            @if (publishSpinner)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Confirm...</span>
                            }
                            else
                            {
                                <Icon IconName="invest" Width="20" Height="20" class="me-1" />
                                <span>Invest</span>
                            }
                        </button>
                    </div>

                    @if (investorProject.SignaturesInfo != null)
                    {
                        <div class="transaction-details mt-4">
                            <h5 class="section-title">
                                <Icon IconName="details" Height="20" Width="20" class="me-2" />
                                Transaction Details
                            </h5>
                            <div class="info-card p-3 rounded-3 border animate-fade-in">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <strong>Amount to invest:</strong>
                                        <p>@Money.Satoshis((investorProject.AmountInvested ?? 0)).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                                    </div>
                                    <div>
                                        <strong>Date:</strong>
                                        <p>@investorProject?.SignaturesInfo?.TimeOfSignatureRequest?.ToString("dd/MM/yyyy HH:mm")</p>
                                    </div>
                                </div>
                                <div>
                                    <strong>Project Name:</strong>
                                    <p>@investorProject?.Metadata?.Name</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

    }
}

@code {

    [Parameter]
    public string ProjectId { get; set; }

    private bool buildSpinner = false;
    private bool investSpinner = false;
    private bool publishSpinner = false;
    private bool refreshSpinner = false;
    private bool showTransactionJsonModal = false;
    private string transactionJson;

    public InvestmentModel Investment { get; set; } = new InvestmentModel { InvestmentAmountBtc = 0.01m };
    private bool IsSeederTimePassed { get; set; }
    private List<StageBreakdown> StagesBreakdown { get; set; } = new();
    bool founder = false;
    bool invested = false;
    private Project? project;
    private bool showCreateModal;
    TransactionInfo? signedTransaction;
    Transaction unSignedTransaction;
    string InvestorPubKey;


    private FeeData feeData = new();

    protected override async Task OnInitializedAsync()
    {
        if (!hasWallet)
        {
            NavigationManager.NavigateTo($"/wallet");
        }

        Project? findProject = storage.GetInvestmentProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

        if (findProject != null)
        {
            var investmentProject = findProject as InvestorProject;
            project = investmentProject;
            invested = investmentProject?.InvestedInProject() ?? false;
        }
        else
        {
            findProject = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

            if (findProject != null)
            {
                founder = true;
                project = findProject;
            }
            else
            {
                project = SessionStorage.GetProjectById(ProjectId);

                if (project?.ProjectInfo == null)
                {
                    NavigationManager.NavigateTo($"/view/{ProjectId}");
                    return;
                }
            }
        }

        if (!applicationLogicService.IsInvestmentWindowOpen(project?.ProjectInfo))
        {
            notificationComponent.ShowNotificationMessage("You cannot invest in this project.", 5);
            NavigationManager.NavigateTo($"/view/{ProjectId}");
            return;
        }

        await CheckIfSeederTimeHasPassed();

        UpdateStagesBreakdown(new ChangeEventArgs { Value = Investment.InvestmentAmountBtc });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (hasWallet)
            {
                await RefreshSignatures();
            }
        }
    }

    private async Task RefreshSignatures()
    {
        if (project is InvestorProject investmentProject && investmentProject.WaitingForFounderResponse())
        {
            if (passwordComponent.HasPassword())
            {
                await ScanForPendingSignatures();
            }
            else
            {
                passwordComponent.ShowPassword(ScanForPendingSignatures);
            }
        }
    }

    private async Task ScanForPendingSignatures()
    {
        if (project is InvestorProject investmentProject && investmentProject.WaitingForFounderResponse())
        {
            if (!passwordComponent.HasPassword())
            {
                notificationComponent.ShowErrorMessage("no wallet password");
                return;
            }

            refreshSpinner = true;
            StateHasChanged();
            await Task.Delay(10);

            try
            {
                var words = await passwordComponent.GetWalletAsync();

                var nostrPrivateKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);

                var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

                _SignService.LookupSignatureForInvestmentRequest(
                    investmentProject.InvestorNPub,
                    project.ProjectInfo.NostrPubKey,
                    investmentProject.SignaturesInfo!.TimeOfSignatureRequest!.Value,
                    investmentProject.SignaturesInfo!.SignatureRequestEventId!,
                    signatures => HandleSignatureReceivedAsync(nostrPrivateKeyHex, signatures));
            }
            catch (Exception e)
            {
                notificationComponent.ShowErrorMessage(e.Message, e);
            }
            finally
            {
                refreshSpinner = false;
            }

            StateHasChanged();
            await Task.Delay(10);
        }
    }

    private Task CheckIfSeederTimeHasPassed()
    {
        // Implement your logic to check whether the seeder time has passed.
        // For now, I'm returning a dummy value.
        IsSeederTimePassed = false;

        Investment.IsSeeder = !IsSeederTimePassed;

        return Task.CompletedTask;
    }

    private void UpdateStagesBreakdown(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out decimal amountBtc))
        {
            Investment.InvestmentAmountBtc = amountBtc;

            StagesBreakdown.Clear();
            int index = 1;

            foreach (var stage in project!.ProjectInfo.Stages)
            {
                var insert = new StageBreakdown
                    {
                        StageNumber = index++,
                        AmountBtc = Investment.InvestmentAmountBtc * (stage.AmountToRelease / 100),
                        StageDateTime = stage.ReleaseDate,
                        DaysFromStartDate = (stage.ReleaseDate - project.ProjectInfo.StartDate).Days
                    };

                StagesBreakdown.Add(insert);
            }
        }
    }

    private async Task InvestFundsAndCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(InvestFunds);
        }
        else
        {
            await InvestFunds();
        }
    }

    private async Task InvestFunds()
    {
        if (Investment.IsSeeder)
        {
            bool isTestnet = network.NetworkType == NetworkType.Testnet;
            decimal maxInvestmentBtc = isTestnet ? decimal.MaxValue : 0.1m; // 0.1 BTC for mainnet, unlimited for testnet
            decimal minInvestmentBtc = 0.001m; // Minimum investment for all networks

            if (Investment.InvestmentAmountBtc < minInvestmentBtc)
            {
                notificationComponent.ShowErrorMessage($"Seeder minimum investment amount of {minInvestmentBtc} BTC was not reached");
                return;
            }

            if (Investment.InvestmentAmountBtc > maxInvestmentBtc)
            {
                notificationComponent.ShowErrorMessage($"Maximum investment amount is {maxInvestmentBtc} BTC on the mainnet");
                return;
            }
        }
        else
        {
            decimal minInvestmentBtc = 0.001m;

            if (Investment.InvestmentAmountBtc < minInvestmentBtc)
            {
                notificationComponent.ShowErrorMessage($"Investor minimum investment amount is {minInvestmentBtc} BTC");
                return;
            }
        }

        if (project.ProjectInfo.Stages.Sum(s => s.AmountToRelease) != 100)
        {
            notificationComponent.ShowErrorMessage("The stages must sum to 100%");
            return;
        }

        if (project is InvestorProject investmentProject && investmentProject.InvestedInProject())
        {
            notificationComponent.ShowErrorMessage("You already invested");
            return;
        }

        buildSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var accountInfo = storage.GetAccountInfo(network.Name);

            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            var words = await passwordComponent.GetWalletAsync();

            InvestorPubKey = _derivationOperations.DeriveInvestorKey(words, project.ProjectInfo.FounderKey);

            if (Investment.IsSeeder)
            {
                var seederHash = _derivationOperations.DeriveLeadInvestorSecretHash(words, project.ProjectInfo.FounderKey);
            }

            unSignedTransaction = _InvestorTransactionActions.CreateInvestmentTransaction(project.ProjectInfo, InvestorPubKey, Money.Coins(Investment.InvestmentAmountBtc).Satoshi);

            signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unSignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation.FeeRate);

            showCreateModal = true;
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            buildSpinner = false;
        }

        StateHasChanged();
    }

    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showCreateModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();

                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);

                    signedTransaction = _WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unSignedTransaction, words, accountInfo, feeData.SelectedFeeEstimation.FeeRate);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        if (!passwordComponent.HasPassword())
        {
            investSpinner = false;
            showCreateModal = false;
            notificationComponent.ShowErrorMessage("Wallet password expired");
            return;
        }

        investSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            Debug.Assert(project != null, nameof(project) + " != null");

            project = new InvestorProject
                {
                    ProjectInfo = project.ProjectInfo,
                    Metadata = project.Metadata,
                    SignedTransactionHex = signedTransaction!.Transaction!.ToHex(),
                    CreationTransactionId = project.CreationTransactionId,
                    AmountInvested = Investment.InvestmentAmountBtc.ToUnitSatoshi(),
                    InvestorPublicKey = InvestorPubKey ?? throw new ArgumentNullException("The investor pub key is not populated")
                };

            var investorProject = (InvestorProject)project;

            // remove signatures when requesting founder to sign
            investorProject.SignaturesInfo = new()
                {
                    ProjectIdentifier = investorProject!.ProjectInfo.ProjectIdentifier,
                };

            var strippedInvestmentTransaction = network.CreateTransaction(investorProject.SignedTransactionHex);
            strippedInvestmentTransaction.Inputs.ForEach(f => f.WitScript = Blockcore.Consensus.TransactionInfo.WitScript.Empty);

            var accountInfo = storage.GetAccountInfo(network.Name);

            var words = await passwordComponent.GetWalletAsync();

            var investorNostrPrivateKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, project.ProjectInfo.FounderKey);
            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(investorNostrPrivateKey.ToBytes());

            var releaseAddress = accountInfo.GetNextReceiveAddress();

            SignRecoveryRequest signRecoveryRequest = new()
            {
                ProjectIdentifier = investorProject.ProjectInfo.ProjectIdentifier,
                InvestmentTransactionHex = strippedInvestmentTransaction.ToHex(network.Consensus.ConsensusFactory),
                UnfundedReleaseAddress = releaseAddress
            };

            var sigJson = serializer.Serialize(signRecoveryRequest);

            var encryptedContent = await encryption.EncryptNostrContentAsync(
                nostrPrivateKeyHex, investorProject.ProjectInfo.NostrPubKey,
                sigJson);

            var investmentSigsRequest = _SignService.RequestInvestmentSigs(encryptedContent, nostrPrivateKeyHex, investorProject.ProjectInfo.NostrPubKey);

            investorProject.SignaturesInfo!.TimeOfSignatureRequest = investmentSigsRequest.eventTime;
            investorProject.SignaturesInfo!.SignatureRequestEventId = investmentSigsRequest.eventId;
            investorProject.InvestorNPub = NostrPrivateKey.FromHex(nostrPrivateKeyHex).DerivePublicKey().Hex;
            investorProject.UnfundedReleaseAddress = releaseAddress;

            storage.AddInvestmentProject(investorProject);

            foreach (var input in strippedInvestmentTransaction.Inputs)
                accountInfo.UtxoReservedForInvestment.Add(input.PrevOut.ToString());

            storage.SetAccountInfo(network.Name, accountInfo);

            _SignService.LookupSignatureForInvestmentRequest(
                investorProject.InvestorNPub,
                investorProject.ProjectInfo.NostrPubKey,
                investorProject.SignaturesInfo.TimeOfSignatureRequest.Value,
                investorProject.SignaturesInfo.SignatureRequestEventId,
                signatures => HandleSignatureReceivedAsync(nostrPrivateKeyHex, signatures));

            notificationComponent.ShowNotificationMessage("Signature request sent", 5);
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            showCreateModal = false;
            investSpinner = false;
            passwordComponent.ClearPassword();
        }

        StateHasChanged();
    }

    private async Task HandleSignatureReceivedAsync(string? nostrPrivateKeyHex, string encryptedSignatures)
    {
        if (project is not InvestorProject investorProject || investorProject.ReceivedFounderSignatures()) //multiple relays for the same message
            return;

        var signatureJson = await encryption.DecryptNostrContentAsync(
             nostrPrivateKeyHex, project.ProjectInfo.NostrPubKey, encryptedSignatures);

        _Logger.LogInformation("signature : " + signatureJson);

        var res = serializer.Deserialize<SignatureInfo>(signatureJson);

        if (res.ProjectIdentifier == investorProject.SignaturesInfo?.ProjectIdentifier)
        {
            investorProject.SignaturesInfo.Signatures = res.Signatures;
            StateHasChanged();
        }
    }

    public async Task CancelInvestment()
    {
        if (project is not InvestorProject investorProject || investorProject?.SignaturesInfo is null)
        {
            notificationComponent.ShowErrorMessage("Missing project details, unable to cancel the investment");
            return;
        }

        if (!string.IsNullOrEmpty(investorProject.SignedTransactionHex))
        {
            if (signedTransaction == null)
                signedTransaction = new TransactionInfo();

            signedTransaction.Transaction ??= network.CreateTransaction(investorProject.SignedTransactionHex);
            var accountInfo = storage.GetAccountInfo(network.Name);

            foreach (var input in signedTransaction.Transaction.Inputs)
                accountInfo.UtxoReservedForInvestment.Remove(input.PrevOut.ToString());

            storage.SetAccountInfo(network.Name, accountInfo);
        }

        storage.RemoveInvestmentProject(project.ProjectInfo.ProjectIdentifier);

        investorProject.SignaturesInfo = null;
        project = SessionStorage.GetProjectById(ProjectId);
    }

    public async Task PublishSignedTransactionAsync()
    {
        publishSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            Debug.Assert(project != null, nameof(project) + " != null");
            var investorProject = project as InvestorProject;
            Debug.Assert(investorProject is not null, "The project must be an investor project", nameof(project) + " != null");
            Debug.Assert(investorProject.SignaturesInfo != null, nameof(investorProject.SignaturesInfo) + " != null");
            Debug.Assert(investorProject.SignedTransactionHex != null, nameof(investorProject.SignedTransactionHex) + " != null");

            signedTransaction ??= new TransactionInfo();

            signedTransaction.Transaction ??= _networkConfiguration.GetNetwork().CreateTransaction(investorProject.SignedTransactionHex);

            var validSignatures = _InvestorTransactionActions.CheckInvestorRecoverySignatures(investorProject.ProjectInfo, signedTransaction.Transaction, investorProject.SignaturesInfo);

            if (!validSignatures)
            {
                notificationComponent.ShowErrorMessage("The signatures returned from the founder failed validation");
                return;
            }

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            // link the trx to the signatures
            investorProject.CompleteProjectInvestment(signedTransaction.Transaction);

            storage.UpdateInvestmentProject(investorProject);

            await SaveInvestmentsListToNostrAsync();

            var accountInfo = storage.GetAccountInfo(network.Name);
            var unspentInfo = SessionStorage.GetUnconfirmedInboundFunds();

            var spendUtxos = _WalletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, signedTransaction.Transaction);

            foreach (var input in signedTransaction.Transaction.Inputs)
                accountInfo.UtxoReservedForInvestment.Remove(input.PrevOut.ToString());

            storage.SetAccountInfo(network.Name, accountInfo);

            unspentInfo.AddRange(spendUtxos);
            SessionStorage.SetUnconfirmedInboundFunds(unspentInfo);

            notificationComponent.ShowNotificationMessage("Invested in project", 5);

            NavigationManager.NavigateTo($"/view/{project.ProjectInfo.ProjectIdentifier}");
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            publishSpinner = false;
        }
    }

    private async Task SaveInvestmentsListToNostrAsync()
    {
        var words = await passwordComponent.GetWalletAsync();
        var storageAccountKey = _derivationOperations.DeriveNostrStoragePubKeyHex(words);
        var storageKey = _derivationOperations.DeriveNostrStorageKey(words);
        var storageKeyHex = Encoders.Hex.EncodeData(storageKey.ToBytes());

        var password = _derivationOperations.DeriveNostrStoragePassword(words);

        Investments investments = new()
            {
                ProjectIdentifiers = storage.GetInvestmentProjects()
                                .Where(x => x.InvestedInProject())
                                .Select(x => new InvestmentState
                                {
                                    ProjectIdentifier = x.ProjectInfo.ProjectIdentifier,
                                    InvestorPubKey = x.InvestorPublicKey,
                                    InvestmentTransactionHash = x.TransactionId,
                                    UnfundedReleaseAddress = x.UnfundedReleaseAddress,
                                })
                                .ToList()
            };


        var encrypted = await encryption.EncryptData(serializer.Serialize(investments), password);

        _RelayService.SendDirectMessagesForPubKeyAsync(storageKeyHex, storageAccountKey, encrypted, x =>
        {
            if (!x.Accepted)
            {
                //TODO need to handle failure to save the list of projects
            }
        });
    }

    public class InvestmentModel
    {
        /// <summary>
        /// Amount in BTC, this is a parameter that is bind to the users input,
        /// so it makes sense to keep it in btc format (instead of satoshis)
        /// </summary>
        public decimal InvestmentAmountBtc { get; set; }

        public bool IsSeeder { get; set; }
    }

    public class StageBreakdown
    {
        public int StageNumber { get; set; }
        public decimal AmountBtc { get; set; }
        public DateTime StageDateTime { get; set; }
        public int DaysFromStartDate { get; set; }
    }

    private async Task ShowTransactionJsonModal()
    {
        if (project == null || signedTransaction?.Transaction == null) return;

        var transactionDetails = new
        {
            ProjectIdentifier = project.ProjectInfo.ProjectIdentifier,
            FounderKey = project.ProjectInfo.FounderKey.Substring(0, 10) + "...",
            InvestmentAmount = Investment.InvestmentAmountBtc,
            TargetAmount = $"{project.ProjectInfo.TargetAmount} {network.CoinTicker}",
            StartDate = project.ProjectInfo.StartDate.ToString("dd/MM/yyyy"),
            ExpiryDate = project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy"),
            PenaltyDays = project.ProjectInfo.PenaltyDays,
            MinerFee = Money.Satoshis(signedTransaction.TransactionFee).ToUnit(MoneyUnit.BTC),
            AngorFee = signedTransaction.Transaction.Outputs.First().Value.ToUnit(MoneyUnit.BTC),
            FeeRate = $"{feeData.SelectedFeeEstimation.FeeRate} sats/byte",
            EstimatedConfirmation = $"{feeData.SelectedFeeEstimation.Confirmations} blocks",
            Stages = StagesBreakdown.Select(stage => new
            {
                StageNumber = stage.StageNumber,
                Amount = stage.AmountBtc,
                ReleaseDate = stage.StageDateTime.ToString("dd/MM/yyyy"),
                DaysFromStart = stage.DaysFromStartDate,
                AmountToRelease = project.ProjectInfo.Stages[stage.StageNumber - 1].AmountToRelease
            }).ToList(),
            RawTransaction = signedTransaction.Transaction.ToHex()
        };

        transactionJson = JsonSerializer.Serialize(transactionDetails, new JsonSerializerOptions
            {
                WriteIndented = true
            });

        showTransactionJsonModal = true;
        StateHasChanged();
    }

    private void HandleTransactionJsonModalVisibility(bool isVisible)
    {
        showTransactionJsonModal = isVisible;
        StateHasChanged();
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        notificationComponent.ShowNotificationMessage("Copied to clipboard", 2);
    }
}
