@page "/invest/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Services
@using Angor.Shared.ProtocolNew
@using Blockcore.NBitcoin.DataEncoders
@using JSException = Microsoft.JSInterop.JSException
@using Money = Blockcore.NBitcoin.Money
@using Transaction = Blockcore.Consensus.TransactionInfo.Transaction
@using Angor.Shared.Services
@using Nostr.Client.Keys
@using System.Diagnostics
@using Angor.Client.Models

@inject IJSRuntime Js

@inherits BaseComponent

@inject ILogger<Invest> Logger;
@inject IDerivationOperations DerivationOperations
@inject IClientStorage Storage;
@inject ICacheStorage SessionStorage;
@inject IWalletOperations WalletOperations

@inject ISignService SignService

@inject IInvestorTransactionActions InvestorTransactionActions

@if (!HasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

@if (_invested)
{
    <p>You already invested.</p>
    return;
}

@if (_founder)
{
    <p>You are the founder.</p>
    return;
}

@if(_project == null)
{
    <p>The project was not found.</p>
    return;
}

<div class="container py-3">
    <h1 class="mb-4">Investment Page</h1>
    <p>Here is a small explanation of the project. You can <a href="view/@ProjectId">view more details about the project here</a>.</p>
    
    <p>ProjectId: @ProjectId</p>
    <p>Target amount: @_project.ProjectInfo.TargetAmount BTC</p>
    <p>Starting in: @_project.ProjectInfo.StartDate.ToString("dd/MM/yyyy")</p>

    <NotificationComponent @ref="NotificationComponent" />
    @if(_project is not InvestorProject investorProject)
    {
        <div class="card">
            <div class="card-body">
                <EditForm Model="Investment" OnValidSubmit="InvestFunds">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="investmentAmount">Investment Amount</label>
                        <InputNumber class="form-control" id="investmentAmount" @bind-Value="@Investment.InvestmentAmount" @oninput="UpdateStagesBreakdown" />
                    </div>

                    <div class="form-check">
                        <InputCheckbox class="form-check-input" id="isSeeder" @bind-Value="@Investment.IsSeeder" disabled="@(!IsSeederTimePassed)" />
                        <label class="form-check-label" for="isSeeder">
                            Do you want to invest as a Seeder?
                        </label>
                    </div>

                    @if (!IsSeederTimePassed)
                    {
                        <div class="alert alert-info mt-2">
                            <strong>Seeder Requirements:</strong> Here are the requirements for a Seeder...
                        </div>
                    }

                    <button type="submit" class="btn btn-primary mt-3" disabled="@_buildSpinner">
                        @if (_buildSpinner)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Building trx...</span>
                        }
                        else
                        {
                            <span>Next</span>
                        }
                    </button>
                </EditForm>
            </div>
        </div>

        @if (_showCreateModal)
        {
            <!-- Confirmation Modal -->
            <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirmation</h5>
                            <button type="button" class="btn-close" @onclick="() => _showCreateModal = false" disabled="@_investSpinner"></button>
                        </div>
                        <div class="modal-body modal-body-scroll">
                            <p class ="mb-1"><strong>Project Identifier:</strong> @_project.ProjectInfo.ProjectIdentifier</p>
                            <p class="mb-1"><strong>Founder Key:</strong> @_project.ProjectInfo.FounderKey.Substring(0, 10)...</p> <!-- Display only the first 10 characters -->

                            <p class="mb-1"><strong>Target amount:</strong> @_project.ProjectInfo.TargetAmount @Network.CoinTicker</p>

                            <p class="mb-1"><strong>Start date:</strong> @_project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") in @((_project.ProjectInfo.StartDate - DateTime.Now).Days) days</p>
                            <p class="mb-1"><strong>Expiry date:</strong> @_project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy") in @((_project.ProjectInfo.ExpiryDate - DateTime.Now).Days) days</p>
                            <p class="mb-1"><strong>Penalty days:</strong> @_project.ProjectInfo.PenaltyDays days</p>

                            <p class="mb-1"><strong>Miner fee:</strong> [Your fee here]</p>
                            <p class="mb-1"><strong>Angor fee:</strong> 1000 sats</p>
                        
                            <hr>

                            <div class="mb-3">
                                <label for="feeRange" class="form-label">Feerate for @_feeData.SelectedFeeEstimation.Confirmations blocks is @_feeData.SelectedFeeEstimation.FeeRate sats</label>
                                <input type="range" class="form-range" id="feeRange" @bind="_feeData.FeePosition" @oninput="FeeRangeChanged" min="@_feeData.FeeMin" max="@_feeData.FeeMax">
                            </div>

                            <hr>

                            <h6 class="mt-3 mb-2">Stages</h6>
                            @{
                                int index = 0;
                                @foreach (var stage in _project.ProjectInfo.Stages)
                                {
                                    <div style="border-top: 1px solid #dee2e6; padding-top: 10px; margin-top: 10px; font-size: 0.85em;">
                                        <p class="mb-1"><strong>Stage amount:</strong> @StagesBreakdown[index++].Amount BTC - @stage.AmountToRelease % </p>
                                        <p class="mb-1"><strong>Stage date:</strong> @stage.ReleaseDate.ToString("dd/MM/yyyy") - @((stage.ReleaseDate - _project.ProjectInfo.StartDate).Days) days after project starts </p>
                                    </div>
                                }
                            }
                            <hr>

                            <p class="mt-3">Are you sure you want to continue?</p>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="() => _showCreateModal = false" disabled="@_investSpinner">Cancel</button>
                            <button type="button" class="btn btn-primary" @onclick="Send" disabled="@_investSpinner">
                                @if (_investSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span>Confirm...</span>
                                }
                                else
                                {
                                    <span>Confirm</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>

        }

        <!-- Stages Breakdown -->
        @if (StagesBreakdown != null)
        {
            <div class="card mt-3">
                <div class="card-header">
                    <h4>Stages Breakdown</h4>
                </div>
                <div class="card-body">
                    @foreach (var stage in StagesBreakdown)
                    {
                        <p>Stage @stage.StageNumber: invest @stage.Amount BTC that will released on @stage.StageDateTime.ToString("dd/MM/yyyy") (@stage.DaysFromStartDate days) </p>
                    }
                </div>
            </div>
        }
    }
    else
    {
        if (investorProject.WaitingForFounderResponse())
        {
            <div class="card mt-3 text-center">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>Waiting for the founder to approve</h4>
                    <button type="button" class="btn btn-danger" @onclick="CancelInvestment">Cancel</button>
                </div>
                <div class="card-body">
                    @*<p>Waiting for the founder to sign the investment request</p>*@
                    
                    <div class="loader-slow"></div>
                </div>
            </div>
        }
        else
        {
            if (investorProject.ReceivedFounderSignatures() && !investorProject.InvestedInProject())
            {
                <div class="card mt-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4>Founder has signed</h4>
                        <button type="button" class="btn btn-danger" @onclick="CancelInvestment">Cancel</button>
                    </div>
                    <div class="card-body">
                        <p class="modal-title">The founder has signed the recovery transaction, you may now invest.</p>
                        <br/>
                        <button type="button" class="btn btn-success" @onclick="PublishSignedTransactionAsync" disabled="@_publishSpinner">
                            @if (_publishSpinner)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Confirm...</span>
                            }
                            else
                            {
                                <span>Invest</span>
                            }
                        </button>
                    </div>
                </div>
            }   
        }
    }
</div>


@code {

    [Parameter]
    public string ProjectId { get; set; }

    private bool _buildSpinner = false;
    private bool _investSpinner = false;
    private bool _publishSpinner = false;


    public InvestmentModel Investment { get; set; } = new InvestmentModel { InvestmentAmount = 10 };
    private bool IsSeederTimePassed { get; set; }
    private List<StageBreakdown> StagesBreakdown { get; set; } = new();
    bool _founder = false;
    bool _invested = false;
    private Project? _project;
    private bool _showCreateModal;
    Transaction? _signedTransaction;
    Transaction _unSignedTransaction;

    private FeeData _feeData = new();

    private IJSInProcessObjectReference? _javascriptNostrToolsModule;

    protected override async Task OnInitializedAsync()
    {
        if (!HasWallet)
        {
            NavigationManager.NavigateTo($"/wallet");
        }

        Project? findProject = Storage.GetInvestmentProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

        if (findProject != null)
        {
            var investmentProject = findProject as InvestorProject;
            _project = investmentProject;
            
            _invested = investmentProject?.InvestedInProject() ?? false;
        }
        else
        {
            findProject = Storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

            if (findProject != null)
            {
                _founder = true;
                _project = findProject;
            }
            else
            {
                _project = SessionStorage.GetProjectById(ProjectId);

                if (_project?.ProjectInfo == null)
                {
                    NavigationManager.NavigateTo($"/view/{ProjectId}");
                    return;
                }
            }
        }

        await CheckIfSeederTimeHasPassed();

        UpdateStagesBreakdown(new ChangeEventArgs { Value = Investment.InvestmentAmount });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_javascriptNostrToolsModule == null)
        {
            try
            {
                //TODO import the nostr tool module directly to c# class
                _javascriptNostrToolsModule = await Js.InvokeAsync<IJSInProcessObjectReference>("import", "./NostrToolsMethods.js?version=" + DateTime.UtcNow.Ticks);
            }
            catch (JSException e)
            {
                Logger.LogError(e,"Failed to load the nostr tools module");
                NotificationComponent.ShowErrorMessage(e.Message);
            }
        }

        if (_project is InvestorProject investmentProject && investmentProject.WaitingForFounderResponse())
        {
            var accountInfo = Storage.GetAccountInfo(NetworkConfiguration.GetNetwork().Name);

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(WalletStorage.GetWallet().WalletWords, accountInfo.InvestmentsCount + 1);

            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            SignService.LookupSignatureForInvestmentRequest(
                NostrPrivateKey.FromHex(nostrPrivateKeyHex).DerivePublicKey().Hex
                , _project.ProjectInfo.NostrPubKey, investmentProject.SignaturesInfo!.TimeOfSignatureRequest!.Value, investmentProject.SignaturesInfo!.SignatureRequestEventId!,
                async _ => await HandleSignatureReceivedAsync(nostrPrivateKeyHex, _));
        }
    }

    private Task CheckIfSeederTimeHasPassed()
    {
        // Implement your logic to check whether the seeder time has passed.
        // For now, I'm returning a dummy value.
        IsSeederTimePassed = false;

        Investment.IsSeeder = !IsSeederTimePassed;

        return Task.CompletedTask;
    }

    private void UpdateStagesBreakdown(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out decimal amount))
        {
            Investment.InvestmentAmount = amount;

            StagesBreakdown.Clear();
            int index = 1;

            foreach (var stage in _project!.ProjectInfo.Stages)
            {
                var insert = new StageBreakdown
                {
                    StageNumber = index++,
                    Amount = Investment.InvestmentAmount * (stage.AmountToRelease / 100),
                    StageDateTime = stage.ReleaseDate,
                    DaysFromStartDate = (stage.ReleaseDate - _project.ProjectInfo.StartDate).Days
                };

                StagesBreakdown.Add(insert);
            }
        }
    }

    private async Task InvestFunds()
    {
        if (Investment.IsSeeder) 
        {
            var minSeederAmount = 2;
            if (Investment.InvestmentAmount < minSeederAmount)
            {
                NotificationComponent.ShowErrorMessage($"Seeder minimum investment amount of {minSeederAmount} BTC was not reached");
                return;
            }
        }
        else
        {
            if  (Investment.InvestmentAmount < (decimal)0.001)
            {
                NotificationComponent.ShowErrorMessage($"Investor minimum investment amount is {0.001} BTC");
                return;
            }
        }

        if (_project.ProjectInfo.Stages.Sum(s => s.AmountToRelease) != 100)
        {
            NotificationComponent.ShowErrorMessage("The stages must sum to 100%");
            return;
        }

        if (_project is InvestorProject investmentProject && investmentProject.InvestedInProject())
        {
            NotificationComponent.ShowErrorMessage("You already invested");
            return;
        }

        _buildSpinner = true;

        try
        {
            var accountInfo = Storage.GetAccountInfo(Network.Name);

            var fetchFees = await WalletOperations.GetFeeEstimationAsync();
            _feeData.FeeEstimations.Fees.Clear();
            _feeData.FeeEstimations.Fees.AddRange(fetchFees);
            _feeData.SelectedFeeEstimation = _feeData.FeeEstimations.Fees.First();

            var walletWords = WalletStorage.GetWallet().WalletWords;

            var investorKey = DerivationOperations.DeriveInvestorKey(walletWords, _project.ProjectInfo.FounderKey);
            
            if (Investment.IsSeeder)
            {
                var seederHash = DerivationOperations.DeriveSeederSecretHash(walletWords, _project.ProjectInfo.FounderKey);
            }

            _unSignedTransaction = InvestorTransactionActions.CreateInvestmentTransaction(_project.ProjectInfo, investorKey, Money.Coins(Investment.InvestmentAmount).Satoshi);

            _signedTransaction = WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), _unSignedTransaction, walletWords, accountInfo, _feeData.SelectedFeeEstimation);

        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _showCreateModal = true;
            _buildSpinner = false;
        }
    }

    private void FeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= _feeData.FeeEstimations.Fees.Count)
                {
                    _feeData.SelectedFeeEstimation = _feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];
                   
                    var accountInfo = Storage.GetAccountInfo(Network.Name);
                    
                    _signedTransaction = WalletOperations.AddInputsAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), _unSignedTransaction, WalletStorage.GetWallet().WalletWords, accountInfo, _feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task Send()
    {
        _investSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            Debug.Assert(_project != null, nameof(_project) + " != null");

            _project = new InvestorProject
            {
                ProjectInfo = _project.ProjectInfo, 
                Metadata = _project.Metadata, 
                SignedTransactionHex = _signedTransaction!.ToHex(), 
                CreationTransactionId = _project.CreationTransactionId
            };

            var investorProject = (InvestorProject)_project;

            // remove signatures when requesting founder to sign
            investorProject.SignaturesInfo = new()
                {
                    ProjectIdentifier = investorProject!.ProjectInfo.ProjectIdentifier,
                };

            var strippedInvestmentTransaction = Network.CreateTransaction(investorProject.SignedTransactionHex);
            strippedInvestmentTransaction.Inputs.ForEach(f => f.WitScript = Blockcore.Consensus.TransactionInfo.WitScript.Empty);

            var accountInfo = Storage.GetAccountInfo(Network.Name);

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(WalletStorage.GetWallet().WalletWords, accountInfo.InvestmentsCount + 1);

            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            var encryptedContent = await _javascriptNostrToolsModule.InvokeAsync<string>(
                "encryptNostr",
                nostrPrivateKeyHex,
                investorProject.ProjectInfo.NostrPubKey,
                strippedInvestmentTransaction.ToHex(Network.Consensus.ConsensusFactory));

            var investmentSigsRequest = SignService.RequestInvestmentSigs(new SignRecoveryRequest
                {
                    ProjectIdentifier = investorProject.ProjectInfo.ProjectIdentifier,
                    EncryptedContent = encryptedContent,
                    NostrPubKey = investorProject.ProjectInfo.NostrPubKey,
                    InvestorNostrPrivateKey = nostrPrivateKeyHex
                });

            investorProject.SignaturesInfo!.TimeOfSignatureRequest = investmentSigsRequest.eventTime;
            investorProject.SignaturesInfo!.SignatureRequestEventId = investmentSigsRequest.eventId;

            Storage.AddInvestmentProject(investorProject);

            foreach (var input in strippedInvestmentTransaction.Inputs)
                accountInfo.UtxoReservedForInvestment.Add(input.PrevOut.ToString());

            Storage.SetAccountInfo(Network.Name, accountInfo);

            SignService.LookupSignatureForInvestmentRequest(
                NostrPrivateKey.FromHex(nostrPrivateKeyHex).DerivePublicKey().Hex,
                investorProject.ProjectInfo.NostrPubKey,
                investorProject.SignaturesInfo.TimeOfSignatureRequest.Value,
                investorProject.SignaturesInfo.SignatureRequestEventId,
                async _ => await HandleSignatureReceivedAsync(nostrPrivateKeyHex, _));

            var metadata = SessionStorage.GetProjectMetadataByPubkey(_project.ProjectInfo.NostrPubKey);
            if (metadata != null)
            {
                Storage.AddInvestmentProjectMetadata(_project.ProjectInfo.NostrPubKey, metadata);
            }

            NotificationComponent.ShowNotificationMessage("Signature request sent", 5);
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _showCreateModal = false;
            _investSpinner = false;
        }
    }

    private async Task HandleSignatureReceivedAsync(string? nostrPrivateKeyHex, string encryptedSignatures)
    {
        if (_project is not InvestorProject investorProject || investorProject.ReceivedFounderSignatures()) //multiple relays for the same message
            return;
        
        var signatureJson = await _javascriptNostrToolsModule.InvokeAsync<string>(
            "decryptNostr", nostrPrivateKeyHex, _project.ProjectInfo.NostrPubKey, encryptedSignatures);
        
        Logger.LogInformation("signature : " + signatureJson);

        var res = System.Text.Json.JsonSerializer.Deserialize<SignatureInfo>(signatureJson, RelayService.Settings);

        if (res.ProjectIdentifier == investorProject.SignaturesInfo?.ProjectIdentifier)
        {
            investorProject.SignaturesInfo.Signatures = res.Signatures;
            StateHasChanged();
        }
    }

    public async Task CancelInvestment()
    {
        if (_project is not InvestorProject investorProject || investorProject?.SignaturesInfo is null)
        {
            NotificationComponent.ShowErrorMessage("Missing project details, unable to cancel the investment");
            return;
        }

        if (!string.IsNullOrEmpty(investorProject.SignedTransactionHex))
        {
            _signedTransaction ??= Network.CreateTransaction(investorProject.SignedTransactionHex);
            var accountInfo = Storage.GetAccountInfo(Network.Name);

            foreach (var input in _signedTransaction.Inputs)
                accountInfo.UtxoReservedForInvestment.Remove(input.PrevOut.ToString());

            Storage.SetAccountInfo(Network.Name, accountInfo);
        }

        Storage.RemoveInvestmentProject(_project.ProjectInfo.ProjectIdentifier);

        investorProject.SignaturesInfo = null;
        _project = SessionStorage.GetProjectById(ProjectId);
    }

    public async Task PublishSignedTransactionAsync()
    {
        _publishSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            Debug.Assert(_project != null, nameof(_project) + " != null");
            var investorProject = _project as InvestorProject;
            Debug.Assert(investorProject is not null, "The project must be an investor project", nameof(_project) + " != null");
            Debug.Assert(investorProject.SignaturesInfo != null, nameof(investorProject.SignaturesInfo) + " != null");
            Debug.Assert(investorProject.SignedTransactionHex != null, nameof(investorProject.SignedTransactionHex) + " != null");

            _signedTransaction ??= NetworkConfiguration.GetNetwork().CreateTransaction(investorProject.SignedTransactionHex);

            var validSignatures = InvestorTransactionActions.CheckInvestorRecoverySignatures(investorProject.ProjectInfo, _signedTransaction, investorProject.SignaturesInfo);

            if (!validSignatures)
            {
                NotificationComponent.ShowErrorMessage("The signatures returned from the founder failed validation");
                return;
            }

            var response = await WalletOperations.PublishTransactionAsync(Network, _signedTransaction);

            if (!response.Success)
            {
                NotificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            // link the trx to the signatures
            investorProject.CompleteProjectInvestment(_signedTransaction);

            Storage.UpdateInvestmentProject(investorProject);

            var accountInfo = Storage.GetAccountInfo(Network.Name);
            var unspentInfo = SessionStorage.GetUnconfirmedInboundFunds();

            var spendUtxos = WalletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, _signedTransaction);

            foreach (var input in _signedTransaction.Inputs)
                accountInfo.UtxoReservedForInvestment.Remove(input.PrevOut.ToString());

            Storage.SetAccountInfo(Network.Name, accountInfo);

            unspentInfo.AddRange(spendUtxos);
            SessionStorage.SetUnconfirmedInboundFunds(unspentInfo);

            var metadata = SessionStorage.GetProjectMetadataByPubkey(_project.ProjectInfo.NostrPubKey);
            if (metadata != null)
            {
                Storage.AddInvestmentProjectMetadata(_project.ProjectInfo.NostrPubKey, metadata);
            }

            NotificationComponent.ShowNotificationMessage("Invested in project", 5);

            NavigationManager.NavigateTo($"/view/{_project.ProjectInfo.ProjectIdentifier}");
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _publishSpinner = false;
        }
    }

    public class InvestmentModel
    {
        public decimal InvestmentAmount { get; set; }
        public bool IsSeeder { get; set; }
    }

    public class StageBreakdown
    {
        public int StageNumber { get; set; }
        public decimal Amount { get; set; }
        public DateTime StageDateTime { get; set; }
        public int DaysFromStartDate { get; set; }
    }
}
