@page "/founder"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Client.Models
@using Nostr.Client.Messages

@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject IRelayService RelayService;
@inject IIndexerService _IndexerService
@inject ISerializer serializer

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container my-4">
    <h1>Founder Page</h1>

    <NotificationComponent @ref="notificationComponent" />

    <div class="row">
        <div class="col">

            <p>Welcome to the founder page! Here you can create a new project or view your existing project.</p>

            <p>Creating a project requires an on-chain transaction and a nostr did</p>

        </div>
    </div>

    @if (founderProjects.Count == 0)
    {
        <p>No projects found.</p>

        <div class="row">
            <div class="col">
                @if (scanningForProjects)
                {
                    <div class="small loader"></div>
                }
                else
                {
                    <button class="btn btn-primary mb-4" @onclick="LookupProjectKeysOnIndexerAsync">Scan for founder projects</button>
                    <br />
                }
            </div>
        </div>

    }
    else
    {
        foreach (var project in founderProjects)
        {
            <div class="row">
                <div class="col">
                    <FounderProjectItem FounderProject="@project"></FounderProjectItem>
                </div>
            </div>
        }
    }

    <div class="row">
        <div class="col">
            <button class="btn btn-primary mb-3" @onclick="NavigateToCreateProject">Create Project</button>
        </div>
    </div>
</div>


@code {
    private string founderKey;
    private string projectId;
    private List<FounderProject> founderProjects = new();
    private bool hasWallet;
    bool scanningForProjects;

    private NotificationComponent notificationComponent;




    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            founderProjects = storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();
        }
    }

    private async Task LookupProjectKeysOnIndexerAsync()
    {
        scanningForProjects = true;

        var keys = _walletStorage.GetFounderKeys();

        var founderProjectsToLookup = new Dictionary<string,ProjectIndexerData>();

        foreach (var key in keys.Keys)
        {
            if (founderProjects.Exists(_ => _.ProjectInfo.ProjectIdentifier == key.ProjectIdentifier))
                continue;

            var indexerProject = await _IndexerService.GetProjectByIdAsync(key.ProjectIdentifier);

            if (indexerProject == null)
                break;

            founderProjectsToLookup.Add(key.NostrPubKey,indexerProject);
        }

        if (founderProjectsToLookup.Any())
            RelayService.RequestProjectCreateEventsByPubKey(e =>
            {
                switch (e)
                {
                    case { Kind: NostrKind.Metadata }:
                        var nostrMetadata = serializer.Deserialize<ProjectMetadata>(e.Content);
                        var founderProject = founderProjects.FirstOrDefault(_ => _.ProjectInfo.NostrPubKey == e.Pubkey);
                        if (founderProject != null && founderProject.Metadata is null)
                            founderProject.Metadata = nostrMetadata;
                        // else
                        //     notificationComponent.ShowNotificationMessage($"Couldn't find the project details for the project {nostrMetadata.Name} try adding the missing relay."); //TODO
                        break;
                    case { Kind: NostrKind.ApplicationSpecificData }:
                        var projectInfo = serializer.Deserialize<ProjectInfo>(e.Content);
                        if (founderProjects.All(_ => _.ProjectInfo.NostrPubKey != e.Pubkey)) //Getting events from multiple relays
                            founderProjects.Add(new FounderProject
                            {
                                ProjectInfo = projectInfo,
                                ProjectIndex = founderProjectsToLookup.Keys.ToList().IndexOf(e.Pubkey) + 1,
                                CreationTransactionId = founderProjectsToLookup[e.Pubkey].TrxId
                            });
                        break;
                }
            },
                () =>
                {
                    scanningForProjects = false;
                    storage.AddFounderProject(founderProjects.ToArray());
                    StateHasChanged();
                },
                founderProjectsToLookup.Keys.ToArray());
        else
            scanningForProjects = false;
    }

    private void NavigateToCreateProject()
    {
        NavigationManager.NavigateTo("/create");
    }
}