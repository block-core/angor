@page "/founder"
@using Angor.Client.Models
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Nostr.Client.Messages
@using Angor.Client.Shared

@inject NavigationManager NavigationManager
@inject NavMenuState NavMenuState
@inject IWalletStorage WalletStorage;
@inject IClientStorage Storage;
@inject IRelayService RelayService;
@inject IIndexerService IndexerService;
@inject ISerializer Serializer;

@inherits BaseComponent

<NotificationComponent @ref="notificationComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo("/wallet");
    return;
}

<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="founder" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Founder</h5>
            </div>
            <div class="header-actions">
                <div class="tooltip-container" data-bs-toggle="tooltip" title="@GetCreateButtonTooltip()">
                    <button class="btn btn-border-success btn-sm"
                            @onclick="NavigateToCreateProject"
                            disabled="@(scanningForProjects || (founderProjects.Count >= 14) ? true : null)">
                        @if (scanningForProjects)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="button-text ms-2">Scanning...</span>
                        }
                        else
                        {
                            <Icon IconName="add" Width="24" Height="24" />
                            <span class="button-text ms-2">Create Project</span>
                        }
                    </button>
                </div>

            </div>
        </div>
    </div>
</div>


<div class="row slide-in mt-4">
    <div class="card card-body">
        <p class="mb-0 font-weight-normal text-sm animate-fade-in-delayed">
            To create a new project, an on-chain transaction and a Nostr DID are created.
        </p>
    </div>
</div>

@if (founderProjects.Count == 0)
{
    <div class="row">
        <div class="info-alert my-4 ">
            <Icon IconName="info" Class="alert-icon" Width="24" Height="24" />
            <p class="text-warning">
                No projects found.
            </p>
        </div>
    </div>
}

@if (founderProjects.Count > 0)
{
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-3 project-wrapper g-4" data-cy="project-grid">
        @foreach (var project in founderProjects)
        {
            <FounderProjectItem FounderProject="@project" CoinTicker="@network.CoinTicker"></FounderProjectItem>
        }
    </div>
}

<div class="row">
    <div class="col">
        <div class="d-flex justify-content-center mt-4">
            <button class="btn btn-border my-3 w-100-m" @onclick="LookupProjectKeysOnIndexerAsync">
                <i class="@(scanningForProjects ? "rotate-icon" : "")">
                    <Icon IconName="refresh"></Icon>
                </i>
                <span class="nav-link-text ms-1">@(founderProjects.Count == 0 ? "Scan for founder projects" : "Rescan founder projects")</span>
            </button>
        </div>
    </div>
</div>

@code {
    private string founderKey;
    private string projectId;
    private List<FounderProject> founderProjects = new();
    private bool hasWallet;
    bool scanningForProjects;

    private NotificationComponent notificationComponent;


    protected override async Task OnInitializedAsync()
    {
        // Set active menu
        NavMenuState.SetActivePage("founder");

        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            var storedProjects = Storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();

            // Check if any project has incomplete ProjectInfo and needs refresh
            bool needsRefresh = false;
            foreach (var project in storedProjects)
            {
                if (project.ProjectInfo == null ||
                    string.IsNullOrEmpty(project.ProjectInfo.ProjectIdentifier) ||
                    project.ProjectInfo.Stages == null ||
                    !project.ProjectInfo.Stages.Any())
                {
                    needsRefresh = true;
                    break;
                }
            }

            founderProjects = storedProjects;

            // If any project needs refresh, automatically scan for updates
            if (needsRefresh && founderProjects.Any())
            {
                _ = Task.Run(async () => await LookupProjectKeysOnIndexerAsync());
            }
        }

        await Task.CompletedTask;
    }

    private async Task LookupProjectKeysOnIndexerAsync()
    {
        scanningForProjects = true;

        var keys = _walletStorage.GetFounderKeys();
        var founderProjectsToLookup = new Dictionary<string, ProjectIndexerData>();

        foreach (var key in keys.Keys)
        {
            if (founderProjects.Any(_ => _.ProjectInfo.ProjectIdentifier == key.ProjectIdentifier))
                continue;

            var indexerProject = await IndexerService.GetProjectByIdAsync(key.ProjectIdentifier);

            if (indexerProject != null) //TODO we need to talk about supporting projects that are created with gaps
                founderProjectsToLookup.Add(key.NostrPubKey, indexerProject);
        }

        if (!founderProjectsToLookup.Any())
        {
            scanningForProjects = false;
            return;
        }

        var projectsForLookup = founderProjectsToLookup
            .Where(_ => !string.IsNullOrEmpty(_.Value.NostrEventId))
            .Select(_ => _.Value.NostrEventId)
            .ToArray();

        if (projectsForLookup.Any())
        {
            var projectNpubsForLookup = new Dictionary<string, string>();

            RelayService.LookupProjectsInfoByEventIds<ProjectInfo>(projectInfo =>
            {
                var existingProject = founderProjects.FirstOrDefault(_ => _.ProjectInfo.ProjectIdentifier == projectInfo.ProjectIdentifier);

                if (existingProject != null)
                {
                    existingProject.ProjectInfo = projectInfo;
                }
                else
                {
                    var projectIndexerData = founderProjectsToLookup.FirstOrDefault(p => p.Value.ProjectIdentifier == projectInfo.ProjectIdentifier);
                    if (projectIndexerData.Key != null)
                    {
                        var founderProject = CreateFounderProject(founderProjectsToLookup, null, projectInfo);
                        founderProject.ProjectInfo.NostrPubKey = projectIndexerData.Key;
                        founderProjects.Add(founderProject);
                    }
                }

                // Check if key already exists before adding
                if (!projectNpubsForLookup.ContainsKey(projectInfo.NostrPubKey))
                {
                    projectNpubsForLookup.Add(projectInfo.NostrPubKey, projectInfo.ProjectIdentifier);
                }
            }, () =>
                RelayService.LookupNostrProfileForNPub((npub, nostrMetadata) =>
                    {
                        var project = founderProjects.FirstOrDefault(p => p.ProjectInfo.NostrPubKey == npub);
                        if (project == null)
                        {
                            // Try to find by project identifier
                            if (projectNpubsForLookup.ContainsKey(npub))
                            {
                                project = founderProjects.FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == projectNpubsForLookup[npub]);
                            }
                        }

                        if (project != null && project.Metadata == null)
                        {
                            project.Metadata = nostrMetadata;
                        }
                    }, () =>
                    {
                        scanningForProjects = false;

                        // Merge or update projects in storage
                        foreach (var project in founderProjects)
                        {
                            var existing = Storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == project.ProjectInfo.ProjectIdentifier);
                            if (existing == null)
                            {
                                Storage.AddFounderProject(new[] { project });
                            }
                            else
                            {
                                Storage.UpdateFounderProject(project);
                            }
                        }

                        StateHasChanged();
                    },
                    projectNpubsForLookup.Keys.ToArray()),
            projectsForLookup);
        }
        else
        {
            scanningForProjects = false;
        }
    }

    private FounderProject CreateFounderProject(Dictionary<string, ProjectIndexerData> founderProjectsToLookup,
        NostrEvent? e, ProjectInfo? projectInfo = null)
    {
        var keys = _walletStorage.GetFounderKeys();

        if (e != null && !string.IsNullOrEmpty(e.Pubkey))
        {
            var projectIndex = keys.Keys.First(x => x.NostrPubKey == e.Pubkey).Index; //we throw if not found
            var trxId = founderProjectsToLookup[e.Pubkey].TrxId;

            return new FounderProject
            {
                ProjectInfo = projectInfo ?? new ProjectInfo { ProjectIdentifier = founderProjectsToLookup[e.Pubkey].ProjectIdentifier, NostrPubKey = e.Pubkey },
                ProjectIndex = projectIndex,
                CreationTransactionId = trxId,
                NostrProfileCreated = true,
                ProjectInfoEventId = founderProjectsToLookup[e.Pubkey].NostrEventId
            };
        }
        else if (projectInfo != null)
        {
            // When creating from projectInfo without NostrEvent
            var projectKey = keys.Keys.FirstOrDefault(x => x.ProjectIdentifier == projectInfo.ProjectIdentifier);
            if (projectKey == null)
                throw new InvalidOperationException($"Project key not found for identifier: {projectInfo.ProjectIdentifier}");

            var indexerData = founderProjectsToLookup.Values.FirstOrDefault(x => x.ProjectIdentifier == projectInfo.ProjectIdentifier);
            if (indexerData == null)
                throw new InvalidOperationException($"Indexer data not found for identifier: {projectInfo.ProjectIdentifier}");

            return new FounderProject
            {
                ProjectInfo = projectInfo,
                ProjectIndex = projectKey.Index,
                CreationTransactionId = indexerData.TrxId,
                NostrProfileCreated = true,
                ProjectInfoEventId = indexerData.NostrEventId
            };
        }
        else
        {
            throw new ArgumentException("Either NostrEvent or ProjectInfo must be provided");
        }
    }

    private async Task NavigateToCreateProject()
    {
        // perform a rescan before creating a project (to update the keys)
        await LookupProjectKeysOnIndexerAsync();

        NavigationManager.NavigateTo("/create");
    }
    private string GetCreateButtonTooltip()
    {
        if (founderProjects.Count >= 15)
            return "You have reached the maximum number of projects. Please manage your existing projects.";
        if (scanningForProjects)
            return "Scanning in progress...";
        return "Create a new project.";
    }


}