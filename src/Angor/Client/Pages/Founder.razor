@page "/founder"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Client.Models
@using Nostr.Client.Messages

@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject IRelayService RelayService;
@inject IIndexerService _IndexerService
@inject ISerializer serializer

<NotificationComponent @ref="notificationComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none">
                    <Icon IconName="founder" Height="42" Width="42" />
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Founder
                    </h5>
         
                </div>
            </div>
            <button class="btn btn-border" @onclick="NavigateToCreateProject">
                <i>
                    <Icon IconName="add"></Icon>
                </i>
                <span class="nav-link-text ms-1">Create Project</span>
            </button>
        </div> 
        <p class="mb-0 font-weight-normal text-sm mt-4">
        To create a new project or view your existing projects, an on-chain transaction and a Nostr DID are required.
        </p> 
    </div>
</div>

@if (founderProjects.Count == 0)
{
    <div class="row mt-4">
        <div class="card card-body angor-alert-info pt-2 pb-2">
            <div class="d-flex align-items-center align-items-center">
                <span class="me-3 user-select-none">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--bs-primary-btn-icon)" />
                </span>
                <span class="text-white">No projects found.</span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">

            <div class="d-flex justify-content-center mt-4">
                <button class="btn btn-border my-3" @onclick="LookupProjectKeysOnIndexerAsync">
                    <i class="@(scanningForProjects ? "rotate-icon" : "")">
                        <Icon IconName="refresh"></Icon>
                    </i>
                    <span class="nav-link-text ms-1">Scan for founder projects</span>
                </button>
            </div>

        </div>
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-3 project-wrapper" data-cy="project-grid">
        @foreach (var project in founderProjects)
        {
            <FounderProjectItem FounderProject="@project"></FounderProjectItem>
        }
    </div>

}

@code {
    private string founderKey;
    private string projectId;
    private List<FounderProject> founderProjects = new();
    private bool hasWallet;
    bool scanningForProjects;

    private NotificationComponent notificationComponent;




    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            founderProjects = storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();
        }
    }

    private async Task LookupProjectKeysOnIndexerAsync()
    {
        scanningForProjects = true;

        var keys = _walletStorage.GetFounderKeys();

        var founderProjectsToLookup = new Dictionary<string, ProjectIndexerData>();

        foreach (var key in keys.Keys)
        {
            if (founderProjects.Exists(_ => _.ProjectInfo.ProjectIdentifier == key.ProjectIdentifier))
                continue;

            var indexerProject = await _IndexerService.GetProjectByIdAsync(key.ProjectIdentifier);

            if (indexerProject == null)
                break;

            founderProjectsToLookup.Add(key.NostrPubKey, indexerProject);
        }

        if (founderProjectsToLookup.Any())
            RelayService.RequestProjectCreateEventsByPubKey(e =>
            {
                switch (e)
                {
                    case { Kind: NostrKind.Metadata }:
                        var nostrMetadata = serializer.Deserialize<ProjectMetadata>(e.Content);
                        var founderProject = founderProjects.FirstOrDefault(_ => _.ProjectInfo.NostrPubKey == e.Pubkey);
                        if (founderProject != null && founderProject.Metadata is null)
                            founderProject.Metadata = nostrMetadata;
                        // else
                        //     notificationComponent.ShowNotificationMessage($"Couldn't find the project details for the project {nostrMetadata.Name} try adding the missing relay."); //TODO
                        break;
                    case { Kind: NostrKind.ApplicationSpecificData }:
                        var projectInfo = serializer.Deserialize<ProjectInfo>(e.Content);
                        if (founderProjects.All(_ => _.ProjectInfo.NostrPubKey != e.Pubkey)) //Getting events from multiple relays
                            founderProjects.Add(new FounderProject
                                {
                                    ProjectInfo = projectInfo,
                                    ProjectIndex = founderProjectsToLookup.Keys.ToList().IndexOf(e.Pubkey) + 1,
                                    CreationTransactionId = founderProjectsToLookup[e.Pubkey].TrxId
                                });
                        break;
                }
            },
                () =>
                {
                    scanningForProjects = false;
                    storage.AddFounderProject(founderProjects.ToArray());
                    StateHasChanged();
                },
                founderProjectsToLookup.Keys.ToArray());
        else
            scanningForProjects = false;
    }

    private void NavigateToCreateProject()
    {
        NavigationManager.NavigateTo("/create");
    }
}