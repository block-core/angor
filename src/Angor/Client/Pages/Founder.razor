@page "/founder"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Client.Models
@using Angor.Client.Components
@using Nostr.Client.Messages
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject IWalletStorage WalletStorage;
@inject IClientStorage Storage;
@inject IRelayService  RelayService;
@inject IIndexerService IndexerService

@if (!_hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container my-4">
    <h1>Founder Page</h1>
    
    <NotificationComponent @ref="_notificationComponent"/>

    <div class="row">
        <div class="col">

            <p>Welcome to the founder page! Here you can create a new project or view your existing project.</p>

            <p>Creating a project requires an on-chain transaction and a nostr did</p>

        </div>
    </div>

    @if (_founderProjects.Count == 0)
    {
        <p>No projects found.</p>

        <div class="row">
            <div class="col">
                @if (_scanningForProjects)
                {
                    <div class="small loader"></div>
                }
                else
                {
                    <button class="btn btn-primary mb-4" @onclick="LookupProjectKeysOnIndexerAsync">Scan for founder projects</button>
                    <br/>
                }
            </div>
        </div>

    }
    else
    {
        foreach (var project in _founderProjects)
        {
            <div class="row">
                <div class="col">
                    <FounderProjectItem FounderProject="@project"></FounderProjectItem>
                </div>
            </div>
        }
    }

    <div class="row">
        <div class="col">
            <button class="btn btn-primary mb-3" @onclick="NavigateToCreateProject">Create Project</button>
        </div>
    </div>
</div>


           @code {
    private string _founderKey;
    private string _projectId;
    private List<FounderProject> _founderProjects = new();
    private bool _hasWallet;
    bool _scanningForProjects;

    private NotificationComponent _notificationComponent;


    

    protected override async Task OnInitializedAsync()
    {
        _hasWallet = WalletStorage.HasWallet();

        if (_hasWallet)
        {
            _founderProjects = Storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();
        }
    }

    private async Task LookupProjectKeysOnIndexerAsync()
    {
        _scanningForProjects = true;
        
        var keys = WalletStorage.GetFounderKeys();

        var founderProjectsToLookup = new List<string>();

        foreach (var key in keys.Keys)
        {
            if (_founderProjects.Exists(_ => _.ProjectInfo.ProjectIdentifier == key.ProjectIdentifier))
                continue;

            var indexerProject = await IndexerService.GetProjectByIdAsync(key.ProjectIdentifier);

            if (indexerProject == null)
                break;

            founderProjectsToLookup.Add(key.NostrPubKey);
        }

        if (founderProjectsToLookup.Any())
            RelayService.RequestProjectCreateEventsByPubKey(e =>
            {
                switch (e)
                {
                    case { Kind: NostrKind.Metadata }:
                        var nostrMetadata = JsonSerializer.Deserialize<ProjectMetadata>(e.Content, Angor.Shared.Services.RelayService.Settings);
                        var founderProject = _founderProjects.FirstOrDefault(_ => _.ProjectInfo.NostrPubKey == e.Pubkey);
                        if (founderProject != null && founderProject.Metadata is null)
                            founderProject.Metadata = nostrMetadata;
                        // else
                        //     notificationComponent.ShowNotificationMessage($"Couldn't find the project details for the project {nostrMetadata.Name} try adding the missing relay."); //TODO  
                        break;
                    case { Kind: NostrKind.ApplicationSpecificData }:
                        var projectInfo = JsonSerializer.Deserialize<ProjectInfo>(e.Content, Angor.Shared.Services.RelayService.Settings);
                        if(_founderProjects.All(_ => _.ProjectInfo.NostrPubKey != e.Pubkey)) //Getting events from multiple relays
                            _founderProjects.Add(new FounderProject { ProjectInfo = projectInfo });
                        break;
                }
            },
                () =>
                {
                    _scanningForProjects = false;
                    Storage.AddFounderProject(_founderProjects.ToArray());
                    StateHasChanged();
                },
                founderProjectsToLookup.ToArray());
        else
            _scanningForProjects = false;
    }
    
    private void NavigateToCreateProject()
    {
        NavigationManager.NavigateTo("/create");
    }
}