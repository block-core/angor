@page "/founder"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject IRelayService  RelayService;

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container">
    <div class="row">
        <div class="col">
            <h3>Founder Page</h3>

            <NotificationComponent @ref="notificationComponent"/>

            <p>Welcome to the founder page! Here you can create a new project or view your existing project.</p>
            
            <p>Creating a project requires an on-chain transaction and a nostr did</p>

            @if (founderProjects.Count == 0)
            {
                <p>No projects found.</p>
            }
            else
            {
                foreach (var project in founderProjects)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">@project.ProjectInfo.ProjectIdentifier</h5>
                            <p class="card-text">Nostr ID: <a href="/" target="_blank">@(new Blockcore.NBitcoin.Key().PubKey.ToHex())</a></p>
                            <NavLink href=@($"/view/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-primary">View Project</NavLink>
                            @if (!project.InvestmentRequeests) { <h4 class="text-warning-emphasis">Investments requests require approval!!!</h4> } 
                        </div>
                    </div>
                }
            }

            <button class="btn btn-primary mb-3" @onclick="NavigateToCreateProject">Create Project</button>
            
        </div>
    </div>
</div>

@code {
    private string founderKey;
    private string projectId;
    private List<founderProject> founderProjects = new();
    private bool hasWallet;

    private NotificationComponent notificationComponent;


    DateTime? TODO;

    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            foreach (var projectInfo in storage.GetFounderProjects())
            {
                founderProjects.Add(new founderProject{ProjectInfo = projectInfo});
            }

            if (founderProjects.Any())
            {
                await RelayService.ConnectToRelaysAsync();

                foreach (var founderProject in founderProjects)
                {
                    await RelayService.LookupDirectMessagesForPubKeyAsync(founderProject.ProjectInfo.NostrPubKey, TODO,
                        _ =>
                        {
                            founderProject.InvestmentRequeests = true;
                            StateHasChanged();
                        });
                }
            }
        }
    }
    
    private class founderProject
    {
        public ProjectInfo ProjectInfo { get; set; }
        public bool InvestmentRequeests { get; set; }
    }

    private void NavigateToCreateProject()
    {
        NavigationManager.NavigateTo("/create");
    }

}