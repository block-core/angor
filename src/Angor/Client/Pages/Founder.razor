@page "/founder"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Client.Services
@using Angor.Client.Models
@using Angor.Client.Components
@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject IRelayService  RelayService;
@inject IIndexerService _IndexerService

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container">
    <div class="row">
        <div class="col">
            <h3>Founder Page</h3>

            <NotificationComponent @ref="notificationComponent"/>

            <p>Welcome to the founder page! Here you can create a new project or view your existing project.</p>
            
            <p>Creating a project requires an on-chain transaction and a nostr did</p>

        </div>
    </div>
    
    @if (founderProjects.Count == 0)
    {
        <p>No projects found.</p>
                
        <div class="row">
            <div class="col">
                @if (scanningForProjects)
                {
                    <div class="small loader"></div>
                }
                else
                {
                    <button class="btn btn-primary mb-4" @onclick="LookupProjectKeysOnIndexerAsync">Scan for founder projects</button>   
                    <br/>
                }
            </div>
        </div>
                
    }
    else
    {
        foreach (var project in founderProjects)
        {
            <div class="row">
                <div class="col">
                    <FounderProjectItem FounderProject="@project"></FounderProjectItem>
                </div>
            </div>
        }
    }
  
    <div class="row">
        <div class="col">
            <button class="btn btn-primary mb-3" @onclick="NavigateToCreateProject">Create Project</button>
        </div>
    </div>
</div>


           @code {
    private string founderKey;
    private string projectId;
    private List<FounderProject> founderProjects = new();
    private bool hasWallet;
    bool scanningForProjects;

    private NotificationComponent notificationComponent;


    

    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            founderProjects = storage.GetFounderProjects();
        }
    }

    private async Task LookupProjectKeysOnIndexerAsync()
    {
        scanningForProjects = true;
        await RelayService.ConnectToRelaysAsync();
        
        var keys = storage.GetFounderKeys();

        var founderProjectsToLookup = new List<string>();

        foreach (var key in keys.Keys)
        {
            if (founderProjects.Exists(_ => _.ProjectInfo.ProjectIdentifier == key.ProjectIdentifier))
                continue;

            var indexerProject = await _IndexerService.GetProjectByIdAsync(key.ProjectIdentifier);

            if (indexerProject == null)
                break;

            founderProjectsToLookup.Add(key.NostrPubKey);
        }

        if (founderProjectsToLookup.Any())
            await RelayService.LookupProjectsInfoByPubKeysAsync<ProjectInfo>(_ =>
            {
                var founderProject = new FounderProject { ProjectInfo = _ };
                storage.AddFounderProject(founderProject);
                founderProjects.Add(founderProject);
                scanningForProjects = false;
                StateHasChanged();

            }, founderProjectsToLookup.ToArray());
    }
    
    private void NavigateToCreateProject()
    {
        NavigationManager.NavigateTo("/create");
    }
}