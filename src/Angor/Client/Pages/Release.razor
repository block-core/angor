@page "/release/{ProjectIdentifier}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Angor.Client.Models
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Angor.Shared.Services
@using System.Security.Cryptography
@using Blockcore.Consensus.TransactionInfo

@inject ILogger<Release> Logger
@inject IDerivationOperations DerivationOperations
@inject IClientStorage Storage;
@inject ISignService SignService
@inject IInvestorTransactionActions InvestorTransactionActions
@inject IFounderTransactionActions FounderTransactionActions
@inject ISerializer serializer
@inject IEncryptionService encryption
@inject IIndexerService _IndexerService
@inject IWalletOperations _WalletOperations
@inject IWalletUIService _walletUIService;

@inherits BaseComponent

<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none">
                    <Icon IconName="signature" Height="42" Width="42" />
                </span>
                <div class="h-100 ms-3 flex-grow-1">
                    <h5 class="mb-0 font-weight-bolder">
                        Release Funds 
                    </h5>

                </div>
            </div>
        </div>
        <p class="mb-0 font-weight-normal text-sm d-flex mt-4">
            Project ID:
            <span id="transactionID" class="text-dynamic ms-1">@ProjectIdentifier</span>
        </p>
    </div>
</div>

@if (!IsFounder)
{
    // handle investor

    @if (InvestorReleaseSigInfo != null)
    {
        <button class="btn btn-sm btn-border ml-2" @onclick="ClaimInvestorCoinsPasswordAsync" disabled="@refreshButtonSpinner">
            @if (refreshButtonSpinner)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Claiming coins...</span>
            }
            else
            {
                <span>Claim coins</span>
            }
        </button>
    }
    
    @if (showReleaseModal)
    {
        <div class="modal-wrapper">
            <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Recovery Confirmation</h5>
                            <button type="button" class="btn-close" @onclick="() => showReleaseModal = false" disabled="@prepareToReleaseCoinsConfirmSpinner"></button>
                        </div>
                        <div class="modal-body modal-body-scroll">

                            <p class="mb-1">Claim back your investment without a penalty </p>

                            <p class="mb-1"><strong>Miner fee:</strong> @Money.Satoshis(releaseTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>

                            <hr>

                            <div class="mb-3">
                                <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                                <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="ReleaseInvestorFeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                            </div>

                            <hr>

                            <p class="mt-3">Are you sure you want to claim back these funds?</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-border" @onclick="() => showReleaseModal = false" disabled="@prepareToReleaseCoinsConfirmSpinner">Cancel</button>
                            <button type="button" class="btn btn-border" @onclick="ReleaseInvestorCoins" disabled="@prepareToReleaseCoinsConfirmSpinner">
                                @if (prepareToReleaseCoinsConfirmSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span>Confirming...</span>
                                }
                                else
                                {
                                    <span>Confirm</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    // handle founder

    <div class="row mt-4">
        <div class="col">

            @if (!FounderProject.ProjectDateStarted())
            {
                <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                    <div class="text-center mb-3">

                        <h6 class="mb-0">Project didn't start yet</h6>
                    </div>
                </div>
            }
            else
            {
                @if (TargetInvestmentReached())
                {
                    <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                        <div class="text-center mb-3">

                            <h6 class="mb-0">Target reached</h6>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header pb-0 p-3">
                                <div class="row">
                                    <div class="col-6 d-flex align-items-center">
                                        <h6 class="mb-0">Signatures</h6>
                                    </div>
                                    <div class="col-6 d-flex justify-content-end">
                                        <button class="btn btn-sm @(ApproveButtonClass)" @onclick="ReleaseAllSignatures" disabled="@ApproveButtonDisabled">
                                            @if (releasingAll)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span>Releasing...</span>
                                            }
                                            else
                                            {
                                                <span>Release All</span>
                                            }
                                        </button>
                                        <button class="btn btn-sm btn-border ml-2" @onclick="RefreshSignaturesInternal" disabled="@isRefreshing">
                                            @if (isRefreshing)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span>Refreshing...</span>
                                            }
                                            else
                                            {
                                                <span>Refresh</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">


                                <div class="table-responsive form-control">
                                    <table class="table align-items-center mb-0">
                                        <thead>
                                        <tr>
                                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Time Arrived</th>
                                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Time Approved</th>
                                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Time Released</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach (var signature in signaturesReleaseItems.Where(_ => _.SignRecoveryRequest?.InvestmentTransactionHex != null))
                                        {
                                            <tr>
                                                <td>@signature.TimeArrived.ToString("g")</td>
                                                <td>@signature.TimeApproved?.ToString("g")</td>
                                                @if (signature.TimeReleased is null)
                                                {
                                                    <td>
                                                        <button class="btn btn-border-success" @onclick="() => ApproveReleaseSignatureCheckPassword(signature)" disabled="@signaturesReleaseApproving.Any()">
                                                            @if (signaturesReleaseApproving.ContainsKey(signature))
                                                            {
                                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                                <span>Releasing...</span>
                                                            }
                                                            else
                                                            {
                                                                <span>Release</span>
                                                            }
                                                        </button>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>@signature.TimeReleased.ToString()</td>
                                                }
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}
 

@code {
    [Parameter]
    public string ProjectIdentifier { get; set; }

    public FounderProject FounderProject { get; set; }
    public InvestorProject InvestorProject { get; set; }

    public bool IsFounder { get; set; }

    public SignatureInfo? InvestorReleaseSigInfo;

    private List<SignatureReleaseItem> signaturesReleaseItems = new();

    private FeeData feeData = new();

    private Dictionary<SignatureReleaseItem, string> signaturesReleaseApproving = new();

    bool scanedForApprovals;
    bool scanedReleaseApprovals;

    bool releaseCoinsSpinner = false;
    bool prepareToReleaseCoinsConfirmSpinner = false;
    private Transaction? unsignedReleaseTransaction;
    private TransactionInfo? releaseTransaction;

    ProjectStats? projectStats;

    private bool CanApproveAllSignatures => signaturesReleaseItems?.Any(s => s.TimeReleased == null) ?? false;

    private string ApproveButtonClass => CanApproveAllSignatures ? "btn-border-success" : "btn-border";

    private bool ApproveButtonDisabled => !CanApproveAllSignatures;
    private bool releasingAll = false;
    private bool showReleaseModal = false;
    private bool receivingMessages = false;
    private bool refreshButtonSpinner = false;

    private bool isRefreshing
    {
        get
        {
            return refreshButtonSpinner == true || receivingMessages == true;

        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (hasWallet)
        {
            FounderProject = Storage.GetFounderProjects().FirstOrDefault(_ => _.ProjectInfo.ProjectIdentifier == ProjectIdentifier);

            if (FounderProject is not null)
            {
                IsFounder = true;
            }
            else
            {
                InvestorProject = Storage.GetInvestmentProjects().FirstOrDefault(_ => _.ProjectInfo.ProjectIdentifier == ProjectIdentifier);

                if (InvestorProject is null)
                {
                    throw new ArgumentException("The project is not founder or investor");
                }
            }

            projectStats = await _IndexerService.GetProjectStatsAsync(ProjectIdentifier);

            Logger.LogInformation($"Fetching project stats  stats AmountInvested = {projectStats?.AmountInvested} InvestorCount = {projectStats?.InvestorCount}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (hasWallet)
            {
                if (IsFounder)
                {
                    if (FounderProject!.ProjectDateStarted())
                    {
                        await RefreshSignaturesInternal();
                    }
                }
                else
                {
                    await FetchInvestorCheckPassword();
                }
            }
        }
    }

    public bool TargetInvestmentReached()
    {
        if (projectStats != null)
        {
            var targetReached = projectStats?.AmountInvested >= Money.Coins(FounderProject.ProjectInfo.TargetAmount).Satoshi;

            Logger.LogInformation($"Indexer stats for target reached = {targetReached} AmountInvested = {projectStats?.AmountInvested} TargetAmount = {Money.Coins(FounderProject.ProjectInfo.TargetAmount).Satoshi}");

            return targetReached;
        }

        Logger.LogInformation($"None indexer stats for target reached = {FounderProject.TargetInvestmentReached()} AmountInvested = {FounderProject.TotalAvailableInvestedAmount} TargetAmount = {Money.Coins(FounderProject.ProjectInfo.TargetAmount).Satoshi}");

        return FounderProject.TargetInvestmentReached();
    }

    // ==== code for the investor ====

    protected async Task FetchInvestorCheckPassword()
    {
        if (passwordComponent.HasPassword())
        {
            await FetchInvestorReleaseSignatures();
        }
        else
        {
            passwordComponent.ShowPassword(FetchInvestorReleaseSignatures);
        }
    }

    protected async Task FetchInvestorReleaseSignatures()
    {
        if (!passwordComponent.HasPassword())
        {
            notificationComponent.ShowErrorMessage("no wallet password");
            return;
        }

        var words = await passwordComponent.GetWalletAsync();
        var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, FounderProject.ProjectIndex);
        var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

        SignService.LookupReleaseSigs(
            InvestorProject.InvestorNPub,
            InvestorProject.ProjectInfo.NostrPubKey,
            null,
            InvestorProject.SignaturesInfo.SignatureRequestEventId,
            signatureContent =>
            {
                if (InvestorReleaseSigInfo != null)
                {
                    // if we already decrypted the message from another relay just ignore it

                    InvokeAsync(async () =>
                    {
                        var signatureJson = await encryption.DecryptNostrContentAsync(
                            nostrPrivateKeyHex, InvestorProject.ProjectInfo.NostrPubKey, signatureContent);

                        Logger.LogInformation("signature : " + signatureJson);

                        InvestorReleaseSigInfo = serializer.Deserialize<SignatureInfo>(signatureJson);

                        if (InvestorReleaseSigInfo?.SignatureType != "release")
                        {
                            notificationComponent.ShowErrorMessage("Incorrect signatures received");
                            Logger.LogError("Incorrect signatures received");
                            InvestorReleaseSigInfo = null;
                        }

                        StateHasChanged();

                    });
                }
                return Task.CompletedTask;
            });
    }

    private async Task ClaimInvestorCoinsPasswordAsync()
    {
        if (passwordComponent.HasPassword())
        {
            await PrepareToReleaseInvestorCoinsAsync();
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await PrepareToReleaseInvestorCoinsAsync();
            });
        }
    }

    private async Task PrepareToReleaseInvestorCoinsAsync()
    {
        releaseCoinsSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            var accountInfo = Storage.GetAccountInfo(network.Name);
            var words = await passwordComponent.GetWalletAsync();

            var investorPrivateKey = DerivationOperations.DeriveInvestorPrivateKey(words, InvestorProject.ProjectInfo.FounderKey);

            string signedTransactionHex = InvestorProject.SignedTransactionHex;

            if (signedTransactionHex is null)
            {
                signedTransactionHex = await _IndexerService.GetTransactionHexByIdAsync(InvestorProject.TransactionId);
            }

            var investmentTransaction = _networkConfiguration.GetNetwork().CreateTransaction(signedTransactionHex);

            // Sign the release transaction
            unsignedReleaseTransaction = InvestorTransactionActions.AddSignaturesToReleaseFundsTransaction(InvestorProject.ProjectInfo, investmentTransaction, InvestorReleaseSigInfo, Encoders.Hex.EncodeData(investorPrivateKey.ToBytes()), InvestorProject.ReleaseAddress);

            // Validate the signatures
            var sigCheckResult = InvestorTransactionActions.CheckInvestorReleaseSignatures(InvestorProject.ProjectInfo, investmentTransaction, InvestorReleaseSigInfo, InvestorProject.ReleaseAddress);

            if (!sigCheckResult)
                throw new Exception("Failed to validate signatures");

            // add fee to the recovery trx
            releaseTransaction = _WalletOperations.AddFeeAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedReleaseTransaction, words, accountInfo, feeData.SelectedFeeEstimation);

            Logger.LogInformation($"recoveryTransaction={releaseTransaction.Transaction.GetHash().ToString()}");

            showReleaseModal = true;
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            releaseCoinsSpinner = false;
        }
    }

    private async Task ReleaseInvestorFeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showReleaseModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();

                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = Storage.GetAccountInfo(network.Name);

                    releaseTransaction = _WalletOperations.AddFeeAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedReleaseTransaction, words, accountInfo, feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task ReleaseInvestorCoins()
    {
        prepareToReleaseCoinsConfirmSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            showReleaseModal = false;

            Storage.UpdateInvestmentProject(InvestorProject);

            var response = await _WalletOperations.PublishTransactionAsync(network, releaseTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            InvestorProject.ReleaseTransactionId = releaseTransaction.Transaction.GetHash().ToString();

            Storage.UpdateInvestmentProject(InvestorProject);

            _walletUIService.AddTransactionToPending(releaseTransaction.Transaction);

            notificationComponent.ShowNotificationMessage("Done", 1);

        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            prepareToReleaseCoinsConfirmSpinner = false;
            passwordComponent.ClearPassword();
        }
    }

    // ==== code for the founder ====

    private async Task RefreshSignaturesInternal()
    {
        if (passwordComponent.HasPassword())
        {
            await RefreshSignatures();
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await RefreshSignatures();
            });
        }
    }

    private async Task RefreshSignatures()
    {
        refreshButtonSpinner = true;
        StateHasChanged();
        
        if (!passwordComponent.HasPassword())
        {
            notificationComponent.ShowErrorMessage("no wallet password");
            return;
        }

        try
        {
            await FetchSignatureRequests();

            projectStats = await _IndexerService.GetProjectStatsAsync(ProjectIdentifier);

            Logger.LogInformation($"Fetching project stats  stats AmountInvested = {projectStats?.AmountInvested} InvestorCount = {projectStats?.InvestorCount}");

            await Task.Delay(1000);
        }
        catch (Exception e)
        {
            Logger.LogError($"Error fetching signatures: {e.Message}");
        }
        finally
        {
            
            refreshButtonSpinner = false;
            StateHasChanged();
        }
    }

    private async Task FetchSignatureRequests()
    {
        var words = await passwordComponent.GetWalletAsync();
        var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, FounderProject.ProjectIndex);
        var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

        receivingMessages = true;

        await SignService.LookupInvestmentRequestsAsync(FounderProject.ProjectInfo.NostrPubKey, null, null,
            (eventId, investorNostrPubKey, encryptedMessage, timeArrived) =>
            {
                Logger.LogDebug($"Sig request event received investorNostrPubKey: {investorNostrPubKey} - timeArrived: {timeArrived}");

                var sigReq = signaturesReleaseItems.FirstOrDefault(_ => _.investorNostrPubKey == investorNostrPubKey);

                if (sigReq != null)
                {
                    if (sigReq.TimeArrived >= timeArrived)
                    {
                        return; //multiple relays could mean the same massage multiple times
                    }

                    Logger.LogDebug($"Sig request event received is replaced");

                    // this is a newer sig request so replace it
                    signaturesReleaseItems.Remove(sigReq);
                }

                Logger.LogDebug($"Sig request event received is new");

                var signatureReleaseItem = new SignatureReleaseItem
                {
                    investorNostrPubKey = investorNostrPubKey,
                    TimeArrived = timeArrived,
                    EncryptedSignRecoveryMessage = encryptedMessage, //To be encrypted after js interop is loaded
                    EventId = eventId
                };

                signaturesReleaseItems.Add(signatureReleaseItem);
                Logger.LogDebug($"Added to pendingSignatures");
            },
            () =>
            {
                Logger.LogDebug($"End of messages");

                // we cannot directly call a method that needs to be awaited 
                // so we do it inside the InvokeAsync delegate.

                // decrypt the message
                InvokeAsync(async () => { await DecryptMessages(nostrPrivateKeyHex); });

                receivingMessages = false;

                // fetch all the approvals
                FetchFounderApprovalsSignatures(nostrPrivateKeyHex);
                FetchFounderReleaseSignatures(nostrPrivateKeyHex);

                Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
            });
    }

    private async Task DecryptMessages(string nostrPrivateKeyHex)
    {
        foreach (var signatureReleaseItem in signaturesReleaseItems)
        {
            try
            {
                Logger.LogInformation($"Decrypting recovery request for key {signatureReleaseItem.investorNostrPubKey}");

                var sigResJson = await encryption.DecryptNostrContentAsync(nostrPrivateKeyHex, signatureReleaseItem.investorNostrPubKey, signatureReleaseItem.EncryptedSignRecoveryMessage);

                signatureReleaseItem.SignRecoveryRequest = serializer.Deserialize<SignRecoveryRequest>(sigResJson);

                Logger.LogInformation($"Decrypted recovery request for key {signatureReleaseItem.investorNostrPubKey} content = {sigResJson}");

                if (signatureReleaseItem.SignRecoveryRequest is null)
                {
                    throw new Exception("Error deserializing signature request");
                }
            }
            catch (Exception e)
            {
                Logger.LogError("Error decrypting transaction hex: {TransactionHex}, Exception: {ExceptionMessage}", signatureReleaseItem?.SignRecoveryRequest?.InvestmentTransactionHex, e.Message);
                signatureReleaseItem.SignRecoveryRequest = null;
            }
        }
        
        StateHasChanged();
    }

    private void FetchFounderApprovalsSignatures(string nostrPrivateKeyHex)
    {
        SignService.LookupInvestmentRequestApprovals(FounderProject.ProjectInfo.NostrPubKey,
            (investorNostrPubKey, timeEventCreated, reqEventId) =>
            {
                Logger.LogDebug($"Sig response event received investorNostrPubKey: {investorNostrPubKey} - timeApproved: {timeEventCreated} - reqEventId: {reqEventId}");

                var signatureRequest = signaturesReleaseItems.FirstOrDefault(_ => _.investorNostrPubKey == investorNostrPubKey);

                if (signatureRequest is null)
                    return; // ignore it could be a fake message

                if (signatureRequest.TimeArrived > timeEventCreated)
                {
                    Logger.LogDebug($"The event received is replaced by time");
                    return; // sig of an old request
                }

                if (reqEventId != null && signatureRequest.EventId != reqEventId)
                {
                    Logger.LogDebug($"The event received is replaced by eventid");
                    return; // sig of an old request
                }

                Logger.LogDebug($"The event received is new");

                signatureRequest.TimeApproved = timeEventCreated;

                Logger.LogDebug($"Added to pendingSignatures");
            },
            () =>
            {
                scanedForApprovals = true;

                Logger.LogDebug($"Calling StateHasChanged in EOSE");
                StateHasChanged();
                Logger.LogDebug($"End of messages on EOSE");
            });
    }

    protected void FetchFounderReleaseSignatures(string nostrPrivateKeyHex)
    {
        SignService.LookupSignedReleaseSigs(FounderProject.ProjectInfo.NostrPubKey,
            (item) =>
            {
                Logger.LogDebug($"Sig release response event received investorNostrPubKey: {item.ProfileIdentifier} - timeReleased: {item.EventCreatedAt} - reqEventId: {item.EventIdentifier}");

                var signatureRequest = signaturesReleaseItems.FirstOrDefault(_ => _.investorNostrPubKey == item.ProfileIdentifier);

                if (signatureRequest is null)
                    return; // ignore it could be a message we do not recognize

                if (signatureRequest.TimeReleased > item.EventCreatedAt)
                {
                    Logger.LogDebug($"The event received is replaced by time");
                    return; // sig of an old request
                }

                if (item.EventIdentifier != null && signatureRequest.EventId != item.EventIdentifier)
                {
                    Logger.LogDebug($"The event received is replaced by eventid");
                    return; // sig of an old request
                }

                Logger.LogDebug($"The event received is new");

                signatureRequest.TimeReleased = item.EventCreatedAt;

                Logger.LogDebug($"signatureRequest.TimeReleased was updated to {signatureRequest.TimeReleased}");
            }, () =>
            {
                scanedReleaseApprovals = true;

                StateHasChanged();
            });
    }

    protected async Task ApproveReleaseSignatureCheckPassword(SignatureReleaseItem signature)
    {
        if (passwordComponent.HasPassword())
        {
            await ApproveReleaseSignature(signature);
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ApproveReleaseSignature(signature);
            });
        }
    }

    private async Task ApproveReleaseSignature(SignatureReleaseItem signature)
    {
        signaturesReleaseApproving.Add(signature, string.Empty);
        StateHasChanged();

        try
        {
            var words = await passwordComponent.GetWalletAsync();

            var operationResult = await PerformReleaseSignature(signature, words);

            if (!operationResult.Success)
            {
                notificationComponent.ShowErrorMessage(operationResult.Message);
            }
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message,e);
        }
        finally
        {
            signaturesReleaseApproving.Remove(signature);
        }

        StateHasChanged();
    }
 
    private async Task ReleaseAllSignatures()
    {
        if (passwordComponent.HasPassword())
        {
            await ProcessReleaseSignatures();
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await ProcessReleaseSignatures();
            });
        }
    }

    private async Task ProcessReleaseSignatures()
    {
        releasingAll = true;
        StateHasChanged();

        try
        {
            var releaseSignatures = signaturesReleaseItems.Where(s =>  s.TimeReleased == null).ToList();
        
            var words = await passwordComponent.GetWalletAsync();
        
            foreach (var signature in releaseSignatures)
            {
                await PerformReleaseSignature(signature, words);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message,e);
        }
        finally
        {
            releasingAll = false;
            passwordComponent.ClearPassword();
        }
        
        StateHasChanged();
    }

    private async Task<OperationResult> PerformReleaseSignature(SignatureReleaseItem signature, WalletWords words)
    {
        try
        {
            var key = DerivationOperations.DeriveFounderRecoveryPrivateKey(words, FounderProject.ProjectIndex);
            var signatureInfo = CreateReleaseSignatures(signature.SignRecoveryRequest?.InvestmentTransactionHex, FounderProject.ProjectInfo, Encoders.Hex.EncodeData(key.ToBytes()), signature.SignRecoveryRequest?.ReleaseAddress ?? signature.SignRecoveryRequest.ReleaseKey);

            var sigJson = serializer.Serialize(signatureInfo);

            var nostrPrivateKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, FounderProject.ProjectIndex);
            var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

            var encryptedContent = await encryption.EncryptNostrContentAsync(
                nostrPrivateKeyHex, signature.investorNostrPubKey, sigJson);

            signature.TimeReleased = SignService.SendReleaseSigsToInvestor(encryptedContent, nostrPrivateKeyHex, signature.investorNostrPubKey, signature.EventId);
            
            return new OperationResult { Success = true };
        }
        catch (Exception ex)
        {
            return new OperationResult { Success = false, Message = $"An error occurred: {ex.Message}" };
        }
    }

    private SignatureInfo CreateReleaseSignatures(string transactionHex, ProjectInfo info, string founderSigningPrivateKey, string investorReleaseAddress)
    {
        var investorTrx = _networkConfiguration.GetNetwork().CreateTransaction(transactionHex);

        // build sigs
        var recoveryTrx = InvestorTransactionActions.BuildReleaseInvestorFundsTransaction(info, investorTrx, investorReleaseAddress);
        var sig = FounderTransactionActions.SignInvestorRecoveryTransactions(info, transactionHex, recoveryTrx, founderSigningPrivateKey);

        if (!InvestorTransactionActions.CheckInvestorReleaseSignatures(info, investorTrx, sig, investorReleaseAddress))
           throw new InvalidOperationException();

        sig.SignatureType = "release";

        return sig;
    }

    public class SignatureReleaseItem
    {
        public string investorNostrPubKey { get; set; }

        public DateTime TimeArrived { get; set; }
        public DateTime? TimeApproved { get; set; }
        public DateTime? TimeReleased { get; set; }

        public SignRecoveryRequest? SignRecoveryRequest { get; set; }

        public SignatureInfo? InvestorRecoverySigInfo { get; set; }

        public SignatureInfo? InvestorReleaseSigInfo { get; set; }

        public string? EncryptedSignRecoveryMessage { get; set; }

        public string? EncryptedSignReleaseMessage { get; set; }

        public string EventId { get; set; }
    }
}