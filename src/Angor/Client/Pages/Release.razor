@page "/release/{ProjectIdentifier}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Angor.Client.Models
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Angor.Shared.Services
@using System.Security.Cryptography
@using Blockcore.Consensus.TransactionInfo

@inject ILogger<Release> Logger
@inject IDerivationOperations DerivationOperations
@inject IClientStorage Storage;
@inject ISignService SignService
@inject IInvestorTransactionActions InvestorTransactionActions
@inject IFounderTransactionActions FounderTransactionActions
@inject ISerializer serializer
@inject IEncryptionService encryption
@inject IIndexerService _IndexerService
@inject IWalletOperations _WalletOperations
@inject IWalletUIService _walletUIService;

@inherits BaseComponent

<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}
<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="signature" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Claim funds without penalty</h5>
            </div>
            <div class="header-actions">
            </div>
        </div>
    </div>
</div>

<div class="row slide-in mt-4">
    <div class="card card-body">
        <p class="mb-0 font-weight-normal text-sm animate-fade-in-delayed">
            Project ID: @ProjectIdentifier
        </p>
    </div>
</div>

<div class="card card-body mt-4 animate-fade-in">

    <div class="d-flex align-items-center justify-content-between mb-4">
        <div class="d-flex align-items-center">
            <span class="user-select-none animate-rotate">
                <Icon IconName="indexer" Height="32" Width="32"></Icon>
            </span>
            <div class="h-100 ms-3">
                <h5 class="mb-0 font-weight-bolder">
                    Awaiting release
                </h5>

            </div>
        </div>
        <button class="btn btn-border-success refresh-btn h-100 w-auto" @onclick="FetchInvestorCheckPassword" disabled="@refreshSpinner">
            @if (refreshSpinner)
            {
                <span class="spinner-border spinner-border-sm opacity-10 btn-angor btn-content"
                      role="status"
                      aria-hidden="true">
                </span>
            }
            else
            {
                <Icon IconName="refresh" Height="24" Width="24" />
            }
        </button>
    </div>

    @if (InvestorProject.UnfundedReleaseTransactionId != null)
    {
        <div class="transaction-status-container">
            <div class="transaction-info p-4 rounded shadow-sm">
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                    <div class="transaction-details">
                        <h6 class="text-muted mb-2">Transaction ID</h6>
                        <div class="d-flex align-items-center">
                            <span class="transaction-id text-truncate">@InvestorProject.UnfundedReleaseTransactionId</span>
                            <a href="@explorerLink" target="_blank" class="ms-2 btn btn-sm btn-outline-primary">
                                <Icon IconName="link" Width="16" Height="16" Class="me-1" />
                                View on Explorer
                            </a>
                        </div>
                    </div>
                    <div class="transaction-status">
                        <span class="badge bg-success">
                            <Icon IconName="check-circle" Width="16" Height="16" Class="me-1" />
                            Released
                        </span>
                    </div>
                </div>
                <hr class="my-4" />
                <div class="text-center">
                    <p class="lead mb-0">Your coins have been successfully released.</p>
                    <p class="text-muted mt-2">You can now proceed to claim your funds.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        @if (InvestorReleaseSigInfo == null)
        {
            <div class="d-flex justify-content-center align-items-center">
                <div class="loader-slow"></div>
            </div>
        }
        else
        {
            <div class="info-card d-flex align-items-center mb-4">
                <Icon IconName="info" Class="alert-icon me-3" Width="24" Height="24" />
                <p class="mb-0">
                    Funds are ready to be claimed without penalty
                </p>
            </div>

            @if (totalInvested != null)
            {
                <div class="info-card">
                    <div class="d-flex flex-column flex-sm-row justify-content-between align-items-center gap-3">
                        <div class="claim-amount text-center text-md-start">
                            <h6 class="mb-1 text-muted">Total Available to Claim</h6>
                            <h4 class="mb-0">@Money.Satoshis(totalInvested.Value).ToUnit(MoneyUnit.BTC) @network.CoinTicker</h4>
                        </div>
                        <button class="btn btn-border-success btn-lg mt-2 mt-sm-0" @onclick="ClaimInvestorCoinsPasswordAsync" disabled="@claimCoinSpinner">
                            @if (claimCoinSpinner)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Processing Claim...</span>
                            }
                            else
                            {
                                <Icon IconName="coins" Class="me-2" Width="20" Height="20" />
                                <span>Claim Funds</span>
                            }
                        </button>
                    </div>
                </div>

            }
        }
    }
</div>

@if (showReleaseModal)
{
    <div class="modal-wrapper">
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content modern-modal">
                    <div class="modal-header border-0 pb-0">
                        <div class="d-flex align-items-center">
                            <Icon IconName="wallet" Height="32" Width="32" class="me-2" />
                            <h5 class="modal-title">Recovery Confirmation</h5>
                        </div>
                        <button class="btn-close-custom" @onclick="() => showReleaseModal = false" disabled="@prepareToReleaseCoinsConfirmSpinner">
                            <Icon IconName="close-circle" Height="24" Width="24" />
                        </button>
                    </div>

                    <div class="modal-body modal-body-scroll">
                        <div class="release-confirmation-container">
                            <div class="transaction-summary mb-4">
                                <div class="summary-header d-flex align-items-center mb-3">
                                    <Icon IconName="info-circle" Class="me-2" Width="24" Height="24" />
                                    <h6 class="mb-0">Transaction Summary</h6>
                                </div>

                                <div class="info-card fee-details p-3 rounded">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <span class="text-muted">Network Fee:</span>
                                        <span class="fee-amount fw-bold">
                                            @Money.Satoshis(releaseTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                        </span>
                                    </div>

                                    <div class="fee-adjustment">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <label for="feeRange" class="form-label mb-0">Transaction Speed</label>
                                            <span class="badge bg-primary">
                                                @feeData.SelectedFeeEstimation.FeeRate sats 
                                            </span>
                                        </div>

                                        <div class="range-container position-relative">
                                            <input type="range"
                                                   class="form-range"
                                                   id="feeRange"
                                                   @bind="feeData.FeePosition"
                                                   @oninput="ReleaseInvestorFeeRangeChanged"
                                                   min="@feeData.FeeMin"
                                                   max="@feeData.FeeMax">

                                            <div class="range-labels d-flex justify-content-between mt-2">
                                                <small class="text-muted">Slower</small>
                                                <small class="text-muted">
                                                    ~@feeData.SelectedFeeEstimation.Confirmations blocks
                                                </small>
                                                <small class="text-muted">Faster</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="confirmation-message alert alert-warning">
                                <div class="d-flex align-items-center">
                                    <Icon IconName="exclamation-triangle" Class="me-2" Width="20" Height="20" />
                                    <div>
                                        <h6 class="alert-heading mb-1">Confirmation Required</h6>
                                        <p class="mb-0 small">
                                            You are about to claim back your investment without any penalty.
                                            This action cannot be undone.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-border-warning" @onclick="() => showReleaseModal = false" disabled="@prepareToReleaseCoinsConfirmSpinner">Cancel</button>
                        <button type="button" class="btn btn-border-success" @onclick="ReleaseInvestorCoins" disabled="@prepareToReleaseCoinsConfirmSpinner">
                            @if (prepareToReleaseCoinsConfirmSpinner)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Confirming...</span>
                            }
                            else
                            {
                                <span>Confirm</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string ProjectIdentifier { get; set; }

    public InvestorProject InvestorProject { get; set; }

    public SignatureInfo? InvestorReleaseSigInfo;

    private FeeData feeData = new();

    bool prepareToReleaseCoinsConfirmSpinner = false;
    private Transaction? unsignedReleaseTransaction;
    private TransactionInfo? releaseTransaction;

    ProjectStats? projectStats;

    private bool showReleaseModal = false;
    private bool claimCoinSpinner = false;
    private bool refreshSpinner = false;

    private long? totalInvested = null;
    string signedTransactionHex;
    string explorerLink;

    protected override async Task OnInitializedAsync()
    {
        if (hasWallet)
        {
            InvestorProject = Storage.GetInvestmentProjects().FirstOrDefault(_ => _.ProjectInfo.ProjectIdentifier == ProjectIdentifier);

            if (InvestorProject is null)
            {
                throw new ArgumentException("The project is not founder or investor");
            }

            if (InvestorProject.UnfundedReleaseTransactionId != null)
            {
                explorerLink = _networkConfiguration.GetExplorerUrl().Url + $"/transaction/{InvestorProject.UnfundedReleaseTransactionId}";
            }

            signedTransactionHex = InvestorProject.SignedTransactionHex;

            if (signedTransactionHex is null)
            {
                signedTransactionHex = await _IndexerService.GetTransactionHexByIdAsync(InvestorProject.TransactionId);
            }

            var investmentTransaction = _networkConfiguration.GetNetwork().CreateTransaction(signedTransactionHex);
            totalInvested = investmentTransaction.Outputs.Skip(2).Take(InvestorProject.ProjectInfo.Stages.Count).Sum(_ => _.Value);

            projectStats = await _IndexerService.GetProjectStatsAsync(ProjectIdentifier);

            Logger.LogInformation($"Fetching project stats  stats AmountInvested = {projectStats?.AmountInvested} InvestorCount = {projectStats?.InvestorCount}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (hasWallet)
            {
                await FetchInvestorCheckPassword();
            }
        }
    }

    protected async Task FetchInvestorCheckPassword()
    {
        if (passwordComponent.HasPassword())
        {
            await FetchInvestorReleaseSignatures();
        }
        else
        {
            passwordComponent.ShowPassword(FetchInvestorReleaseSignatures);
        }
    }

    protected async Task FetchInvestorReleaseSignatures()
    {
        if (!passwordComponent.HasPassword())
        {
            notificationComponent.ShowErrorMessage("no wallet password");
            return;
        }

        refreshSpinner = true;
        StateHasChanged();

        var words = await passwordComponent.GetWalletAsync();
        var nostrPrivateKey = DerivationOperations.DeriveProjectNostrInvestorPrivateKey(words, InvestorProject.ProjectInfo.ProjectIdentifier);
        var nostrPrivateKeyHex = Encoders.Hex.EncodeData(nostrPrivateKey.ToBytes());

        SignService.LookupReleaseSigs(
            InvestorProject.InvestorNPub,
            InvestorProject.ProjectInfo.NostrPubKey,
            null,
            InvestorProject.SignaturesInfo.SignatureRequestEventId,
            signatureContent =>
            {
                Logger.LogInformation($"LookupReleaseSigs received a message {signatureContent}");

                if (InvestorReleaseSigInfo == null)
                {
                    Logger.LogInformation($"InvestorReleaseSigInfo is null");

                    // if we already decrypted the message from another relay just ignore it

                    InvokeAsync(async () =>
                    {
                        Logger.LogInformation($"decrypting");

                        var signatureJson = await encryption.DecryptNostrContentAsync(
                            nostrPrivateKeyHex, InvestorProject.ProjectInfo.NostrPubKey, signatureContent);

                        Logger.LogInformation("signature : " + signatureJson);

                        InvestorReleaseSigInfo = serializer.Deserialize<SignatureInfo>(signatureJson);

                        if (InvestorReleaseSigInfo?.SignatureType != SignatureInfoType.Release)
                        {
                            notificationComponent.ShowErrorMessage("Incorrect signature types received");
                            Logger.LogError("Incorrect signature types received");
                            InvestorReleaseSigInfo = null;
                        }

                        StateHasChanged();

                    });
                }
            }, () =>
            {
                refreshSpinner = false;
                StateHasChanged();
            });
    }

    private async Task ClaimInvestorCoinsPasswordAsync()
    {
        if (passwordComponent.HasPassword())
        {
            await PrepareToReleaseInvestorCoinsAsync();
        }
        else
        {
            passwordComponent.ShowPassword(async () =>
            {
                await PrepareToReleaseInvestorCoinsAsync();
            });
        }
    }

    private async Task PrepareToReleaseInvestorCoinsAsync()
    {
        claimCoinSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            var accountInfo = Storage.GetAccountInfo(network.Name);
            var words = await passwordComponent.GetWalletAsync();

            var investorPrivateKey = DerivationOperations.DeriveInvestorPrivateKey(words, InvestorProject.ProjectInfo.FounderKey);

            if (signedTransactionHex is null)
            {
                if (InvestorProject.SignedTransactionHex != null)
                {
                    signedTransactionHex = InvestorProject.SignedTransactionHex;
                }
                else
                {
                    signedTransactionHex = await _IndexerService.GetTransactionHexByIdAsync(InvestorProject.TransactionId);
                }
            }

            var investmentTransaction = _networkConfiguration.GetNetwork().CreateTransaction(signedTransactionHex);

            // Sign the release transaction
            unsignedReleaseTransaction = InvestorTransactionActions.AddSignaturesToUnfundedReleaseFundsTransaction(InvestorProject.ProjectInfo, investmentTransaction, InvestorReleaseSigInfo, Encoders.Hex.EncodeData(investorPrivateKey.ToBytes()), InvestorProject.UnfundedReleaseAddress);

            // Validate the signatures
            var sigCheckResult = InvestorTransactionActions.CheckInvestorUnfundedReleaseSignatures(InvestorProject.ProjectInfo, investmentTransaction, InvestorReleaseSigInfo, InvestorProject.UnfundedReleaseAddress);

            if (!sigCheckResult)
                throw new Exception("Failed to validate signatures");

            // add fee to the recovery trx
            releaseTransaction = _WalletOperations.AddFeeAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedReleaseTransaction, words, accountInfo, feeData.SelectedFeeEstimation.FeeRate);

            explorerLink = _networkConfiguration.GetExplorerUrl().Url + $"/transaction/{InvestorProject.UnfundedReleaseTransactionId}";

            Logger.LogInformation($"recoveryTransaction={releaseTransaction.Transaction.GetHash().ToString()}");

            showReleaseModal = true;
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            claimCoinSpinner = false;
        }
    }

    private async Task ReleaseInvestorFeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showReleaseModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();

                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = Storage.GetAccountInfo(network.Name);

                    releaseTransaction = _WalletOperations.AddFeeAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedReleaseTransaction, words, accountInfo, feeData.SelectedFeeEstimation.FeeRate);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task ReleaseInvestorCoins()
    {
        prepareToReleaseCoinsConfirmSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            showReleaseModal = false;

            Storage.UpdateInvestmentProject(InvestorProject);

            var response = await _WalletOperations.PublishTransactionAsync(network, releaseTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            InvestorProject.UnfundedReleaseTransactionId = releaseTransaction.Transaction.GetHash().ToString();

            Storage.UpdateInvestmentProject(InvestorProject);

            _walletUIService.AddTransactionToPending(releaseTransaction.Transaction);

            notificationComponent.ShowNotificationMessage("Done", 1);
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            prepareToReleaseCoinsConfirmSpinner = false;
            passwordComponent.ClearPassword();
        }

        StateHasChanged();
    }
}