@page "/notifications"
@using Angor.Client.Models
@using Angor.Client.Services
@inject NavMenuState NavMenuState
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService
@implements IDisposable

<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="notifications" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Notifications</h5>
            </div>
            <div class="header-actions">
                <button class="btn btn-border-success"
                        @onclick="RefreshNotifications"
                        disabled="@refreshSpinner"
                        title="Refresh">
                    @if (refreshSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <Icon IconName="refresh" Height="24" Width="24" />
                        <span class="button-text ms-2">Refresh</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="row mt-0 g-4">
    <!-- Categories sidebar -->
    <div class="col-lg-4 col-12 mb-3 mb-lg-0">
        <div class="card card-body">
            <!-- Category list -->
            <div class="mb-3">
                @foreach (var category in categories)
                {
                    <div class="d-flex align-items-center p-2 rounded mb-2 @(currentCategory == category.Key ? "active-category" : "")" 
                         style="cursor: pointer"
                         @onclick="() => FilterNotifications(category.Key)">
                        <div class="rounded-circle @category.Value.Color p-2 d-flex align-items-center justify-content-center" 
                             style="width: 36px; height: 36px;">
                            <Icon IconName="@category.Value.Icon" Width="18" Height="18" Class="text-white" />
                        </div>
                        <div class="ms-3 flex-grow-1">@category.Value.Name</div>
                        <span class="badge @category.Value.Badge rounded-pill">
                            @GetNotificationCount(category.Key)
                        </span>
                    </div>
                }
            </div>
            
            <!-- Settings -->
            <hr />
            <div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="showReadNotifications" @bind="showReadNotifications" />
                    <label class="form-check-label" for="showReadNotifications">Show read notifications</label>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Notifications list -->
    <div class="col-lg-8 col-12">
        <div class="card card-body">
            <!-- Header with actions -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h6 class="mb-0">@GetCategoryTitle()</h6>
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-border" @onclick="MarkAllAsReadAsync" disabled="@(!displayedNotifications.Any(n => !n.IsRead))">
                        <Icon IconName="check-all" Width="16" Height="16" Class="me-1" />
                        <span>Mark all read</span>
                    </button>
                    <button class="btn btn-sm btn-border-warning ms-2" @onclick="ClearNotificationsAsync" disabled="@(!displayedNotifications.Any())">
                        <Icon IconName="trash" Width="16" Height="16" Class="me-1" />
                        <span>Clear</span>
                    </button>
                </div>
            </div>
            
            <!-- Content -->
            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-4">
                    <div class="loader"></div>
                </div>
            }
            else if (!displayedNotifications.Any())
            {
                <div class="text-center my-4">
                    <Icon IconName="notifications-off" Width="42" Height="42" Class="text-muted mb-2" />
                    <p>No @(currentCategory != "all" ? currentCategory : "") notifications</p>
                </div>
            }
            else
            {
                <div class="list-group list-group-flush p-0">
                    @foreach (var notification in displayedNotifications)
                    {
                        <div class="list-group-item p-3 @(!notification.IsRead ? "unread-notification" : "")" 
                             style="cursor: pointer"
                             @onclick="() => HandleNotificationClickAsync(notification)">
                            <div class="row g-0">
                                <!-- Icon -->
                                <div class="col-auto">
                                    <div class="rounded-circle @GetNotificationIconClass(notification.Type) p-2 d-flex align-items-center justify-content-center" 
                                         style="width: 42px; height: 42px;">
                                        <Icon IconName="@GetNotificationIcon(notification.Type)" Width="20" Height="20" Class="text-white" />
                                    </div>
                                </div>
                                
                                <!-- Content -->
                                <div class="col ps-3">
                                    <div class="d-flex justify-content-between">
                                        <h6 class="mb-1">@notification.Title</h6>
                                        <small class="text-muted">@FormatTime(notification.Timestamp)</small>
                                    </div>
                                    <p class="mb-1 small">@notification.Message</p>
                                    @if (!string.IsNullOrEmpty(notification.ProjectId))
                                    {
                                        <span class="badge project-badge small">@notification.ProjectId</span>
                                    }
                                </div>
                                
                                <!-- Actions -->
                                <div class="col-auto align-self-center">
                                    <button class="btn btn-sm" 
                                            title="@(notification.IsRead ? "Mark as unread" : "Mark as read")"
                                            @onclick:stopPropagation="true"
                                            @onclick="() => ToggleReadStatusAsync(notification)">
                                        <Icon IconName="@(notification.IsRead ? "mark-unread" : "check")" Width="16" Height="16" />
                                    </button>
                                    <button class="btn btn-sm" 
                                            title="Delete"
                                            @onclick:stopPropagation="true"
                                            @onclick="() => RemoveNotificationAsync(notification)">
                                        <Icon IconName="trash" Width="16" Height="16" />
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <!-- Simple pagination -->
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-content-center mt-3">
                        <div class="btn-group">
                            <button class="btn btn-sm btn-border" @onclick="() => ChangePage(currentPage - 1)" 
                                    disabled="@(currentPage == 1)">
                                <Icon IconName="chevron-left" Width="14" Height="14" />
                            </button>
                            <span class="btn btn-sm disabled">
                                Page @currentPage of @totalPages
                            </span>
                            <button class="btn btn-sm btn-border" @onclick="() => ChangePage(currentPage + 1)" 
                                    disabled="@(currentPage == totalPages)">
                                <Icon IconName="chevron-right" Width="14" Height="14" />
                            </button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    // Category definition
    private class CategoryInfo
    {
        public string Name { get; set; }
        public string Icon { get; set; }
        public string Color { get; set; }
        public string Badge { get; set; }
    }

    // Category definitions
    private Dictionary<string, CategoryInfo> categories = new Dictionary<string, CategoryInfo>
    {
        { "all", new CategoryInfo { Name = "All Notifications", Icon = "notifications", Color = "bg-primary", Badge = "bg-primary" } },
        { "investments", new CategoryInfo { Name = "Investments", Icon = "portfolio", Color = "bg-success", Badge = "bg-success" } },
        { "projects", new CategoryInfo { Name = "Projects", Icon = "founder", Color = "bg-primary", Badge = "bg-info" } },
        { "messages", new CategoryInfo { Name = "Messages", Icon = "chat", Color = "bg-info", Badge = "bg-warning" } },
        { "system", new CategoryInfo { Name = "System", Icon = "info", Color = "bg-warning", Badge = "bg-secondary" } }
    };

    // UI state
    private bool refreshSpinner = false;
    private bool isLoading = true;
    private string currentCategory = "all";
    private bool showReadNotifications = false;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    // Notification collections
    private List<NotificationItem> allNotifications = new List<NotificationItem>();
    private List<NotificationItem> displayedNotifications = new List<NotificationItem>();
    private List<NotificationItem> investmentNotifications = new List<NotificationItem>();
    private List<NotificationItem> projectNotifications = new List<NotificationItem>();
    private List<NotificationItem> messageNotifications = new List<NotificationItem>();
    private List<NotificationItem> systemNotifications = new List<NotificationItem>();

    protected override async Task OnInitializedAsync()
    {
        // Set active menu
        NavMenuState.SetActivePage("notifications");

        // Subscribe to notification changes
        NotificationService.OnNotificationsChanged += HandleNotificationsChanged;

        // Load notifications
        await LoadNotifications();
    }

    public void Dispose()
    {
        NotificationService.OnNotificationsChanged -= HandleNotificationsChanged;
    }

    private void HandleNotificationsChanged()
    {
        InvokeAsync(LoadNotifications);
    }

    private async Task LoadNotifications()
    {
        isLoading = true;
        StateHasChanged();

        // Get notifications from service
        allNotifications = NotificationService.GetAllNotifications().ToList();
        
        // Categorize notifications
        CategorizeNotifications();
        
        // Apply initial filter
        FilterNotifications(currentCategory);
        
        isLoading = false;
        StateHasChanged();
    }

    // Helper to get notification count by category
    private int GetNotificationCount(string category)
    {
        return category switch
        {
            "investments" => investmentNotifications.Count,
            "projects" => projectNotifications.Count,
            "messages" => messageNotifications.Count,
            "system" => systemNotifications.Count,
            _ => allNotifications.Count
        };
    }
    
    // Utility and event handler methods
    private void CategorizeNotifications()
    {
        investmentNotifications = allNotifications.Where(n => n.Type == "investments").ToList();
        projectNotifications = allNotifications.Where(n => n.Type == "projects").ToList();
        messageNotifications = allNotifications.Where(n => n.Type == "messages").ToList();
        systemNotifications = allNotifications.Where(n => n.Type == "system").ToList();
    }

    private void FilterNotifications(string category)
    {
        currentCategory = category;
        currentPage = 1;
        
        var filteredList = category switch
        {
            "investments" => investmentNotifications,
            "projects" => projectNotifications,
            "messages" => messageNotifications,
            "system" => systemNotifications,
            _ => allNotifications
        };
        
        // Apply read/unread filter
        if (!showReadNotifications)
        {
            filteredList = filteredList.Where(n => !n.IsRead).ToList();
        }
        
        // Apply pagination
        totalPages = (int)Math.Ceiling(filteredList.Count / (double)pageSize);
        if (totalPages < 1) totalPages = 1;
        
        displayedNotifications = filteredList
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
            
        StateHasChanged();
    }

    private void ChangePage(int page)
    {
        if (page < 1 || page > totalPages)
            return;
            
        currentPage = page;
        
        var filteredList = currentCategory switch
        {
            "investments" => investmentNotifications,
            "projects" => projectNotifications,
            "messages" => messageNotifications,
            "system" => systemNotifications,
            _ => allNotifications
        };
        
        if (!showReadNotifications)
        {
            filteredList = filteredList.Where(n => !n.IsRead).ToList();
        }
        
        displayedNotifications = filteredList
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
            
        StateHasChanged();
    }

    private async Task RefreshNotifications()
    {
        refreshSpinner = true;
        StateHasChanged();
        
        await LoadNotifications();
        
        refreshSpinner = false;
        StateHasChanged();
    }

    private async Task ToggleReadStatusAsync(NotificationItem notification)
    {
        if (notification.IsRead)
        {
            notification.IsRead = false;
            // Note: The service doesn't have a method to mark as unread, so we'll handle it locally
            CategorizeNotifications();
            FilterNotifications(currentCategory);
        }
        else
        {
            await NotificationService.MarkNotificationAsReadAsync(notification.Id);
        }
    }

    private async Task RemoveNotificationAsync(NotificationItem notification)
    {
        await NotificationService.RemoveNotificationAsync(notification.Id);
    }

    private async Task MarkAllAsReadAsync()
    {
        await NotificationService.MarkAllNotificationsAsReadAsync();
    }

    private async Task ClearNotificationsAsync()
    {
        await NotificationService.ClearNotificationsAsync();
    }

    private async Task HandleNotificationClickAsync(NotificationItem notification)
    {
        // Mark as read when clicked
        if (!notification.IsRead)
        {
            await NotificationService.MarkNotificationAsReadAsync(notification.Id);
        }
        
        // Handle navigation based on notification type
        switch (notification.Type)
        {
            case "investments":
                if (!string.IsNullOrEmpty(notification.ProjectId))
                    NavigationManager.NavigateTo($"/invest/{notification.ProjectId}");
                break;
            case "projects":
                if (!string.IsNullOrEmpty(notification.ProjectId))
                    NavigationManager.NavigateTo($"/founder/{notification.ProjectId}");
                break;
            case "messages":
                if (!string.IsNullOrEmpty(notification.ProjectId))
                    NavigationManager.NavigateTo($"/messages/{notification.ProjectId}");
                break;
            case "system":
                // Handle system notification clicks
                break;
        }
    }

    private string GetNotificationIcon(string type)
    {
        return type switch
        {
            "investments" => "portfolio",
            "projects" => "founder",
            "messages" => "message",
            "system" => "info",
            _ => "notifications"
        };
    }
    
    private string GetNotificationIconClass(string type)
    {
        return type switch
        {
            "investments" => "bg-success",
            "projects" => "bg-primary",
            "messages" => "bg-info",
            "system" => "bg-warning",
            _ => "bg-secondary"
        };
    }
    
    private string GetCategoryTitle()
    {
        return currentCategory switch
        {
            "investments" => "Investment Notifications",
            "projects" => "Project Notifications",
            "messages" => "Message Notifications",
            "system" => "System Notifications",
            _ => "All Notifications"
        };
    }

    private string FormatTime(DateTime timestamp)
    {
        var now = DateTime.UtcNow;
        var diff = now - timestamp;
        
        if (diff.TotalMinutes < 1)
            return "Just now";
        if (diff.TotalMinutes < 60)
            return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalHours < 24)
            return $"{(int)diff.TotalHours}h ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d ago";
            
        return timestamp.ToString("MMM dd, yyyy");
    }
}

