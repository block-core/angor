@page "/wallet"
@using Blockcore.NBitcoin
@using Angor.Shared
@using Angor.Client.Services
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Client.Components
@using Blockcore.Networks

@inject HttpClient HttpClient;
@inject IClientStorage Storage;
@inject ICacheStorage CacheStorage;
@inject IWalletStorage WalletStorage;
@inject ILogger<Wallet> Logger;
@inject IWalletOperations WalletOperations
@inject IClipboardService ClipboardService
@inject IDerivationOperations DerivationOperations
@inject NavMenuState NavMenuState

@inherits BaseComponent

<PageTitle>Wallet and balances</PageTitle>

<div class="container my-4">
    <h1>Wallet and balances</h1>
    
    <NotificationComponent @ref="NotificationComponent" />

<!-- This part of the page is visible only if the wallet is found -->
    @if (!HasWallet)
    {
        <!-- No Wallet found -->
        <div class="row mt-4">
            <div class="col">
                <div class="alert alert-info" role="alert">No Wallet Found</div>
                <!-- Adding a button to create a wallet -->
                <button class="btn btn-primary mt-2" @onclick="ShowCreateWalletModal">Create Wallet</button>

            </div>

            @if (_walletWordsCreateModal)
            {
                <!-- Wallet Words Create Modal -->
                <div class="modal fade show d-block" >
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" >Create Wallet</h5>
                                <button class="btn-close" @onclick="() => { WalletWordsClose(); _walletWordsCreateModal = false; }" disabled="@_createWalletSpinner"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">

                                @if (_createWalletSpinner)
                                {
                                    <div class="d-flex justify-content-center">
                                        <div class="loader"></div>
                                    </div>
                                }
                                else
                                {
                                    <div class="mb-3">
                                        <label >Paste your wallet words here or generate a new wallet:</label>
                                        <textarea class="form-control"  rows="3" @bind="_newWalletWords"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label >Additional Passphrase (optional):</label>
                                        <input type="text" class="form-control" @bind="_newWalletWordsPassphrase"/>
                                    </div>
                                    <div class="mb-3">
                                        <button class="btn btn-primary" @onclick="GenerateNewWalletWords">Generate New Wallet Words</button>
                                    </div>
                                    <div class="mb-3">
                                        <button class="btn btn-success" @onclick="CreateWalletAsync">Create Wallet</button>
                                    </div>
                                }
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="() => { WalletWordsClose(); _walletWordsCreateModal = false; }" disabled="@_createWalletSpinner">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Section 1 -->
        <div class="row mt-4">
            <div class="col">

                <div class="mb-3">
                    <span class="fs-4">Confirmed balance: </span>
                    <span class="fs-3"><strong> @Money.Satoshis(_accountBalanceInfo.TotalBalance).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</strong></span> <!-- replace this with actual balance -->
                </div>

                @if (_accountBalanceInfo.TotalUnconfirmedBalance > 0)
                {
                    <div class="mb-3 text-dark">
                        <span class="fs-6">Unconfirmed balance: </span>
                        <span class="fs-5"> @Money.Satoshis(_accountBalanceInfo.TotalUnconfirmedBalance).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</span> <!-- replace this with actual unconfirmed balance -->
                    </div>
                }
                
                @if (_accountBalanceInfo.TotalBalanceReserved > 0)
                {
                    <div class="mb-3 text-success">
                        <span class="fs-6">Reserved balance: </span>
                        <span class="fs-5"> @Money.Satoshis(_accountBalanceInfo.TotalBalanceReserved).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</span> 
                    </div>
                }

                <!-- Replace '#' in 'data-bs-target' with the id of your modal -->
                <button type="button" class="btn btn-primary" @onclick="() => _walletWordsModal = true">
                    <span>Show Wallet Words</span>
                </button>

                <button type="button" class="btn btn-primary me-1" @onclick="RefreshBalance" disabled="@_balanceSpinner">
                    @if (_balanceSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Refreshing Balance...</span>
                    }
                    else
                    {
                        <span>Refresh Balance</span>
                    }
                </button>
                
                @if (Network.NetworkType == NetworkType.Testnet && _accountBalanceInfo.TotalBalance < Money.Coins(10).Satoshi)
                {
                    <button type="button" class="btn btn-secondary me-1" @onclick="GetTestCoins" disabled="@_testCoinsSpinner">
                        @if (_testCoinsSpinner)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Get some test coins...</span>
                        }
                        else
                        {
                            <span>Get some test coins</span>
                        }
                    </button>
                }
                
            </div>
            
            @if (_walletWordsModal)
            {
                <!-- Wallet Words Modal -->
                <div class="modal fade show d-block" >
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" >Wallet Words</h5>
                                <button type="button" class="btn-close" @onclick="() => { WalletWordsClose(); _walletWordsModal = false; }" aria-label="Close"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">

                                @if (string.IsNullOrEmpty(_walletWords))
                                {
                                    <!-- Show words button with warning -->
                                    <div class="mb-3">
                                        <button class="btn btn-warning" @onclick="ShowWords">Show Words</button>
                                        <p class="fs-6 text-danger">Warning: These words can be used to recover your wallet. Keep them safe.</p>
                                    </div>
                                }
                                else
                                {
                                    <!-- Wallet words will be shown here -->
                                    <p>@_walletWords</p>

                                    if (!string.IsNullOrEmpty(_walletWordsPassphrase))
                                    {
                                        <p>This wallet has a pass phrase!</p>
                                    }

                                    <!-- Copy words to clipboard -->
                                    <div class="mb-3">
                                        <button class="btn btn-danger" @onclick="CopyWordsToClibboard">Copy To clipboard</button>
                                        <p class="fs-6 text-danger">Warning: These words can be used to recover your wallet. Keep them safe.</p>
                                    </div>
                                }

                                <!-- Delete wallet button -->
                                <div class="mb-3">
                                    <button class="btn btn-danger" @onclick="DeleteWallet" >Delete Wallet</button>
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="() => { WalletWordsClose(); _walletWordsModal = false; }" >Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>


        <!-- Section 2 -->
        <div class="row mt-4">
            <div class="col-lg-12">
                <h2>Receive</h2>

                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-12 d-flex align-items-center justify-content-between">
                                <div class="address-container-wrapper">
                                    <div class="address-container">
                                        <div class="d-flex align-items-center">
                                            <p class="card-text mb-0">@_accountBalanceInfo.AccountInfo.GetNextReceiveAddress()</p>
                                            <button class="btn btn-outline-secondary btn-sm address-copy-button ml-2" @onclick="CopyNextReceiveAddress">
                                                Copy <i class="oi oi-file"></i> 
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <ShowQrCode @ref="_showQrCode" Data="@_accountBalanceInfo.AccountInfo.GetNextReceiveAddress()" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <!-- Section 3 -->
        <div class="row mt-4">
            <div class="col-md-12">
                <h2 class="mb-3">Send</h2>

                <form>
                    <div class="mb-3">
                        <label for="sendToAddress" class="form-label">Send to Address</label>
                        <input type="text" class="form-control" id="sendToAddress" @bind="_sendInfo.SendToAddress" placeholder="Enter address">
                    </div>

                    <div class="mb-3">
                        <label for="sendAmount" class="form-label">Amount</label>
                        <input type="text" class="form-control" id="sendAmount" @bind="_sendInfo.SendAmount" placeholder="Enter amount">
                    </div>

                    <button type="button" class="btn btn-primary mb-3"  @onclick="() => _coinControlModal = true">Coin Control
                        @if (_sendInfo.SendUtxos.Any())
                        {
                            <span class="badge text-bg-warning">@_sendInfo.SendUtxos.Count</span>
                        }
                    </button>
                    
                    <!-- New Send button that triggers a confirmation dialog -->
                    <button type="button" class="btn btn-primary mb-3" @onclick="BuildSend" disabled="@_sendLoadSpinner">
                        @if (_sendLoadSpinner)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Sending...</span>
                        }
                        else
                        {
                            <span>Send</span>
                        }
                    </button>

                </form>
            </div>

            @if (_coinControlModal)
            {
                <!-- Coin Control Modal -->
                <div class="modal fade show d-block" >
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="coinControlModalLabel">Coin Control</h5>
                                <button type="button" class="btn-close" @onclick="() => _coinControlModal = false" aria-label="Close"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">
                                <!-- The tick boxes and amounts will go here -->

                                <p>Total amount selected = @Money.Satoshis(_sendInfo.SendUtxos.Sum(s => s.Value.UtxoData.Value)).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</p>

                                @foreach (var addressInfo in _accountBalanceInfo.AccountInfo.AddressesInfo.Union(_accountBalanceInfo.AccountInfo.ChangeAddressesInfo))
                                {
                                    @foreach (var addressUtxoItem in addressInfo.UtxoData)
                                    {
                                        bool isTicked = _sendInfo.SendUtxos.ContainsKey(addressUtxoItem.Outpoint.ToString());

                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" @bind="@isTicked" @onclick="() => HandleCheckboxChange(addressUtxoItem, addressInfo.HdPath)">
                                            <label class="form-check-label" style="font-size: 0.7em;" for="@addressUtxoItem">
                                                @($"{addressUtxoItem.Outpoint} - {Money.Satoshis(@addressUtxoItem.Value).ToUnit(MoneyUnit.BTC)} {Network.CoinTicker}")
                                            </label>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="() => _coinControlModal = false">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (_sendConfirmModal)
            {
                <!-- Send Confirmation Modal -->
                <div class="modal fade show d-block" >
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirmation</h5>
                                <button type="button" class="btn-close" aria-label="Close" @onclick="() => _sendConfirmModal = false" disabled="@_sendConfirmSpinner"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">
                                Are you sure you want to send <strong>@_sendInfo.SendAmount @Network.CoinTicker</strong> to <strong> @_sendInfo.SendToAddress?</strong>

                                <br/>

                               The fee for this transaction will be <strong>@_sendInfo.SendFee</strong>

                                <hr>

                                <div class="mb-3">
                                    <label for="feeRange" class="form-label">Feerate for @_sendInfo.FeeBlockCount blocks is @_sendInfo.FeeRate sats</label>
                                    <input type="range" class="form-range" id="feeRange" @bind="_feePosition" @oninput="FeeRangeChanged" min="@_feeMin" max="@_feeMax">
                                </div>

                                <hr>

                                The change address is <strong>@_sendInfo.ChangeAddress</strong>

                                <br/>

                                The selected inputs:

                                @foreach (var infoSendUtxo in _sendInfo.SendUtxos)
                                {
                                    <p style="font-size: 0.7em;">@Money.Satoshis(infoSendUtxo.Value.UtxoData.Value).ToUnit(MoneyUnit.BTC) @Network.CoinTicker - @infoSendUtxo.Key</p>
                                }

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="() => _sendConfirmModal = false" disabled="@_sendConfirmSpinner">Cancel</button>
                                <button type="button" class="btn btn-primary" @onclick="SendCoins" disabled="@_sendConfirmSpinner">
                                    @if (_sendConfirmSpinner)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span>Sending...</span>
                                    }
                                    else
                                    {
                                        <span>Confirm</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

       


        <!-- Section 4 -->
        <div class="row mt-4">
            <div class="col-md-12">
                <h2 class="mb-3">Addresses and Amounts</h2>

                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Address</th>
                            <th scope="col">Amount</th>
                            <th scope="col">Path</th>
                            <th scope="col">UTXO count</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var addressInfo in _accountBalanceInfo.AccountInfo.AllAddresses())
                        {
                            var total = addressInfo.Balance;
                            var count = addressInfo.UtxoData.Count();

                            if (total > 0)
                            {
                                <tr data-bs-toggle="collapse" class="clickable-row" data-bs-target="#@addressInfo.Address" aria-expanded="false" aria-controls="collapseExample1">
                                    <td>@addressInfo.Address</td>
                                    <td>@Money.Satoshis(total).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</td>
                                    <td>@addressInfo.HdPath</td>
                                    <td>@count</td>
                                </tr>
                                <tr>
                                    <td colspan="4" style="padding: 0px;">
                                            <div class="collapse" id="@addressInfo.Address">
                                            <div class="card card-body">
                                                <!-- Inner table goes here -->
                                                <table class="table table-sm">
                                                    <thead>
                                                        <tr>
                                                            <th scope="col">Coin</th>
                                                            <th scope="col">Amount</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                    @foreach (var addressUtxoItem in addressInfo.UtxoData)
                                                    {
                                                        <tr>
                                                            <td>@($"{addressUtxoItem.Outpoint}")</td>
                                                                <td>@Money.Satoshis(addressUtxoItem.Value).ToUnit(MoneyUnit.BTC) @Network.CoinTicker </td>
                                                        </tr>
                                                    }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    <!-- More rows go here -->
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>



@code {
    
    private bool _balanceSpinner = false;
    private bool _createWalletSpinner = false;
    private bool _testCoinsSpinner = false;
    private bool _sendLoadSpinner = false;
    private bool _sendConfirmSpinner = false;

    private string? _walletWords;
    private string? _walletWordsPassphrase;
    private string? _newWalletWords;
    private string? _newWalletWordsPassphrase;
   
    private bool _sendConfirmModal;
    private bool _coinControlModal;
    private bool _walletWordsModal;
    private bool _walletWordsCreateModal;

    private int _feeRange = 0;
    private int _feePosition = 1;
    private SendInfo _sendInfo = new ();

    private AccountBalanceInfo _accountBalanceInfo = new AccountBalanceInfo();

    private FeeEstimations _feeEstimations = new ();

    // Max index for the range input
    private int _feeMin = 1;
    private int _feeMax = 3;
    DateTime _lastFeeRefresh = DateTime.MinValue;

    ShowQrCode _showQrCode;

    protected override Task OnInitializedAsync()
    {
        if (HasWallet)
        {
            var accountInfo = Storage.GetAccountInfo(Network.Name);
            var unconfirmedInfo = CacheStorage.GetUnconfirmedInboundFunds();

            _accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);
        }

        return Task.CompletedTask;
    }
    
    private async Task RefreshBalance()
    {
        _balanceSpinner = true;

        try
        {
            var accountInfo = Storage.GetAccountInfo(Network.Name);
            var unconfirmedInboundFunds = CacheStorage.GetUnconfirmedInboundFunds();

            await WalletOperations.UpdateDataForExistingAddressesAsync(accountInfo);

            await WalletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

            Storage.SetAccountInfo(Network.Name, accountInfo);

            var utxos = accountInfo.AllUtxos()
                .Select(x => x.Outpoint.ToString()).ToList();

            var spentToUpdate = unconfirmedInboundFunds
                .RemoveAll(x => utxos.Contains(x.Outpoint.ToString()));

            if (spentToUpdate > 0)
                CacheStorage.SetUnconfirmedInboundFunds(unconfirmedInboundFunds);

            _accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInboundFunds);

            _showQrCode.SetQrCode(_accountBalanceInfo.AccountInfo.GetNextReceiveAddress());

        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _balanceSpinner = false;
        }
    }

    private async Task ShowCreateWalletModal()
    {
        _walletWordsCreateModal = true;
        StateHasChanged();
        await Task.Delay(10);
    }

    private async Task CreateWalletAsync()
    {
        if (string.IsNullOrEmpty(_newWalletWords)) throw new ArgumentNullException();

        _createWalletSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {

            WalletWords data = new WalletWords { Words = _newWalletWords, Passphrase = _newWalletWordsPassphrase };
            var accountInfo = WalletOperations.BuildAccountInfoForWalletWords(data);
            await WalletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

            WalletStorage.SaveWalletWords(new Angor.Shared.Models.Wallet { WalletWords = data });
            Storage.SetAccountInfo(Network.Name, accountInfo);
            _accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, new List<UtxoData>());

            // pre-derive the angor wallet keys 
            FounderKeyCollection founderKeyCollection = DerivationOperations.DeriveProjectKeys(data, Client.NetworkConfiguration.AngorTestKey);
            WalletStorage.SetFounderKeys(founderKeyCollection);

            HasWallet = WalletStorage.HasWallet();
            ClearWalletWords();

            _walletWordsCreateModal = false;

            NavMenuState.NotifyStateChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _createWalletSpinner = false;
        }
    }

    private void ShowWords()
    {
        var data  = WalletStorage.GetWallet().WalletWords;
        _walletWords = data.Words;
        _walletWordsPassphrase = data.Passphrase;
        StateHasChanged();
    }

    private async Task CopyWordsToClibboard()
    {
        if (string.IsNullOrEmpty(_walletWords))
        {
            throw new InvalidOperationException();
        }

        await ClipboardService.WriteTextAsync(_walletWords);
        ClearWalletWords();
        StateHasChanged();
    }

    private void ClearWalletWords()
    {
        _walletWords = null;
        _walletWordsPassphrase = null;
        _newWalletWords = null;
        _newWalletWordsPassphrase = null;
    }

    private void WalletWordsClose()
    {
        _walletWords = null;
    }

    private void DeleteWallet()
    {
        _walletWordsModal = false;
        Storage.DeleteAccountInfo(Network.Name);
        CacheStorage.DeleteUnconfirmedInfo();
        WalletStorage.DeleteWallet();
        HasWallet = WalletStorage.HasWallet();
        ClearWalletWords();
        StateHasChanged();

        NavMenuState.NotifyStateChanged();
    }

    private void GenerateNewWalletWords()
    {
        _newWalletWords = WalletOperations.GenerateWalletWords();
    }

    public  async Task CopyNextReceiveAddress()
    {
        var accountInfo = Storage.GetAccountInfo(Network.Name);
        var address = accountInfo.GetNextReceiveAddress();

        if (string.IsNullOrEmpty(address))
        {
            NotificationComponent.ShowErrorMessage("New address was not created");
            return;
        }

        await ClipboardService.WriteTextAsync(address);
    }

    private async Task RefreshFee()
    {
        // refresh fee if last refresh was 60 seconds ago

        if (_sendInfo.FeeRateSat == 0 || _lastFeeRefresh.AddSeconds(60) < DateTime.UtcNow)
        {
            var fees = await WalletOperations.GetFeeEstimationAsync();

            _feeEstimations.Fees = fees.ToList();

            _feeMax = _feeEstimations.Fees.Count;

            var feeItem = _feeEstimations?.Fees.MinBy(c => c.Confirmations);

            if (feeItem != null)
            {
                _sendInfo.FeeBlockCount = feeItem.Confirmations;
                _sendInfo.FeeRateSat = feeItem.FeeRate;
            }

            _lastFeeRefresh = DateTime.UtcNow;
        }
    }
    
    private async Task BuildSend()
    {
        if (string.IsNullOrEmpty(_sendInfo.SendToAddress))
        {
            NotificationComponent.ShowErrorMessage("Specify a send to address");
            return;
        }

        if (_sendInfo.SendAmount == 0)
        {
            NotificationComponent.ShowErrorMessage("Specify an amount");
            return;
        }

        _sendLoadSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var accountInfo = Storage.GetAccountInfo(Network.Name);

            await WalletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

            Storage.SetAccountInfo(Network.Name, accountInfo);
            
            await RefreshFee();

            if (_feeEstimations.Fees.Count == 0)
            {
                NotificationComponent.ShowErrorMessage("Unable top calculate fee");
                return;
            }

            // by default select the highest fee
            var estimationsFee = _feeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[0];

            _feePosition = 1;

            _sendInfo.FeeBlockCount = estimationsFee.Confirmations;
            _sendInfo.FeeRateSat = estimationsFee.FeeRate;

            if (string.IsNullOrEmpty(_sendInfo.ChangeAddress))
            {
                _sendInfo.ChangeAddress = accountInfo.ChangeAddressesInfo.First(f => f.HasHistory == false).Address;
            }
            
            _sendInfo.SendFee = WalletOperations.CalculateTransactionFee(_sendInfo, accountInfo, estimationsFee.FeeRate);

            _sendConfirmModal = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _sendLoadSpinner = false;
        }
    }

    private async Task SendCoins()
    {
        _sendConfirmSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var wallet = WalletStorage.GetWallet();
            var accountInfo = Storage.GetAccountInfo(Network.Name);
            var unconfirmedInfo = CacheStorage.GetUnconfirmedInboundFunds();

            var res = await WalletOperations.SendAmountToAddress(wallet.WalletWords, _sendInfo);

            if (res.Success)
            {
                var pendingInbound = WalletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, res.Data);
                unconfirmedInfo.AddRange(pendingInbound);
                _accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);
                Storage.SetAccountInfo(Network.Name, accountInfo);
                CacheStorage.SetUnconfirmedInboundFunds(unconfirmedInfo);
            }

            _sendInfo = new SendInfo();
            
            NotificationComponent.ShowNotificationMessage("Sent complete!");
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _sendConfirmSpinner = false;
            _sendConfirmModal = false;
        }
    }

    private void HandleCheckboxChange(UtxoData addressUtxoItem, string hdPath)
    {
        // Here you can handle the change
        // Note: replace AddressUtxoItem with the actual type of addressUtxoItem
        
        if (_sendInfo.SendUtxos.ContainsKey(addressUtxoItem.Outpoint.ToString()))
        {
            _sendInfo.SendUtxos.Remove(addressUtxoItem.Outpoint.ToString());
        }
        else
        {
            _sendInfo.SendUtxos.Add(addressUtxoItem.Outpoint.ToString(), new UtxoDataWithPath { HdPath = hdPath, UtxoData = addressUtxoItem });
        }
    }

    private void FeeRangeChanged(ChangeEventArgs e)
    {
        // Here you can handle the fee range change
        // The new value is in e.Value

        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= _feeEstimations.Fees.Count)
                {
                    var estimationsFee = _feeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];
                   
                    _sendInfo.FeeBlockCount = estimationsFee.Confirmations;
                    _sendInfo.FeeRateSat = estimationsFee.FeeRate;
                    var accountInfo = Storage.GetAccountInfo(Network.Name);

                    _sendInfo.SendFee = WalletOperations.CalculateTransactionFee(_sendInfo, accountInfo, estimationsFee.FeeRate);
                    
                    StateHasChanged();
                }
            }
        }
    }

    private void ShowCoinControlModal()
    {
        _coinControlModal = true;
        StateHasChanged();
    }

    private async Task GetTestCoins()
    {
        if (Money.Satoshis(_accountBalanceInfo.TotalBalance + _accountBalanceInfo.TotalUnconfirmedBalance).ToUnit(MoneyUnit.BTC) > 10)
        {
            NotificationComponent.ShowNotificationMessage("you already have coins!");
            return;
        }

        _testCoinsSpinner = true;

        try
        {
            var receiveAddress = _accountBalanceInfo.AccountInfo.GetNextReceiveAddress();

            var res = await HttpClient.GetAsync($"/api/faucet/send/{receiveAddress}");

            if (res.IsSuccessStatusCode)
            {
                var trxhex =  await res.Content.ReadAsStringAsync();
                var trx = Network.CreateTransaction(trxhex);
                var unconfirmedInboundFunds = CacheStorage.GetUnconfirmedInboundFunds();
                unconfirmedInboundFunds.Add(new UtxoData { PendingSpent = true, Address = receiveAddress, Value = trx.Outputs.FirstOrDefault()?.Value.Satoshi ?? Money.Coins(50).Satoshi, Outpoint = new Outpoint(trx.GetHash().ToString(), 0) });
                CacheStorage.SetUnconfirmedInboundFunds(unconfirmedInboundFunds);
                _accountBalanceInfo.UpdateAccountBalanceInfo(_accountBalanceInfo.AccountInfo, unconfirmedInboundFunds);
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            NotificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            _testCoinsSpinner = false;
        }
    }
}