@page "/wallet"
@using Blockcore.NBitcoin
@using Angor.Shared
@using Angor.Client.Services
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Client.Components
@using Blockcore.Networks

@inject HttpClient _httpClient;
@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject IWalletStorage _walletStorage;
@inject ILogger<Wallet> Logger;
@inject IWalletOperations _walletOperations
@inject IClipboardService _clipboardService
@inject IDerivationOperations _derivationOperations
@inject NavMenuState NavMenuState
@inject IEncryptionService _encryptionService


@inherits BaseComponent

<PageTitle>Wallet and balances</PageTitle>
<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />
<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto">
                <span class="material-icons fs-1 opacity-10 btn-angor user-select-none">wallet</span>
                <div class="h-100 ms-3">
                    <h5 class="mb-1 font-weight-bolder">
                        Wallet
                    </h5>
                    <p class="mb-0 font-weight-normal text-sm">
                        Wallet and balances
                    </p>
                </div>
            </div>
            @if (hasWallet)
            {
                <div>
                    <button type="button" class="btn btn-primary mb-0" @onclick="() => walletWordsModal = true" data-cy="wallet-words">Wallet Words</button>
                </div>
            }

        </div>
    </div>
</div>

<!-- This part of the page is visible only if the wallet is found -->
@if (!hasWallet)
{

    <!-- No Wallet found -->
    <div class="row mt-4">
        <div class="card card-body">
            <div class="d-flex align-items-center">
                <span class="material-icons opacity-10 fs-1 me-3 btn-angor user-select-none">
                    info
                </span>
                <span class="text-warning">No Wallet Found</span>
            </div>
        </div>
    </div>
    <div class="row mt-4 d-flex justify-content-center text-center align-items-center">
        <div class="col-lg-3 col-sm-6 mt-lg-0 mt-4">
            <div class="card h-100">
                <div class="card-body d-flex flex-column justify-content-center text-center" @onclick="@(() => ShowCreateWalletModal("new"))" role="button">

                    <span class="material-icons opacity-10 btn-angor fs-1 mb-3" aria-hidden="true" data-cy="create-wallet">
                        wallet
                    </span>
                    <h5> Create Wallet </h5>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-sm-6 mt-lg-0 mt-4">
            <div class="card h-100">
                <div class="card-body d-flex flex-column justify-content-center text-center" @onclick="@(() => ShowCreateWalletModal("recover"))" role="button">
                    <span class="material-icons opacity-10 btn-angor fs-1 mb-3" aria-hidden="true">
                        history
                    </span>
                    <h5> Recover Wallet </h5>
                </div>
            </div>
        </div>
    </div>

    @if (walletWordsCreateModal)
    {
        <!-- Wallet Words Create Modal -->
        <div class="modal-wrapper">
            <div class="modal fade show d-block">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@createWalletTitle</h5>
                            <button class="btn-close" @onclick="() => { WalletWordsClose(); walletWordsCreateModal = false; }" disabled="@createWalletSpinner"></button>
                        </div>
                        <div class="modal-body modal-body-scroll">

                            @if (createWalletSpinner)
                            {
                                <div class="d-flex justify-content-center m-3">
                                    <div class="loader"></div>
                                </div>
                            }
                            else
                            {


                                @if (isNewWallet)
                                {
                                    <div class="mb-2">
                                        <button class="btn btn-primary w-100" @onclick="GenerateNewWalletWords">
                                            <div class="d-flex align-items-center justify-content-center">
                                                <span class="material-icons opacity-10 me-1" data-cy="generate-wallet-words">
                                                    add
                                                </span>
                                                <span> Generate New Wallet Words</span>
                                            </div>
                                        </button>
                                    </div>
                                }

                                <div class="mb-2">
                                    <textarea class="form-control" readonly="@isNewWallet" rows="2" @bind="newWalletWords" placeholder="@createWalletDescription"></textarea>
                                </div>

                                <div class="mb-2">
                                    <input type="text" class="form-control" @bind="newWalletWordsPassphrase" placeholder="Additional Passphrase (optional)" />
                                </div>

                                <div class="mb-2">
                                    <div class="input-group mb-3">
                                        <input type="@passwordInputType" class="form-control" @bind="newWalletPassword" placeholder="Enter a password for your wallet" />
                                        <button class="btn btn-primary" type="button" @onclick="TogglePasswordVisibility">
                                            @if (passwordToggleText == "Show")
                                            {
                                                <span class="material-icons opacity-10">
                                                    visibility
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="material-icons opacity-10">
                                                    visibility_off
                                                </span>
                                            }
                                        </button>
                                    </div>
                                    <div class="mb-2">
                                        <div class="card">
                                            <div class="card-header p-2">
                                                <div class="d-flex align-items-center text-warning">
                                                    <span class="material-icons opacity-10 me-2 fs-3">
                                                        warning
                                                    </span>
                                                    <span>By continuing, you confirm understanding that:</span>
                                                </div>
                                            </div>
                                            <div class="card-body pb-0 pt-0 ps-3 pe-3">
                                                <p class="mb-1">You've backed up your wallet words securely, as losing them means losing access to your wallet.</p>
                                                <p class="mb-0">The password unlocks your wallet only on this device and cannot be recovered by Angor.</p>
                                            </div>
                                            <div class="card-footer pb-2 pt-2 ps-3 pe-3">
                                                <div class="form-check">
                                                    <input class="form-check-input border mt-0" type="checkbox" id="backupConfirmationCheckbox" data-cy="wallet-checkbox" @bind="backupConfirmation">
                                                    <label class="form-check-label mb-0" for="backupConfirmationCheckbox">
                                                        Confirm?
                                                    </label>
                                                </div>
                                                @if (showBackupConfirmationError)
                                                {
                                                    <div class="alert alert-danger text-white mt-2" role="alert" data-cy="checkbox-error">
                                                        Please confirm that you have backed up your wallet words and password.
                                                    </div>
                                                }
                                            </div>
                                        </div>

                                    </div>


                                </div>

                            }
                        </div>
                        <div class="modal-footer">
                            @if (!createWalletSpinner)
                            {
                                <button class="btn btn-success" @onclick="CreateWalletAsync">Create Wallet</button>

                            }
                            <button type="button" class="btn btn-secondary" @onclick="() => { WalletWordsClose(); walletWordsCreateModal = false; }" disabled="@createWalletSpinner">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <!-- Section 1 -->
    <div class="row mt-4">

        <div class="card card-body position-relative z-index-1">
            <div class="d-flex align-items-center justify-content-between">
                <div class="mt-2 mb-2 pb-2 d-flex flex-wrap align-items-center">
                    <div class="d-flex flex-wrap align-items-center">
                        <span class="fs-4 me-2" data-cy="balance">Balance: </span>
                        <span class="fs-3 me-2" data-cy="balance-amount"><strong> @Money.Satoshis(accountBalanceInfo.TotalBalance).ToUnit(MoneyUnit.BTC) @network.CoinTicker</strong></span>
                    </div>
                    @if (accountBalanceInfo.TotalUnconfirmedBalance <= 0 & accountBalanceInfo.TotalBalance <= 0)
                    {
                        <div class="d-flex flex-wrap align-items-center">
                            <button class="btn btn-secondary" @onclick="GetTestCoins" disabled="@testCoinsSpinner">
                                @if (testCoinsSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm opacity-10 btn-angor btn-content" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <span>Get some test coins</span>
                                }
                            </button>
                        </div>
                    }

                </div>


                <button class="btn btn-primary ml-2" @onclick="RefreshBalance">
                    @if (balanceSpinner)
                    {
                        <!-- If balanceSpinner is true, show spinner icon -->
                        <span class="spinner-border spinner-border-sm opacity-10 btn-content" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <!-- If balanceSpinner is false, show 'history' icon -->
                        <span class="material-icons opacity-10 btn-content text-white" aria-hidden="true">
                            history
                        </span>
                    }
                </button>


            </div>
            <div class="d-flex">
                @if (accountBalanceInfo.TotalUnconfirmedBalance > 0)
                {
                    <div class="mb-4 me-4">
                        <p class="text-sm opacity-8 mb-0">Unconfirmed balance</p>
                        <h6 class="mb-0">@Money.Satoshis(accountBalanceInfo.TotalUnconfirmedBalance).ToUnit(MoneyUnit.BTC) @network.CoinTicker</h6>
                    </div>
                }
                @if (accountBalanceInfo.TotalBalanceReserved > 0)
                {
                    <div class="mb-4 me-4">
                        <p class="text-sm opacity-8 mb-0">Reserved balance</p>
                        <h6 class="mb-0">@Money.Satoshis(accountBalanceInfo.TotalBalanceReserved).ToUnit(MoneyUnit.BTC) @network.CoinTicker</h6>
                    </div>
                }
            </div>
        </div>
        @if (walletWordsModal)
        {
            <!-- Wallet Words Modal -->
            <div class="modal-wrapper">
                <div class="modal fade show d-block">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" >Wallet Words</h5>
                                <button type="button" class="btn-close" data-cy="close-show-wallet-words" @onclick="() => { WalletWordsClose(); walletWordsModal = false; }" aria-label="Close"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">

                                <!-- Show words button with warning -->
                                <div class="mb-3">
                                    <div class="alert alert-warning text-white" role="alert">
                                        <p class="fs-6">Warning: These words can be used to recover your wallet. Keep them safe.</p>
                                    </div>
                                </div>

                                @if (string.IsNullOrEmpty(showWalletWords))
                                {
                                    <!-- Show words button with warning -->
                                    <div class="mb-3">
                                        <label>Please enter your wallet password:</label>
                                        <div class="input-group">
                                            <input type="@passwordInputType" class="form-control" @bind="showWalletPassword" />
                                            <button class="btn btn-primary" type="button" @onclick="TogglePasswordVisibility">
                                                @if (passwordToggleText == "Show")
                                                {
                                                    <span class="material-icons opacity-10">
                                                        visibility
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="material-icons opacity-10">
                                                        visibility_off
                                                    </span>
                                                }
                                            </button>
                                        </div>
                                    </div>

                                    @if (!string.IsNullOrEmpty(showWalletPasswordError))
                                    {
                                        <div class="text-danger">@showWalletPasswordError</div>
                                    }

                                    <div class="mb-3">
                                        <button class="btn btn-warning" @onclick="ShowWords" data-cy="wallet-words-in-popup">Show Words</button>
                                    </div>
                                }
                                else
                                {
                                    <!-- Wallet words will be shown here -->
                                    <div class="alert alert-success text-white" role="alert" data-cy="alert-wallet-words">
                                        <p>@showWalletWords</p>
                                        <div class="mt-3 d-flex justify-content-end">

                                            <i @onclick="CopyWordsToClibboard" class="material-icons opacity-10 btn-angor fs-3 ms-auto cursor-pointer user-select-none">copy</i>

                                        </div>
                                    </div>

                                    if (!string.IsNullOrEmpty(showWalletWordsPassphrase))
                                    {
                                        <p>This wallet has a passphrase!</p>
                                    }

                                    <!-- Copy words to clipboard -->
                                }
                                <hr>
                                <!-- Delete wallet button -->
                            </div>
                            <div class="modal-footer">

                                @*<button class="btn btn-danger" @onclick="DeleteWallet">Delete Wallet</button> *@

                                <button type="button" class="btn btn-secondary" @onclick="() => { WalletWordsClose(); walletWordsModal = false; }">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>


    <!-- Section 2 -->
    <div class="row mt-4">
        <div class="row d-flex justify-content-center text-center align-items-center">
            <div class="col-lg-3 col-sm-6 mt-lg-0">
                <div class="card h-100 @((activeTab == 1) ? "activeTB" : "")" id="tab1">
                    <div class="card-body d-flex flex-column justify-content-center text-center" role="button" @onclick="() => SetActiveTab(1)">
                        <span class="material-icons opacity-10 btn-angor fs-1 mb-3" aria-hidden="true">
                            upload
                        </span>
                        <h5> Send </h5>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6 mt-4 mt-lg-0 mt-sm-0">
                <div class="card h-100 @((activeTab == 2) ? "activeTB" : "")" id="tab2">
                    <div class="card-body d-flex flex-column justify-content-center text-center" role="button" @onclick="() => SetActiveTab(2)">
                        <span class="material-icons opacity-10 btn-angor fs-1 mb-3" aria-hidden="true">
                            download
                        </span>
                        <h5 data-cy="receive-button"> Receive </h5>
                    </div>
                </div>
            </div>
        </div>
        <br />
        @if (activeTab == 1)
        {
            <!-- Section 3 -->
            <div class="col-md-12 mb-lg-0 mb-4">
                <div class="card mt-4">
                    <div class="card-header pb-0 p-3">
                        <div class="row">
                            <div class="col-6 d-flex align-items-center">
                                <h6 class="mb-0">Send</h6>
                            </div>

                        </div>
                    </div>
                    <div class="card-body p-3">
                        <div class="row">

                            <form>
                                <div class="mb-3">
                                    <label for="sendToAddress" class="form-label">Send to Address</label>
                                    <input type="text" class="form-control" id="sendToAddress" @bind="_sendInfo.SendToAddress" placeholder="Enter address">
                                </div>

                                <div class="mb-3">
                                    <label for="sendAmount" class="form-label">Amount</label>
                                    <input type="text" class="form-control" id="sendAmount" @bind="_sendInfo.SendAmount" placeholder="Enter amount">
                                </div>

                                <button type="button" class="btn btn-primary mb-3" @onclick="() => coinControlModal = true">
                                    Coin Control
                                    @if (_sendInfo.SendUtxos.Any())
                                    {
                                        <span class="badge text-bg-warning">@_sendInfo.SendUtxos.Count</span>
                                    }
                                </button>

                                <!-- New Send button that triggers a confirmation dialog -->
                                <button type="button" class="btn btn-primary mb-3" @onclick="AskPassword" disabled="@sendLoadSpinner">
                                    @if (sendLoadSpinner)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span>Sending...</span>
                                    }
                                    else
                                    {
                                        <span>Send</span>
                                    }
                                </button>

                            </form>

                        </div>
                    </div>
                </div>
                @if (coinControlModal)
                {
                    <!-- Coin Control Modal -->
                    <div class="modal-wrapper">
                        <div class="modal fade show d-block">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="coinControlModalLabel">Coin Control</h5>
                                        <button type="button" class="btn-close" @onclick="() => coinControlModal = false" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body modal-body-scroll">
                                        <!-- The tick boxes and amounts will go here -->

                                        <p>Total amount selected = @Money.Satoshis(_sendInfo.SendUtxos.Sum(s => s.Value.UtxoData.value)).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>

                                        @foreach (var addressInfo in accountBalanceInfo.AccountInfo.AddressesInfo.Union(accountBalanceInfo.AccountInfo.ChangeAddressesInfo))
                                        {
                                            @foreach (var addressUtxoItem in addressInfo.UtxoData)
                                            {
                                                bool isTicked = _sendInfo.SendUtxos.ContainsKey(addressUtxoItem.outpoint.ToString());

                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" @bind="@isTicked" @onclick="() => HandleCheckboxChange(addressUtxoItem, addressInfo.HdPath)">
                                                    <label class="form-check-label fs-lable-s">
                                                        @($"{addressUtxoItem.outpoint} - {Money.Satoshis(@addressUtxoItem.value).ToUnit(MoneyUnit.BTC)} {@network.CoinTicker}")
                                                    </label>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="() => coinControlModal = false">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (sendConfirmModal)
                {
                    <!-- Send Confirmation Modal -->
                    <div class="modal-wrapper">
                        <div class="modal fade show d-block">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Confirmation</h5>
                                        <button type="button" class="btn-close" aria-label="Close" @onclick="() => sendConfirmModal = false" disabled="@sendConfirmSpinner"></button>
                                    </div>
                                    <div class="modal-body modal-body-scroll">
                                        Are you sure you want to send <strong>@_sendInfo.SendAmount @network.CoinTicker</strong> to <strong> @_sendInfo.SendToAddress?</strong>

                                        <br />

                                        The fee for this transaction will be <strong>@_sendInfo.SendFee</strong>

                                        <hr>

                                        <div class="mb-3">
                                            <label for="feeRange" class="form-label">Feerate for @_sendInfo.FeeBlockCount blocks is @_sendInfo.FeeRate sats</label>
                                            <input type="range" class="form-range" id="feeRange" @bind="FeePosition" @oninput="FeeRangeChanged" min="@FeeMin" max="@_feeMax">
                                        </div>

                                        <hr>

                                        The change address is <strong>@_sendInfo.ChangeAddress</strong>

                                        <br />

                                        The selected inputs:

                                        @foreach (var infoSendUtxo in _sendInfo.SendUtxos)
                                        {
                                            <p style="font-size: 0.7em;">@Money.Satoshis(infoSendUtxo.Value.UtxoData.value).ToUnit(MoneyUnit.BTC) @network.CoinTicker - @infoSendUtxo.Key</p>
                                        }

                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="() => sendConfirmModal = false" disabled="@sendConfirmSpinner">Cancel</button>
                                        <button type="button" class="btn btn-primary" @onclick="SendCoins" disabled="@sendConfirmSpinner">
                                            @if (sendConfirmSpinner)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span>Sending...</span>
                                            }
                                            else
                                            {
                                                <span>Confirm</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        @if (activeTab == 2)
        {
            <div class="col-md-12 mb-lg-0 mb-4">
                <div class="card mt-4">
                    <div class="card-header pb-0 p-3">
                        <div class="row">
                            <div class="col-6 d-flex align-items-center">
                                <h6 class="mb-0">Receive</h6>
                            </div>
                            <ShowQrCode @ref="showQrCode" Data="@accountBalanceInfo.AccountInfo.GetNextReceiveAddress()" />

                        </div>
                    </div>
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-md-12 mb-md-0 mb-4">
                                <div class="card card-body border card-plain border-radius-lg d-flex align-items-center flex-row" data-cy="wallet-address">
                                    <img class="address-image me-3 mb-0" src="/assets/img/bitcoin.svg" alt="Bitcoin">
                                    <h6 class="address-text mb-0 overflow-x-auto">@accountBalanceInfo.AccountInfo.GetNextReceiveAddress()</h6>
                                    <i @onclick="CopyNextReceiveAddress" class="material-icons opacity-10 btn-angor fs-3 ms-auto cursor-pointer user-select-none" data-cy="SHOW_QR_CODE_WALLET">copy</i>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

        }
    </div>


    <!-- Section 4 -->
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header pb-0 p-3">
                    <div class="row">
                        <div class="col-6 d-flex align-items-center">
                            <h6 class="mb-0">Addresses and Amounts</h6>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">Address</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">Amount</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">Path</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">UTXO count</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var addressInfo in accountBalanceInfo.AccountInfo.AllAddresses())
                                {
                                    var total = addressInfo.Balance;
                                    var count = addressInfo.UtxoData.Count();

                                    if (total > 0)
                                    {
                                        <tr @onclick="() => ToggleCollapse(addressInfo.Address)" class="clickable-row" aria-expanded="@IsExpanded(addressInfo.Address).ToString().ToLower()" aria-controls="@($"collapse-{addressInfo.Address}")">
                                            <td>@addressInfo.Address</td>
                                            <td>@Money.Satoshis(total).ToUnit(MoneyUnit.BTC) @network.CoinTicker</td>
                                            <td>@addressInfo.HdPath</td>
                                            <td>@count</td>
                                        </tr>
                                        @if (IsExpanded(addressInfo.Address))
                                        {
                                            <tr>
                                                <td colspan="4">
                                                    <div class="collapse show" id="@($"collapse-{addressInfo.Address}")">
                                                        <div class="card card-body">
                                                            <!-- Inner table goes here -->
                                                            <div class="table-responsive">
                                                                <table class="table table-sm">
                                                                    <thead>
                                                                        <tr>
                                                                            <th scope="col">Coin</th>
                                                                            <th scope="col">Amount</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        @foreach (var addressUtxoItem in addressInfo.UtxoData)
                                                                        {
                                                                            <tr>
                                                                                <td>@($"{addressUtxoItem.outpoint}")</td>
                                                                                <td>@Money.Satoshis(addressUtxoItem.value).ToUnit(MoneyUnit.BTC) @network.CoinTicker</td>
                                                                            </tr>
                                                                        }
                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@code {


    private bool balanceSpinner = false;
    private bool createWalletSpinner = false;
    private bool testCoinsSpinner = false;
    private bool sendLoadSpinner = false;
    private bool sendConfirmSpinner = false;

    private string? showWalletWords;
    private string? showWalletWordsPassphrase;
    private string? showWalletPassword;
    private string? showWalletPasswordError;

    private string? newWalletWords;
    private string? newWalletWordsPassphrase;
    private string? newWalletPassword;
    private string passwordInputType = "password";
    private string passwordToggleText = "Show";

    private bool isNewWallet = false;
    private string createWalletTitle = "Create Wallet";
    private string createWalletDescription = "Generate a new wallet";

    private bool sendConfirmModal;
    private bool coinControlModal;
    private bool walletWordsModal;
    private bool walletWordsCreateModal;


    private bool backupConfirmation = false;
    private bool showBackupConfirmationError = false;

    private int activeTab = 1;


    private int feeRange = 0;
    private int FeePosition = 1;
    private SendInfo _sendInfo = new();

    private AccountBalanceInfo accountBalanceInfo = new AccountBalanceInfo();

    private FeeEstimations FeeEstimations = new();

    // Max index for the range input
    private int FeeMin = 1;
    private int _feeMax = 3;
    DateTime _lastFeeRefresh = DateTime.MinValue;

    ShowQrCode showQrCode;

    Dictionary<string, bool> collapseStates = new Dictionary<string, bool>();


    protected override Task OnInitializedAsync()
    {
        if (hasWallet)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = _cacheStorage.GetUnconfirmedInboundFunds();

            accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);
        }

        return Task.CompletedTask;
    }

    private async Task RefreshBalance()
    {
        if (!balanceSpinner)
        {
            balanceSpinner = true;

            try
            {
                var accountInfo = storage.GetAccountInfo(network.Name);
                var unconfirmedInboundFunds = _cacheStorage.GetUnconfirmedInboundFunds();

                await _walletOperations.UpdateDataForExistingAddressesAsync(accountInfo);

                await _walletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

                storage.SetAccountInfo(network.Name, accountInfo);

                var utxos = accountInfo.AllUtxos()
                    .Select(x => x.outpoint.ToString()).ToList();

                var spentToUpdate = unconfirmedInboundFunds
                    .RemoveAll(x => utxos.Contains(x.outpoint.ToString()));

                if (spentToUpdate > 0)
                    _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInboundFunds);

                accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInboundFunds);

                showQrCode?.SetQRCode(accountBalanceInfo.AccountInfo.GetNextReceiveAddress());
            }
            catch (Exception e)
            {
                Logger.LogError(e, e.Message);
                notificationComponent.ShowErrorMessage(e.Message);
            }
            finally
            {
                balanceSpinner = false;
            }
        }
    }

    private async Task ShowCreateWalletModal(string type)
    {
        isNewWallet = type == "new" ? true : false;
        createWalletTitle = type == "new" ? "Create Wallet" : "Recover Wallet";
        createWalletDescription = type == "new" ? "Generate a new wallet" : "Paste your wallet words";

        walletWordsCreateModal = true;
        StateHasChanged();
        await Task.Delay(10);
    }

    private void TogglePasswordVisibility()
    {
        if (passwordInputType == "password")
        {
            passwordInputType = "text";
            passwordToggleText = "Hide";
        }
        else
        {
            passwordInputType = "password";
            passwordToggleText = "Show";
        }
    }

    private async Task CreateWalletAsync()
    {
        if (string.IsNullOrEmpty(newWalletWords))
        {
            walletWordsCreateModal = false;
            notificationComponent.ShowErrorMessage("New wallet words are null or empty");
            return;
        }
        if (string.IsNullOrEmpty(newWalletPassword))
        {
            walletWordsCreateModal = false;
            notificationComponent.ShowErrorMessage("New wallet password is null or empty");
            return;
        }

        if (!backupConfirmation)
        {
            showBackupConfirmationError = true;
            return;
        }

        createWalletSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {

            WalletWords data = new WalletWords { Words = newWalletWords, Passphrase = newWalletWordsPassphrase };
            var accountInfo = _walletOperations.BuildAccountInfoForWalletWords(data);
            await _walletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

            var encrypted = await _encryptionService.EncryptData(data.ConvertToString(), newWalletPassword);

            _walletStorage.SaveWalletWords(new Angor.Shared.Models.Wallet { EncryptedData = encrypted });
            storage.SetAccountInfo(network.Name, accountInfo);
            accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, new List<UtxoData>());

            // pre-derive the angor wallet keys
            FounderKeyCollection founderKeyCollection = _derivationOperations.DeriveProjectKeys(data, NetworkConfiguration.AngorTestKey);
            _walletStorage.SetFounderKeys(founderKeyCollection);

            hasWallet = _walletStorage.HasWallet();
            ClearWalletWords();

            walletWordsCreateModal = false;

            NavMenuState.NotifyStateChanged();
        }
        catch (Exception e)
        {
            walletWordsCreateModal = false;
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            createWalletSpinner = false;
        }
    }

    private async Task ShowWords()
    {
        if (string.IsNullOrEmpty(showWalletPassword))
        {
            notificationComponent.ShowNotificationMessage("Wallet password is null or empty");
            //throw new ArgumentNullException(nameof(showWalletPassword));
            return;
        }


        var wallet = _walletStorage.GetWallet();
        var walletData = await _encryptionService.DecryptData(wallet.EncryptedData, showWalletPassword);

        if (string.IsNullOrEmpty(walletData))
        {
            // invalid password
            showWalletPasswordError = "Invaid password";
            return;
        }

        var data = WalletWords.ConvertFromString(walletData);
        showWalletWords = data.Words;
        showWalletWordsPassphrase = data.Passphrase;
        data = null;
        StateHasChanged();
    }

    private async Task CopyWordsToClibboard()
    {
        if (string.IsNullOrEmpty(showWalletWords))
        {
            throw new InvalidOperationException();
        }

        await _clipboardService.WriteTextAsync(showWalletWords);
        ClearWalletWords();
        StateHasChanged();
    }

    private void ClearWalletWords()
    {
        showWalletWords = null;
        showWalletWordsPassphrase = null;
        newWalletWords = null;
        newWalletWordsPassphrase = null;
        newWalletPassword = null;
        showWalletPassword = null;
        backupConfirmation = false;
        showBackupConfirmationError = false;
    }

    private void WalletWordsClose()
    {
        showWalletWords = null;
        backupConfirmation = false;
        showBackupConfirmationError = false;
        showWalletPasswordError = null;
        showWalletPassword = null;
        newWalletPassword = null;
    }

    private void DeleteWallet()
    {
        walletWordsModal = false;
        storage.DeleteAccountInfo(network.Name);
        _cacheStorage.DeleteUnconfirmedInfo();
        _walletStorage.DeleteWallet();
        hasWallet = _walletStorage.HasWallet();
        ClearWalletWords();
        StateHasChanged();

        NavMenuState.NotifyStateChanged();
    }

    private void GenerateNewWalletWords()
    {
        newWalletWords = _walletOperations.GenerateWalletWords();
    }

    public async Task CopyNextReceiveAddress()
    {
        var accountInfo = storage.GetAccountInfo(network.Name);
        var address = accountInfo.GetNextReceiveAddress();

        if (string.IsNullOrEmpty(address))
        {
            notificationComponent.ShowErrorMessage("New address was not created");
            return;
        }

        await _clipboardService.WriteTextAsync(address);
        notificationComponent.ShowNotificationMessage("Copied to clipboard!", 3);
    }

    private async Task RefreshFee()
    {
        // refresh fee if last refresh was 60 seconds ago

        if (_sendInfo.FeeRateSat == 0 || _lastFeeRefresh.AddSeconds(60) < DateTime.UtcNow)
        {
            var fees = await _walletOperations.GetFeeEstimationAsync();

            FeeEstimations.Fees = fees.ToList();

            _feeMax = FeeEstimations.Fees.Count;

            var feeItem = FeeEstimations?.Fees.MinBy(c => c.Confirmations);

            if (feeItem != null)
            {
                _sendInfo.FeeBlockCount = feeItem.Confirmations;
                _sendInfo.FeeRateSat = feeItem.FeeRate;
            }

            _lastFeeRefresh = DateTime.UtcNow;
        }
    }

    private async Task AskPassword()
    {
        if (string.IsNullOrEmpty(_sendInfo.SendToAddress))
        {
            notificationComponent.ShowErrorMessage("Specify a send to address");
            return;
        }

        if (_sendInfo.SendAmount == 0)
        {
            notificationComponent.ShowErrorMessage("Specify an amount");
            return;
        }

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(BuildSend);
        }
        else
        {
            await BuildSend();
        }
    }

    private async Task BuildSend()
    {
        if (string.IsNullOrEmpty(_sendInfo.SendToAddress)) throw new ArgumentNullException();
        if (_sendInfo.SendAmount == 0) throw new ArgumentNullException();

        sendLoadSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var accountInfo = storage.GetAccountInfo(network.Name);

            await _walletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

            storage.SetAccountInfo(network.Name, accountInfo);

            await RefreshFee();

            if (FeeEstimations.Fees.Count == 0)
            {
                notificationComponent.ShowErrorMessage("Unable top calculate fee");
                return;
            }

            // by default select the highest fee
            var estimationsFee = FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[0];

            FeePosition = 1;

            _sendInfo.FeeBlockCount = estimationsFee.Confirmations;
            _sendInfo.FeeRateSat = estimationsFee.FeeRate;

            if (string.IsNullOrEmpty(_sendInfo.ChangeAddress))
            {
                _sendInfo.ChangeAddress = accountInfo.ChangeAddressesInfo.First(f => f.HasHistory == false).Address;
            }

            _sendInfo.SendFee = _walletOperations.CalculateTransactionFee(_sendInfo, accountInfo, estimationsFee.FeeRate);

            sendConfirmModal = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            passwordComponent.ClearPassword();
            sendLoadSpinner = false;
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            sendLoadSpinner = false;
        }

        StateHasChanged();
    }

    private async Task SendCoins()
    {
        if (!passwordComponent.HasPassword())
        {
            sendConfirmSpinner = false;
            sendConfirmModal = false;
            notificationComponent.ShowErrorMessage("Wallet password expired");
            return;
        }

        sendConfirmSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();

            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = _cacheStorage.GetUnconfirmedInboundFunds();

            var res = await _walletOperations.SendAmountToAddress(words, _sendInfo);

            if (res.Success)
            {
                var pendingInbound = _walletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, res.Data);
                unconfirmedInfo.AddRange(pendingInbound);
                accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);
                storage.SetAccountInfo(network.Name, accountInfo);
                _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInfo);
            }

            _sendInfo = new SendInfo();

            notificationComponent.ShowNotificationMessage("Sent complete!");
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            sendConfirmSpinner = false;
            sendConfirmModal = false;
            passwordComponent.ClearPassword();
        }
    }

    private void HandleCheckboxChange(UtxoData addressUtxoItem, string hdPath)
    {
        // Here you can handle the change
        // Note: replace AddressUtxoItem with the actual type of addressUtxoItem

        if (_sendInfo.SendUtxos.ContainsKey(addressUtxoItem.outpoint.ToString()))
        {
            _sendInfo.SendUtxos.Remove(addressUtxoItem.outpoint.ToString());
        }
        else
        {
            _sendInfo.SendUtxos.Add(addressUtxoItem.outpoint.ToString(), new UtxoDataWithPath { HdPath = hdPath, UtxoData = addressUtxoItem });
        }
    }

    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        // Here you can handle the fee range change
        // The new value is in e.Value

        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= FeeEstimations.Fees.Count)
                {
                    var estimationsFee = FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    _sendInfo.FeeBlockCount = estimationsFee.Confirmations;
                    _sendInfo.FeeRateSat = estimationsFee.FeeRate;
                    var accountInfo = storage.GetAccountInfo(network.Name);

                    _sendInfo.SendFee = _walletOperations.CalculateTransactionFee(_sendInfo, accountInfo, estimationsFee.FeeRate);

                    StateHasChanged();
                }
            }
        }
    }

    private void showCoinControlModal()
    {
        coinControlModal = true;
        StateHasChanged();
    }

    private async Task GetTestCoins()
    {
        if (Money.Satoshis(accountBalanceInfo.TotalBalance + accountBalanceInfo.TotalUnconfirmedBalance).ToUnit(MoneyUnit.BTC) > 10)
        {
            notificationComponent.ShowNotificationMessage("you already have coins!");
            return;
        }

        testCoinsSpinner = true;

        try
        {
            var receiveAddress = accountBalanceInfo.AccountInfo.GetNextReceiveAddress();

            var res = await _httpClient.GetAsync($"https://test.angor.io/api/faucet/send/{receiveAddress}"); 

            res.EnsureSuccessStatusCode();

            var trxhex = await res.Content.ReadAsStringAsync();
            var trx = network.CreateTransaction(trxhex);
            var unconfirmedInboundFunds = _cacheStorage.GetUnconfirmedInboundFunds();
            unconfirmedInboundFunds.Add(new UtxoData { PendingSpent = true, address = receiveAddress, value = trx.Outputs.FirstOrDefault()?.Value.Satoshi ?? Money.Coins(50).Satoshi, outpoint = new Outpoint(trx.GetHash().ToString(), 0) });
            _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInboundFunds);
            accountBalanceInfo.UpdateAccountBalanceInfo(accountBalanceInfo.AccountInfo, unconfirmedInboundFunds);

        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            testCoinsSpinner = false;
        }
    }
    void SetActiveTab(int tab)
    {
        activeTab = tab;
    }


    bool IsExpanded(string address)
    {
        return collapseStates.ContainsKey(address) ? collapseStates[address] : false;
    }

    void ToggleCollapse(string address)
    {
        if (collapseStates.ContainsKey(address))
            collapseStates[address] = !collapseStates[address];
        else
            collapseStates[address] = true;
    }
}