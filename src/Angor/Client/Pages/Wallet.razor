@page "/wallet"


@using System.Text.Json
@using Angor.Client.Storage
@using Angor.Shared
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Blockcore.Networks
@inherits BaseComponent
@inject HttpClient _httpClient;
@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject IWalletStorage _walletStorage;
@inject ILogger<Wallet> Logger;
@inject IWalletOperations _walletOperations
@inject IClipboardService _clipboardService
@inject ICurrencyService _currencyService
@inject IDerivationOperations _derivationOperations
@inject NavMenuState NavMenuState
@inject IEncryptionService _encryptionService
@inject IClipboardService ClipboardService

<PageTitle>Wallet and balances</PageTitle>
<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />
<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto">
                <span class="me-1">
                    <Icon IconName="wallet" Width="42" Height="42" />
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-1 font-weight-bolder">
                        Wallet
                    </h5>
                    <p class="mb-0 font-weight-normal text-sm">
                        Wallet and balances
                    </p>
                </div>
            </div>
            @if (hasWallet)
            {
                <div>
                    <button type="button" class="btn btn-border mb-0" @onclick="() => walletWordsModal = true" data-cy="wallet-words">Wallet Words</button>
                </div>
            }

        </div>
    </div>
</div>

<!-- This part of the page is visible only if the wallet is found -->
@if (!hasWallet)
{
    <!-- No Wallet found -->
    <div class="row mt-4">
        <div class="card card-body angor-alert-info pt-2 pb-2">
            <div class="d-flex align-items-center align-items-center">
                <span class="me-3 user-select-none">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                </span>
                <span class="text-white">No Wallet Found</span>
            </div>
        </div>
    </div>
    <div class="row g-4 mt-4 d-flex justify-content-center text-center align-items-center">

        <div class="col-lg-3 col-sm-6 mt-lg-0 mt-4">
            <div class="card h-100 feature-box py-0">
                <div class="card-body d-flex flex-column justify-content-center text-center" @onclick="@(() => ShowCreateWalletModal("new"))" role="button">

                    <span class="mb-3" aria-hidden="true" data-cy="create-wallet">
                        <Icon IconName="add" Width="64" Height="64" />
                    </span>
                    <h5 class="text-nowrap"> Create Wallet </h5>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-sm-6 mt-lg-0 mt-4">
            <div class="card h-100 feature-box py-0">
                <div class="card-body d-flex flex-column justify-content-center text-center align-items-center" data-cy="recover-wallet" @onclick="@(() => ShowCreateWalletModal("recover"))" role="button">
                    <span class="mb-3" aria-hidden="true">
                        <Icon IconName="recovery" Width="64" Height="64" />
                    </span>
                    <h5 class="text-nowrap"> Recover Wallet </h5>
                </div>
            </div>
        </div>
    </div>

    @if (walletWordsCreateModal)
    {
        <div class="modal-wrapper">
            <div class="modal fade show d-block" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content modern-modal">
                        <div class="modal-header border-0 pb-0">
                            <div class="d-flex align-items-center">
                                <Icon IconName="wallet" Height="32" Width="32" class="me-2" />
                                <h5 class="modal-title">@createWalletTitle</h5>
                            </div>
                            <button class="btn-close-custom" @onclick="() => walletWordsCreateModal = false">
                                <Icon IconName="close-circle" Height="24" Width="24" />
                            </button>
                        </div>

                        <div class="modal-body modal-body-scroll py-4">

                            <div class="info-card mb-3">
                                <div class="info-value">@createWalletDescription</div>
                            </div>

                            @if (isNewWallet)
                            {
                                <div class="info-card mb-3">
                                    <div class="info-label">New Wallet Words</div>
                                    <textarea class="form-control" @bind="newWalletWords" rows="3" readonly></textarea>

                                    <div class="d-flex flex-wrap align-items-center justify-content-between mt-2">
                                        <button class="btn btn-border-success mt-3 w-100 w-md-auto" @onclick="GenerateNewWalletWords">
                                                           <div class="d-flex align-items-center justify-content-center">
                                                <span class="me-1" data-cy="generate-wallet-words">
                                                    <Icon IconName="plus" Height="24" Width="24" Color="var(--angor-primary)"></Icon>
                                                </span>
                                                <span> Generate Wallet Words</span>
                                            </div>
                                        </button>

                                        <div class="form-check mt-3 w-100 w-md-auto">
                                            <input class="form-check-input" type="checkbox" @bind="backupConfirmation" id="backupConfirmation">
                                            <label class="form-check-label" for="backupConfirmation">
                                                I have written down my wallet words
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                @*
                    @if (showBackupConfirmationError)
                    {
                    <div class="alert alert-danger">
                    Please confirm that you have written down your wallet words.
                    </div>
                    } *@
                            }
                            else
                            {
                                <div class="info-card mb-3">
                                    <div class="info-label">Wallet Words</div>
                                    <textarea class="form-control" @bind="newWalletWords" rows="3"></textarea>
                                </div>
                            }

                            <div class="info-card mb-3">
                                <button class="btn btn-border-success w-100" @onclick="ShowExtraWord">
                                    <div class="d-flex align-items-center justify-content-center">
                                        <span class="me-1" data-cy="generate-wallet-words">
                                            @if (isShowExtraWord)
                                            {
                                                <Icon IconName="shield-minus" Height="24" Width="24" Color="var(--angor-primary)"></Icon>
                                            }
                                            else
                                            {
                                                <Icon IconName="shield-plus" Height="24" Width="24" Color="var(--angor-primary)"></Icon>
                                            }
                                        </span>
                                        <span> Optional extra word</span>
                                    </div>
                                </button>

                                @if (isShowExtraWord)
                                {
                                    <div class="mt-3">
                                        <div class="info-label d-flex align-items-center">
                                            Passphrase (Optional)
                                            <span class="ms-2" title="Your passphrase adds an extra security layer to your wallet">
                                                <Icon IconName="key" Width="16" Height="16" />
                                            </span>
                                        </div>
                                        <input type="text" class="form-control" @bind="newWalletWordsPassphrase" placeholder="Enter passphrase (optional)">
                                        <small class="form-text text-muted mt-2">
                                            Adding a passphrase increases your wallet's security. Make sure to remember it!
                                        </small>
                                    </div>
                                }
                            </div>

                            <div class="info-card">
                                <div class="info-label">Password</div>
                                <div class="input-group">
                                    <input type="@passwordInputType" class="form-control" @bind="newWalletPassword" placeholder="Enter password">
                                    <button class="btn btn-border" type="button" @onclick="TogglePasswordVisibility">@passwordToggleText</button>
                                </div>
                            </div>


                        </div>

                        <div class="modal-footer border-0 pt-0">
                            <button class="btn btn-border-success" @onclick="CreateWalletAsync" disabled="@createWalletSpinner">
                                @if (createWalletSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span>@(isNewWallet ? "Creating..." : "Recovering...")</span>
                                }
                                else
                                {
                                    <span>@(isNewWallet ? "Create Wallet" : "Recover Wallet")</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (walletWordsModal)
    {
        <div class="modal-wrapper">
            <div class="modal fade show d-block" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content modern-modal">
                        <div class="modal-header border-0 pb-0">
                            <div class="d-flex align-items-center">
                                <Icon IconName="wallet" Height="32" Width="32" class="me-2" />
                                <h5 class="modal-title">Wallet Words</h5>
                            </div>
                            <button class="btn-close-custom" @onclick="() => walletWordsModal = false">
                                <Icon IconName="close-circle" Height="24" Width="24" />
                            </button>
                        </div>

                        <div class="modal-body modal-body-scroll py-4">
                            <div class="transaction-info-section row">
                                <div class="col-12 col-md-6 mb-3">
                                    <div class="info-label">Password</div>
                                    <input type="password" class="form-control" @bind="showWalletPassword" placeholder="Enter password">
                                    @if (!string.IsNullOrEmpty(showWalletPasswordError))
                                    {
                                        <div class="alert alert-danger mt-2">@showWalletPasswordError</div>
                                    }
                                </div>
                                @if (!string.IsNullOrEmpty(showWalletWords))
                                {
                                    <div class="col-12 col-md-6 mb-3">
                                        <div class="info-label">Wallet Words</div>
                                        <textarea class="form-control" @bind="showWalletWords" rows="3" readonly></textarea>
                                    </div>
                                    <div class="col-12 col-md-6 mb-3">
                                        <div class="info-label">Passphrase</div>
                                        <input type="text" class="form-control" @bind="showWalletWordsPassphrase" readonly>
                                    </div>
                                    <div class="col-12 mt-2">
                                        <button class="btn btn-border-success w-100 w-md-auto" @onclick="CopyWordsToClibboard">
                                            Copy to Clipboard
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="modal-footer border-0 pt-0">
                            <button class="btn btn-border-success w-100 w-md-auto" @onclick="ShowWords" disabled="@createWalletSpinner">
                                @if (createWalletSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span>Loading...</span>
                                }
                                else
                                {
                                    <span>Show Wallet Words</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <!-- Section 1 -->
    <div class="row mt-4">

        <div class="card card-body position-relative z-index-1">
            <div class="d-flex align-items-center justify-content-between">
                <div class="mt-2 mb-2 pb-2 d-flex flex-wrap align-items-center">
                    <div class="d-flex flex-wrap align-items-center">

                        <div class="d-flex align-items-center">
                            <span class="user-select-none">
                                <Icon IconName="balance" Width="72" Height="72"></Icon>
                            </span>
                            <div>
                                <BalanceDisplay BtcBalance="@Money.Satoshis(accountBalanceInfo.TotalBalance).ToUnit(MoneyUnit.BTC)"
                                                BtcBalanceInFiat="@btcBalanceInUsd"
                                                PreferredCurrency="@storage.GetCurrencyDisplaySetting()"
                                                ShowFiatInline="true" />
                            </div>

                        </div>

                    </div>
                    @if (CanGetTestCoins())
                    {
                        <div class="d-flex flex-wrap align-items-center">
                            <button class="btn btn-border ms-2" data-cy="get-test-coins" @onclick="GetTestCoins" disabled="@testCoinsSpinner">
                                @if (testCoinsSpinner)
                                {
                                    <span class="spinner-border spinner-border-sm opacity-10 btn-angor btn-content" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <span>Get Test Coins</span>
                                }
                            </button>
                        </div>
                    }

                </div>


                <button class="btn btn-border ml-2" @onclick="RefreshBalance">

                    <span data-cy="history-refresh" class="@(balanceSpinner ? "rotate-icon" : "")" aria-hidden="true">
                        <Icon IconName="refresh" Height="24" Width="24"></Icon>
                    </span>

                </button>


            </div>
            <div class="d-flex">
                @if (accountBalanceInfo.TotalUnconfirmedBalance > 0)
                {
                    <div class="mb-4 me-4">
                        <p class="text-sm opacity-8 mb-0" data-cy="confirmed-balance">Unconfirmed balance</p>
                        <h6 class="mb-0">@Money.Satoshis(accountBalanceInfo.TotalUnconfirmedBalance).ToUnit(MoneyUnit.BTC) @network.CoinTicker</h6>
                    </div>
                }
                @if (accountBalanceInfo.TotalBalanceReserved > 0)
                {
                    <div class="mb-4 me-4">
                        <p class="text-sm opacity-8 mb-0">Reserved balance</p>
                        <h6 class="mb-0">@Money.Satoshis(accountBalanceInfo.TotalBalanceReserved).ToUnit(MoneyUnit.BTC) @network.CoinTicker</h6>
                    </div>
                }
            </div>
        </div>


        @if (walletWordsModal)
        {
            <!-- Wallet Words Modal -->
            <div class="modal-wrapper">
                <div class="modal fade show d-block" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content modern-modal">
                            <div class="modal-header border-0 pb-0">
                                <div class="d-flex align-items-center">
                                    <Icon IconName="key" Height="32" Width="32" class="me-2" />
                                    <h5 class="modal-title">Wallet Words</h5>
                                </div>
                                <button class="btn-close-custom" @onclick="() => { WalletWordsClose(); walletWordsModal = false; }">
                                    <Icon IconName="close-circle" Height="24" Width="24" />
                                </button>
                            </div>

                            <div class="modal-body modal-body-scroll py-4">
                                @if (string.IsNullOrEmpty(showWalletWords))
                                {
                                    <div class="mb-1">
                                        <label class="mb-3">Please enter your wallet password:</label>
                                        <div class="input-group">
                                            <input type="@passwordInputType" class="form-control" @bind="showWalletPassword" />
                                            <button class="btn btn-border" type="button" @onclick="TogglePasswordVisibility">
                                                @if (passwordToggleText == "Show")
                                                {
                                                    <Icon IconName="visibility-off" Height="24" Width="24"></Icon>
                                                }
                                                else
                                                {
                                                    <Icon IconName="visibility" Height="24" Width="24"></Icon>
                                                }
                                            </button>
                                        </div>
                                    </div>

                                    @if (!string.IsNullOrEmpty(showWalletPasswordError))
                                    {
                                        <div class="text-danger">@showWalletPasswordError</div>
                                    }
                                }
                                else
                                {
                                    <div class="alert alert-danger text-white" role="alert" data-cy="alert-wallet-words">
                                        <p>@showWalletWords</p>
                                        <div class="mt-3 d-flex justify-content-end">
                                            <i @onclick="CopyWordsToClibboard" class="ms-auto cursor-pointer user-select-none">
                                                <Icon IconName="copy" />
                                            </i>
                                        </div>
                                    </div>

                                    @if (!string.IsNullOrEmpty(showWalletWordsPassphrase))
                                    {
                                        <p>This wallet has a passphrase!</p>
                                    }
                                }
                            </div>

                            <div class="modal-footer border-0 pt-0">
                                <button class="btn btn-warning" @onclick="ShowWords" data-cy="wallet-words-in-popup">Show Words</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }


    </div>


    <!-- Section 2 -->
    <div class="row mt-4">
        <div class="tab-container">
            <div class="row g-4 justify-content-center text-center">
                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="card tab-card h-100 @(activeTab == 1 ? "active" : "")"
                         @onclick="() => SetActiveTab(1)"
                         data-cy="send-tab">
                        <div class="card-body py-4">
                            <div class="tab-icon mb-3 @(activeTab == 1 ? "heartbeat" : "")" aria-hidden="true">
                                <Icon IconName="send" Height="42" Width="42" />
                            </div>
                            <h5 class="mb-0">Send</h5>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="card tab-card h-100 @(activeTab == 2 ? "active" : "")"
                         @onclick="() => SetActiveTab(2)"
                         data-cy="receive-tab">
                        <div class="card-body py-4">
                            <div class="tab-icon mb-3 @(activeTab == 2 ? "heartbeat" : "")" aria-hidden="true">
                                <Icon IconName="receive" Height="42" Width="42" />
                            </div>
                            <h5 class="mb-0">Receive</h5>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="card tab-card h-100 @(activeTab == 3 ? "active" : "")"
                         @onclick="() => SetActiveTab(3)"
                         data-cy="history-tab">
                        <div class="card-body py-4">
                            <div class="tab-icon mb-3 @(activeTab == 3 ? "heartbeat" : "")" aria-hidden="true">
                                <Icon IconName="calculator" Height="42" Width="42" />
                            </div>
                            <h5 class="mb-0">Addresses</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br />
        @if (activeTab == 1)
        {
            <!-- Section 3 -->
            <div class="col-md-12 mb-lg-0 mb-4">

                <div class="card card-body p-3 mt-4">

                    <div class="d-flex align-items-center">
                        <span class="user-select-none">
                            <Icon IconName="send"></Icon>
                        </span>
                        <div class="h-100 ms-3">
                            <h5 class="mb-0 font-weight-bolder">
                                Send
                            </h5>
                        </div>
                    </div>

                    <div class="row mt-4">

                        <form>
                            <form>
                                <div class="mb-3">
                                    <label for="sendToAddress" class="form-label">Send to Address</label>
                                    <div class="input-group">
                                        <span role="button" class="btn btn-border" @onclick="PasteFromClipboard">
                                            <Icon IconName="paste" />
                                        </span>

                                        <input type="text" class="form-control" id="sendToAddress" @bind="_sendInfo.SendToAddress" placeholder="Enter address">


                                        <span role="button" class="btn btn-border" @onclick="ClearAddress">
                                            <Icon IconName="remove" />
                                        </span>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="sendAmount" class="form-label">Amount</label>
                                    <input type="text" class="form-control" id="sendAmount" @bind="_sendInfo.SendAmount" placeholder="Enter amount">
                                </div>
                                <button type="button" class="btn btn-border" @onclick="() => coinControlModal = true">
                                    Select UTXOs

                                    @if (_sendInfo.SendUtxos.Any())
                                    {
                                        <span class="badge text-bg-warning">@_sendInfo.SendUtxos.Count</span>
                                    }
                                </button>

                                <!-- New Send button that triggers a confirmation dialog -->
                                <button type="button" class="btn btn-border" data-cy="send-button" @onclick="AskPassword" disabled="@sendLoadSpinner">
                                    @if (sendLoadSpinner)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span>Sending...</span>
                                    }
                                    else
                                    {
                                        <span>Send</span>
                                    }
                                </button>

                            </form>
                        </form>

                    </div>
                </div>

                @if (coinControlModal)
                {
                    <div class="modal-wrapper">
                        <div class="modal fade show d-block" tabindex="-1">
                            <div class="modal-dialog modal-dialog-centered">
                                <div class="modal-content modern-modal">
                                    <div class="modal-header border-0 pb-0">
                                        <div class="d-flex align-items-center">
                                            <Icon IconName="utxo" Height="32" Width="32" class="me-2" />
                                            <h5 class="modal-title">Select UTXOs</h5>
                                        </div>
                                        <button class="btn-close-custom" @onclick="() => coinControlModal = false">
                                            <Icon IconName="close-circle" Height="24" Width="24" />
                                        </button>
                                    </div>

                                    <div class="modal-body modal-body-scroll py-4">
                                        <div class="transaction-info-section mb-4">
                                            <p class="pb-4">Total amount selected = @Money.Satoshis(_sendInfo.SendUtxos.Sum(s => s.Value.UtxoData.value)).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                                            @foreach (var addressInfo in accountBalanceInfo.AccountInfo.AddressesInfo.Union(accountBalanceInfo.AccountInfo.ChangeAddressesInfo))
                                            {
                                                foreach (var addressUtxoItem in addressInfo.UtxoData)
                                                {
                                                    var outpointStr = addressUtxoItem.outpoint.ToString();
                                                    var outpointLength = outpointStr.Length;
                                                    var shortenedOutpoint = outpointLength > 20
                                                    ? $"{outpointStr.Substring(0, 10)} ... {outpointStr.Substring(outpointLength - 10)}"
                                                    : outpointStr;

                                                    var valueInBTC = Money.Satoshis(addressUtxoItem.value).ToUnit(MoneyUnit.BTC);
                                                    var coinTicker = network.CoinTicker;
                                                    var isTicked = _sendInfo.SendUtxos.ContainsKey(outpointStr);

                                                    <div class="info-card mb-3">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="@outpointStr" @bind="@isTicked" @onclick="() => HandleCheckboxChange(addressUtxoItem, addressInfo.HdPath)">
                                                            <label class="form-check-label" for="@outpointStr">
                                                                @($"{shortenedOutpoint} - {valueInBTC} {coinTicker}")
                                                            </label>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>

                                    <div class="modal-footer border-0">
                                        <button class="btn btn-border-success" @onclick="() => coinControlModal = false">Submit</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (sendConfirmModal)
                {
                    <!-- Send Confirmation Modal -->

                    <div class="modal-wrapper">
                        <div class="modal fade show d-block">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Confirmation</h5>
                                        <span type="button" aria-label="Close" @onclick="() => sendConfirmModal = false" disabled="@sendConfirmSpinner">
                                            <Icon IconName="close-circle" />
                                        </span>
                                    </div>
                                    <div class="modal-body modal-body-scroll">
                                        <p>Are you sure you want to send @_sendInfo.SendAmount to @_sendInfo.SendToAddress?</p>
                                        <p>Fees: @_sendInfo.SendFee</p>

                                        <div class="mb-3">
                                            <label for="feeRange" class="form-label">Feerate for @_sendInfo.FeeBlockCount blocks is @_sendInfo.FeeRate sats</label>
                                            <input type="range" class="form-range" id="feeRange" @bind="FeePosition" @oninput="FeeRangeChanged" min="@FeeMin" max="@_feeMax">
                                        </div>

                                        <hr>

                                        The change address is <strong>@_sendInfo.ChangeAddress</strong>

                                        <br />

                                        The selected inputs:

                                        @foreach (var infoSendUtxo in _sendInfo.SendUtxos)
                                        {
                                            <p style="font-size: 0.7em;">@Money.Satoshis(infoSendUtxo.Value.UtxoData.value).ToUnit(MoneyUnit.BTC) @network.CoinTicker - @infoSendUtxo.Key</p>
                                        }

                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-border" @onclick="() => sendConfirmModal = false" disabled="@sendConfirmSpinner">Cancel</button>
                                        <button type="button" class="btn btn-border" @onclick="SendCoins" disabled="@sendConfirmSpinner">
                                            @if (sendConfirmSpinner)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span>Sending...</span>
                                            }
                                            else
                                            {
                                                <span>Confirm</span>
                                            }
                                        </button>
                                        <button class="btn btn-outline-primary" @onclick="ShowTransactionJson">
                                            View Transaction Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        @if (activeTab == 2)
        {
            <div class="col-md-12 mb-lg-0 mb-4">

                <div class="card card-body p-3 mt-4">

                    <div class="d-flex align-items-center justify-content-between mb-4">
                        <div class="d-flex align-items-center">
                            <span class="user-select-none">
                                <Icon IconName="receive"></Icon>
                            </span>
                            <div class="h-100 ms-3">
                                <h5 class="mb-0 font-weight-bolder">
                                    Receive
                                </h5>
                            </div>

                        </div>
                        <ShowQrCode @ref="showQrCode" Data="@accountBalanceInfo.AccountInfo.GetNextReceiveAddress()" />

                    </div>

                    <div class="row mt-4">
                        <div class="col-md-12 mb-md-0 mb-4">
                            <div class="card card-body form-control card-plain border-radius-lg d-flex align-items-center flex-row" data-cy="wallet-address">
                                <img class="address-image me-3 mb-0" src="/assets/img/bitcoin.svg" alt="Bitcoin">
                                <h6 class="address-text mb-0 overflow-x-auto">@accountBalanceInfo.AccountInfo.GetNextReceiveAddress()</h6>
                                <i @onclick="CopyNextReceiveAddress" class="ms-auto cursor-pointer user-select-none" data-cy="SHOW_QR_CODE_WALLET">
                                    <Icon IconName="copy"></Icon>
                                </i>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        }
        @if (activeTab == 3)
        {
            <div class="col-md-12 mb-lg-0 mb-4">
                <div class="card card-body p-3 mt-4">
                    <div class="d-flex align-items-center">
                        <span class="user-select-none">
                            <Icon IconName="calculator"></Icon>
                        </span>
                        <div class="h-100 ms-3">
                            <h5 class="mb-0 font-weight-bolder">
                                Addresses and Amounts
                            </h5>
                        </div>
                    </div>
                    <div class="table-responsive form-control mt-4">
                        @if (accountBalanceInfo.AccountInfo.AllAddresses().Any(address => address.Balance > 0))
                        {
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">Address</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">Amount</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">Path</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">UTXO count</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7" scope="col">View Raw Json</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var addressInfo in accountBalanceInfo.AccountInfo.AllAddresses())
                                    {
                                        var total = addressInfo.Balance;
                                        var count = addressInfo.UtxoData.Count();

                                        if (total > 0)
                                        {
                                            <tr @onclick="() => ToggleCollapse(addressInfo.Address)" class="clickable-row" data-cy="adress-row" aria-expanded="@IsExpanded(addressInfo.Address).ToString().ToLower()" aria-controls="@($"collapse-{addressInfo.Address}")">
                                                <td>@addressInfo.Address</td>
                                                <td>@Money.Satoshis(total).ToUnit(MoneyUnit.BTC) @network.CoinTicker</td>
                                                <td>@addressInfo.HdPath</td>
                                                <td>@count</td>
                                                <td>
                                                    <button class="btn btn-border" @onclick="() => ShowRawTransactionJson(addressInfo)">Show</button>
                                                </td>
                                            </tr>
                                            @if (IsExpanded(addressInfo.Address))
                                            {
                                                <tr>
                                                    <td colspan="5">
                                                        <div class="collapse show" data-cy="expend-amount" id="@($"collapse-{addressInfo.Address}")">
                                                            <div class="card card-body">
                                                                <!-- Inner table goes here -->
                                                                <div class="table-responsive form-control">
                                                                    <table class="table table-sm">
                                                                        <thead>
                                                                            <tr>
                                                                                <th scope="col">Coin</th>
                                                                                <th scope="col">Amount</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody>
                                                                            @foreach (var addressUtxoItem in addressInfo.UtxoData)
                                                                            {
                                                                                <tr>
                                                                                    <td>@($"{addressUtxoItem.outpoint}")</td>
                                                                                    <td>@Money.Satoshis(addressUtxoItem.value).ToUnit(MoneyUnit.BTC) @network.CoinTicker</td>
                                                                                </tr>
                                                                            }
                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div class="text-center">
                                <p class="text-muted">No addresses or amounts to display.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <RawTransactionModal RawTransactionJson="@rawTransactionJson" IsVisible="@showRawTransactionModal" IsVisibleChanged="HandleModalVisibility" />
    <RawTransactionModal RawTransactionJson="@transactionJson" IsVisible="@showTransactionJsonModal" IsVisibleChanged="HandleTransactionJsonModalVisibility" />


}


@code {


    private bool balanceSpinner;
    private bool createWalletSpinner;
    private bool testCoinsSpinner;
    private bool sendLoadSpinner;
    private bool sendConfirmSpinner;

    private string? showWalletWords;
    private string? showWalletWordsPassphrase;
    private string? showWalletPassword;
    private string? showWalletPasswordError;

    private string? newWalletWords;
    private string? newWalletWordsPassphrase;
    private string? newWalletPassword;
    private string passwordInputType = "password";
    private string passwordToggleText = "Show";

    private bool isNewWallet;
    private string createWalletTitle = "Create Wallet";
    private string createWalletDescription = "Generate a new wallet";

    private bool sendConfirmModal;
    private bool coinControlModal;
    private bool walletWordsModal;
    private bool walletWordsCreateModal;

    private bool isShowExtraWord;

    private bool backupConfirmation;
    private bool showBackupConfirmationError;

    private int activeTab = 1;


    private int feeRange = 0;
    private int FeePosition = 1;
    private SendInfo _sendInfo = new();

    private bool showRawTransactionModal;
    private string rawTransactionJson = string.Empty;
    private string transactionJson;
    private bool showTransactionJsonModal = false;

    private bool showPassphraseInput = false;
    private readonly AccountBalanceInfo accountBalanceInfo = new();

    private readonly FeeEstimations FeeEstimations = new();

    // Max index for the range input
    private readonly int FeeMin = 1;
    private int _feeMax = 3;

    DateTime _lastFeeRefresh = DateTime.MinValue;

    ShowQrCode showQrCode;

    readonly Dictionary<string, bool> collapseStates = new();
    private string btcBalanceInUsd;
    private readonly Dictionary<string, string> fiatValues = new();

    protected override async Task OnInitializedAsync()
    {
        if (hasWallet)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = _cacheStorage.GetUnconfirmedInboundFunds();
            accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);
            btcBalanceInUsd = await GetBtcValueInPreferredCurrency(Money.Satoshis(accountBalanceInfo.TotalBalance).ToUnit(MoneyUnit.BTC));
            await PrecomputeFiatValues();
        }

        await base.OnInitializedAsync();
    }


    private async Task RefreshBalance()
    {
        if (!balanceSpinner)
        {
            balanceSpinner = true;

            try
            {
                var accountInfo = storage.GetAccountInfo(network.Name);
                var unconfirmedInboundFunds = _cacheStorage.GetUnconfirmedInboundFunds();

                await _walletOperations.UpdateDataForExistingAddressesAsync(accountInfo);

                await _walletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

                storage.SetAccountInfo(network.Name, accountInfo);

                // lets log the entire account class to see what has changed
                Logger.LogInformation(JsonSerializer.Serialize(accountInfo, new JsonSerializerOptions { WriteIndented = true }));

                var utxos = accountInfo.AllUtxos()
                    .Select(x => x.outpoint.ToString()).ToList();

                var spentToUpdate = unconfirmedInboundFunds
                    .RemoveAll(x => utxos.Contains(x.outpoint.ToString()));

                if (spentToUpdate > 0)
                    _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInboundFunds);

                accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInboundFunds);

                showQrCode?.SetQRCode(accountBalanceInfo.AccountInfo.GetNextReceiveAddress());
            }
            catch (Exception e)
            {
                notificationComponent.ShowErrorMessage(e.Message, e);
            }
            finally
            {
                balanceSpinner = false;
                notificationComponent.ShowNotificationMessage("Balance refreshed successfully!");
            }
        }
    }

    private async Task ShowCreateWalletModal(string type)
    {
        isNewWallet = type == "new" ? true : false;
        createWalletTitle = type == "new" ? "Create Wallet" : "Recover Wallet";
        createWalletDescription = type == "new" ? "Generate a new wallet" : "Paste your wallet words";

        walletWordsCreateModal = true;
        StateHasChanged();
        await Task.Delay(10);
    }

    private void TogglePasswordVisibility()
    {
        if (passwordInputType == "password")
        {
            passwordInputType = "text";
            passwordToggleText = "Hide";
        }
        else
        {
            passwordInputType = "password";
            passwordToggleText = "Show";
        }
    }

    private async Task CreateWalletAsync()
    {
        if (string.IsNullOrEmpty(newWalletWords))
        {
            //walletWordsCreateModal = false;
            notificationComponent.ShowErrorMessage(
                isNewWallet
                ? "You need to generate your wallet words before continuing."
                : "Please enter or paste your wallet words to recover your wallet."
            );
            return;
        }

        if (string.IsNullOrEmpty(newWalletPassword))
        {
            //walletWordsCreateModal = false;
            notificationComponent.ShowErrorMessage("Don't forget to set a password for your wallet!");
            return;
        }

        // Only check backup confirmation for new wallets, not recovery
        if (isNewWallet && !backupConfirmation)
        {
            //showBackupConfirmationError = true;
            notificationComponent.ShowErrorMessage("Before you continue, please confirm that you've safely written down your wallet words.");
            return;
        }


        createWalletSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            // Validate wallet words format for recovery
            if (!isNewWallet && !ValidateWalletWords(newWalletWords))
            {
                throw new Exception("Invalid wallet words format. Please check your backup and try again.");
            }

            var data = new WalletWords { Words = newWalletWords.Trim(), Passphrase = newWalletWordsPassphrase };
            var accountInfo = _walletOperations.BuildAccountInfoForWalletWords(data);
            await _walletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

            var encrypted = await _encryptionService.EncryptData(data.ConvertToString(), newWalletPassword);

            _walletStorage.SaveWalletWords(new Angor.Shared.Models.Wallet { EncryptedData = encrypted });
            storage.SetAccountInfo(network.Name, accountInfo);
            accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, new List<UtxoData>());

            // pre-derive the angor wallet keys
            var founderKeyCollection = _derivationOperations.DeriveProjectKeys(data, _networkConfiguration.GetAngorKey());
            _walletStorage.SetFounderKeys(founderKeyCollection);

            hasWallet = _walletStorage.HasWallet();
            ClearWalletWords();

            walletWordsCreateModal = false;

            NavMenuState.NotifyStateChanged();

            notificationComponent.ShowNotificationMessage(isNewWallet ? "Wallet created successfully!" : "Wallet recovered successfully!");
        }
        catch (Exception e)
        {
            walletWordsCreateModal = false;
            notificationComponent.ShowErrorMessage($"Error: {e.Message}", e);
        }
        finally
        {
            createWalletSpinner = false;
        }
    }

    private bool ValidateWalletWords(string words)
    {
        if (string.IsNullOrWhiteSpace(words))
            return false;

        var wordsList = words.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        // Most HD wallets use 12 or 24 words
        return wordsList.Length == 12 || wordsList.Length == 24;
    }

    private async Task ShowWords()
    {
        if (string.IsNullOrEmpty(showWalletPassword))
        {
            notificationComponent.ShowNotificationMessage("Wallet password is null or empty");
            //throw new ArgumentNullException(nameof(showWalletPassword));
            return;
        }


        var wallet = _walletStorage.GetWallet();
        var walletData = await _encryptionService.DecryptData(wallet.EncryptedData, showWalletPassword);

        if (string.IsNullOrEmpty(walletData))
        {
            // invalid password
            showWalletPasswordError = "Invaid password";
            return;
        }

        var data = WalletWords.ConvertFromString(walletData);
        showWalletWords = data.Words;
        showWalletWordsPassphrase = data.Passphrase;
        data = null;
        StateHasChanged();
    }

    private async Task CopyWordsToClibboard()
    {
        if (string.IsNullOrEmpty(showWalletWords))
        {
            throw new InvalidOperationException();
        }

        await _clipboardService.WriteTextAsync(showWalletWords);
        ClearWalletWords();
        StateHasChanged();
    }

    private void ClearWalletWords()
    {
        showWalletWords = null;
        showWalletWordsPassphrase = null;
        newWalletWords = null;
        newWalletWordsPassphrase = null;
        newWalletPassword = null;
        showWalletPassword = null;
        backupConfirmation = false;
        showBackupConfirmationError = false;
    }

    private void WalletWordsClose()
    {
        showWalletWords = null;
        backupConfirmation = false;
        showBackupConfirmationError = false;
        showWalletPasswordError = null;
        showWalletPassword = null;
        newWalletPassword = null;
    }

    private void DeleteWallet()
    {
        walletWordsModal = false;
        storage.DeleteAccountInfo(network.Name);
        _cacheStorage.DeleteUnconfirmedInfo();
        _walletStorage.DeleteWallet();
        hasWallet = _walletStorage.HasWallet();
        ClearWalletWords();
        StateHasChanged();

        NavMenuState.NotifyStateChanged();
    }

    private void GenerateNewWalletWords()
    {
        newWalletWords = _walletOperations.GenerateWalletWords();
    }

    public async Task CopyNextReceiveAddress()
    {
        var accountInfo = storage.GetAccountInfo(network.Name);
        var address = accountInfo.GetNextReceiveAddress();

        if (string.IsNullOrEmpty(address))
        {
            notificationComponent.ShowErrorMessage("New address was not created");
            return;
        }

        await _clipboardService.WriteTextAsync(address);
        notificationComponent.ShowNotificationMessage("Copied to clipboard!", 3);
    }

    private async Task RefreshFee()
    {
        // refresh fee if last refresh was 60 seconds ago

        if (_sendInfo.FeeRateSat == 0 || _lastFeeRefresh.AddSeconds(60) < DateTime.UtcNow)
        {
            var fees = await _walletOperations.GetFeeEstimationAsync();

            FeeEstimations.Fees = fees.ToList();

            _feeMax = FeeEstimations.Fees.Count;

            var feeItem = FeeEstimations?.Fees.MinBy(c => c.Confirmations);

            if (feeItem != null)
            {
                _sendInfo.FeeBlockCount = feeItem.Confirmations;
                _sendInfo.FeeRateSat = feeItem.FeeRate;
            }

            _lastFeeRefresh = DateTime.UtcNow;
        }
    }

    private async Task AskPassword()
    {
        if (string.IsNullOrEmpty(_sendInfo.SendToAddress))
        {
            notificationComponent.ShowErrorMessage("Specify a send to address");
            return;
        }

        if (_sendInfo.SendAmount == 0)
        {
            notificationComponent.ShowErrorMessage("Specify an amount");
            return;
        }

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(BuildSend);
        }
        else
        {
            await BuildSend();
        }
    }

    private async Task BuildSend()
    {
        if (string.IsNullOrEmpty(_sendInfo.SendToAddress)) throw new ArgumentNullException();
        if (_sendInfo.SendAmount == 0) throw new ArgumentNullException();

        sendLoadSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var accountInfo = storage.GetAccountInfo(network.Name);

            await _walletOperations.UpdateAccountInfoWithNewAddressesAsync(accountInfo);

            storage.SetAccountInfo(network.Name, accountInfo);

            await RefreshFee();

            if (FeeEstimations.Fees.Count == 0)
            {
                notificationComponent.ShowErrorMessage("Unable top calculate fee");
                return;
            }

            // by default select the highest fee
            var estimationsFee = FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[0];

            FeePosition = 1;

            _sendInfo.FeeBlockCount = estimationsFee.Confirmations;
            _sendInfo.FeeRateSat = estimationsFee.FeeRate;

            if (string.IsNullOrEmpty(_sendInfo.ChangeAddress))
            {
                _sendInfo.ChangeAddress = accountInfo.ChangeAddressesInfo.First(f => f.HasHistory == false).Address;
            }

            _sendInfo.SendFee = _walletOperations.CalculateTransactionFee(_sendInfo, accountInfo, estimationsFee.FeeRate);

            sendConfirmModal = true;
        }
        catch (Exception e)
        {
            passwordComponent.ClearPassword();
            sendLoadSpinner = false;
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            sendLoadSpinner = false;
        }

        StateHasChanged();
    }

    private async Task SendCoins()
    {
        if (!passwordComponent.HasPassword())
        {
            sendConfirmSpinner = false;
            sendConfirmModal = false;
            notificationComponent.ShowErrorMessage("Wallet password expired");
            return;
        }

        sendConfirmSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var words = await passwordComponent.GetWalletAsync();

            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = _cacheStorage.GetUnconfirmedInboundFunds();

            var res = await _walletOperations.SendAmountToAddress(words, _sendInfo);

            if (res.Success)
            {
                var pendingInbound = _walletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, res.Data);
                unconfirmedInfo.AddRange(pendingInbound);
                accountBalanceInfo.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);
                storage.SetAccountInfo(network.Name, accountInfo);
                _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInfo);
            }

            _sendInfo = new SendInfo();

            notificationComponent.ShowNotificationMessage("Sent complete!");
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            sendConfirmSpinner = false;
            sendConfirmModal = false;
            passwordComponent.ClearPassword();
        }
    }

    private void HandleCheckboxChange(UtxoData addressUtxoItem, string hdPath)
    {
        // Here you can handle the change
        // Note: replace AddressUtxoItem with the actual type of addressUtxoItem

        if (_sendInfo.SendUtxos.ContainsKey(addressUtxoItem.outpoint.ToString()))
        {
            _sendInfo.SendUtxos.Remove(addressUtxoItem.outpoint.ToString());
        }
        else
        {
            _sendInfo.SendUtxos.Add(addressUtxoItem.outpoint.ToString(), new UtxoDataWithPath { HdPath = hdPath, UtxoData = addressUtxoItem });
        }
    }

    private async Task FeeRangeChanged(ChangeEventArgs e)
    {
        // Here you can handle the fee range change
        // The new value is in e.Value

        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out var res))
            {
                if (res <= FeeEstimations.Fees.Count)
                {
                    var estimationsFee = FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    _sendInfo.FeeBlockCount = estimationsFee.Confirmations;
                    _sendInfo.FeeRateSat = estimationsFee.FeeRate;
                    var accountInfo = storage.GetAccountInfo(network.Name);

                    _sendInfo.SendFee = _walletOperations.CalculateTransactionFee(_sendInfo, accountInfo, estimationsFee.FeeRate);

                    StateHasChanged();
                }
            }
        }
    }

    private void showCoinControlModal()
    {
        coinControlModal = true;
        StateHasChanged();
    }

    private async Task GetTestCoins()
    {
        if (!CanGetTestCoins())
        {
            notificationComponent.ShowNotificationMessage("you already have too much test coins!");
            return;
        }

        testCoinsSpinner = true;

        try
        {
            var receiveAddress = accountBalanceInfo.AccountInfo.GetNextReceiveAddress();

            var res = await _httpClient.GetAsync($"https://faucettmp.angor.io/api/faucet/send/{receiveAddress}");

            res.EnsureSuccessStatusCode();

            await Task.Delay(TimeSpan.FromSeconds(1));

            await RefreshBalance();
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            testCoinsSpinner = false;
        }
    }

    private bool CanGetTestCoins()
    {
        if (network.NetworkType == NetworkType.Mainnet)
        {
            return false;
        }

        if (Money.Satoshis(accountBalanceInfo.TotalBalance + accountBalanceInfo.TotalUnconfirmedBalance).ToUnit(MoneyUnit.BTC) > 100)
        {
            return false;
        }

        return true;
    }

    void SetActiveTab(int tab)
    {
        activeTab = tab;
    }

    bool IsExpanded(string address)
    {
        return collapseStates.ContainsKey(address) ? collapseStates[address] : false;
    }

    void ToggleCollapse(string address)
    {
        if (collapseStates.ContainsKey(address))
            collapseStates[address] = !collapseStates[address];
        else
            collapseStates[address] = true;
    }

    private async Task PasteFromClipboard()
    {
        try
        {
            var text = await ClipboardService.ReadTextAsync();
            _sendInfo.SendToAddress = text;
            StateHasChanged(); // Refresh the UI to reflect the updated value
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to read clipboard contents");
        }
    }

    private void ClearAddress()
    {
        _sendInfo.SendToAddress = string.Empty;
    }

    private void ShowExtraWord(MouseEventArgs e)
    {
        isShowExtraWord = !isShowExtraWord;
    }

    public async Task<IReadOnlyList<string>> GetBtcValuesInPreferredCurrency(params decimal[] btcBalances)
    {
        return await _currencyService.GetBtcValuesInPreferredCurrency(btcBalances);
    }

    public async Task<string> GetBtcValueInPreferredCurrency(decimal btcBalance)
    {
        var results = await GetBtcValuesInPreferredCurrency(btcBalance);
        return results.FirstOrDefault() ?? "Error fetching value";
    }


    private async Task PrecomputeFiatValues()
    {
        fiatValues.Clear();

        var btcBalance = Money.Satoshis(accountBalanceInfo.TotalBalance).ToUnit(MoneyUnit.BTC);

        var fiatValuesList = await _currencyService.GetBtcValuesInPreferredCurrency(btcBalance);

        if (fiatValuesList == null || !fiatValuesList.Any())
        {
            Logger.LogError("Failed to fetch the fiat value for the total balance.");
            return;
        }

        fiatValues["TotalBalance"] = fiatValuesList.First();

        Logger.LogInformation($"Fiat value for total balance: {fiatValuesList.First()}");
    }


    private void ShowRawTransactionJson(AddressInfo addressInfo)
    {
        rawTransactionJson = GetRawTransactionJson(addressInfo);
        showRawTransactionModal = true;
    }

    private void HandleModalVisibility(bool isVisible)
    {
        showRawTransactionModal = isVisible;
    }

    private string GetRawTransactionJson(AddressInfo addressInfo)
    {
        var options = new JsonSerializerOptions { WriteIndented = true };
        return JsonSerializer.Serialize(addressInfo, options);
    }

    private async Task CopyStringToClipboard(string msg)
    {
        await _clipboardService.WriteTextAsync(msg);
        notificationComponent.ShowNotificationMessage("Copied to clipboard!", 3);
        StateHasChanged();
    }

    private async Task PrepareTransactionJson()
    {
        var transactionDetails = new
        {
            Amount = _sendInfo.SendAmount,
            ToAddress = _sendInfo.SendToAddress,
            Fee = _sendInfo.SendFee,
            FeeRate = $"{_sendInfo.FeeRate} sats per byte for {_sendInfo.FeeBlockCount} block confirmations",
            ChangeAddress = _sendInfo.ChangeAddress,
            Inputs = _sendInfo.SendUtxos.Select(u => new
            {
                Address = u.Value.UtxoData.address,
                Amount = Money.Satoshis(u.Value.UtxoData.value).ToUnit(MoneyUnit.BTC),
                Outpoint = u.Key,
                CoinTicker = network.CoinTicker
            })
        };

        transactionJson = JsonSerializer.Serialize(transactionDetails, new JsonSerializerOptions { WriteIndented = true });
    }


    private async Task ShowTransactionJson()
    {
        await PrepareTransactionJson();
        showTransactionJsonModal = true;
    }

    private void HandleTransactionJsonModalVisibility(bool isVisible)
    {
        showTransactionJsonModal = isVisible;
    }




}