@page "/recover/{ProjectId}"

@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Client.Services
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Angor.Shared.Services
@using Angor.Shared.Utilities
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders
@using Angor.Client.Models

@inject IClientStorage storage;
@inject ICacheStorage _cacheStorage;
@inject IIndexerService _IndexerService
@inject INetworkConfiguration _NetworkConfiguration
@inject IDerivationOperations _derivationOperations
@inject IWalletOperations _WalletOperations
@inject IInvestorTransactionActions _InvestorTransactionActions
@inject ILogger<Recover> Logger;
@inject ICurrencyService _currencyService


@inherits BaseComponent

<NotificationComponent @ref="notificationComponent"/>
<PasswordComponent @ref="passwordComponent"/>


@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}
<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none">
                    <Icon IconName="recovery" Height="42" Width="42"/>
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Recover funds
                    </h5>
                    <p class="mb-0 font-weight-normal text-sm">
                        Project ID: <span id="transactionID">@ProjectId</span>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-4">

    <div class="card card-body position-relative">
        <p style="margin-bottom: 20px;">
            Transaction ID: <span id="transactionID">@StageInfo.TransactionInfo?.TransactionId</span> |
            <a href="@explorerLink" target="_blank" style="margin-left: 10px;">View on explorer</a>
        </p>
        
        <p>Total funds to recover = @Money.Satoshis(StageInfo.TotalSpendable).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>

        @if (trxNotFound)
        {
            <p class="alert alert-danger">Transaction was not found it may still be confirming</p>
        }

        @if (firstTimeRefreshSpinner && refreshSpinner)
        {
            <div class="d-flex justify-content-center">
                <div class="loader"></div>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-between">
                <div>
                    @if (!refreshSpinner)
                    {
                        @if (StageInfo.CanRelease)
                        {
                            <p>Total funds in penalty = @(Money.Satoshis(StageInfo.TotalInPenalty).ToUnit(MoneyUnit.BTC)) @network.CoinTicker</p>
                        }

                        @if (StageInfo.CanRecover && !StageInfo.EndOfProject)
                        {
                            <button class="btn btn-border me-2" @onclick="PrepareToRecoverCoinsCheckPassword" disabled="@PrepareToRecoverCoinsModalSpinner">
                                @if (PrepareToRecoverCoinsModalSpinner)
                                {
                                    <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Recover Funds...</span>
                                }
                                else
                                {
                                    <span>Recover Funds</span>
                                }
                            </button>
                        }

                        @if (StageInfo.CanRelease)
                        {
                            <button class="btn btn-border me-2" @onclick="PrepareToReleaseCoinsCheckPassword" disabled="@PrepareToReleaseCoinsModalSpinner">
                                @if (PrepareToReleaseCoinsModalSpinner)
                                {
                                    <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Release Funds...</span>
                                }
                                else
                                {
                                    <span>Release Funds</span>
                                }
                            </button>
                        }

                        @if (StageInfo.EndOfProject && StageInfo.TotalSpendable > 0)
                        {
                            <button class="btn btn-border" @onclick="PrepareEndOfProjectCoinsCheckPassword" disabled="@PrepareEndOfProjectCoinsModalSpinner">
                                @if (PrepareEndOfProjectCoinsModalSpinner)
                                {
                                    <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>End of project...</span>
                                }
                                else
                                {
                                    <span>End of project</span>
                                }
                            </button>
                        }
                    }
                </div>

                <div>
                    <button class="btn btn-border" @onclick="RefreshInvestments" disabled="@refreshSpinner">
                        @if (refreshSpinner)
                        {
                            <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Refresh...</span>
                        }
                        else
                        {
                            <span>Refresh</span>
                        }
                    </button>
                </div>
            </div>
        }

        @if (StageInfo.Items.Count() > 0)
        {
            <div class="table-responsive form-control mt-4">
                <table class="table align-items-center mb-0">
                    <thead>
                    <tr>
                        <th>Stage </th>
                        <th>Amount</th>
                        <th>Status</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in StageInfo.Items)
                    {
                        <tr>
                            <td>@(item.StageIndex + 1)</td>
                            <td>@(_currencyService.ToBtc(item.Amount)) @network.CoinTicker</td>
                            <td>
                                @if (item.IsSpent)
                                {
                                    <span class="text-primary">@item.SpentTo</span>
                                }
                                else
                                {
                                    <span class="text-success">Not Spent</span>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }

        @if (showRecoveryModal)
        {
            <div class="modal-wrapper">
                <div class="modal fade show d-block" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content modern-modal">

                            <div class="modal-header border-0 pb-0">
                                <div class="d-flex align-items-center">
                                    <Icon IconName="wallet" Height="32" Width="32" class="me-2"/>
                                    <h5 class="modal-title">Recovery Confirmation</h5>
                                </div>
                                <button class="btn-close-custom" @onclick="() => showRecoveryModal = false" disabled="@PrepareToRecoverCoinsConfirmSpinner">
                                    <Icon IconName="close-circle" Height="24" Width="24"/>
                                </button>
                            </div>

                            <div class="modal-body modal-body-scroll">

                                <p class="mb-1">The number of stages to be recovered is @StageInfo.Items.Count(s => !s.IsSpent) </p>

                                @{
                                    var totalAmount = StageInfo.Items
                                        .Where(s => !s.IsSpent)
                                        .Sum(s => Money.Satoshis(s.Amount).ToUnit(MoneyUnit.BTC));

                                    var coinTicker = network.CoinTicker;
                                }
                                <p class="mb-1">
                                    The amount to be recovered into a penalty = @totalAmount @coinTicker
                                </p>

                                <p class="mb-1">The penalty duration is @project.ProjectInfo.PenaltyDays days </p>

                                <p class="mb-1">
                                    <strong>Miner fee:</strong> @Money.Satoshis(recoveryTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                </p>

                                <hr>

                                <div class="mb-3">
                                    <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                                    <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="RecoveryFeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                                </div>

                                <hr>

                                <p class="mt-3">Are you sure you want to recover these funds?</p>
                            </div>


                            <div class="modal-footer">
                                <button type="button" class="btn btn-border" @onclick="() => showRecoveryModal = false" disabled="@PrepareToRecoverCoinsConfirmSpinner">Cancel</button>
                                <button type="button" class="btn btn-border" @onclick="RecoverCoins" disabled="@PrepareToRecoverCoinsConfirmSpinner">
                                    @if (PrepareToRecoverCoinsConfirmSpinner)
                                    {
                                        <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Confirm...</span>
                                    }
                                    else
                                    {
                                        <span>Confirm</span>
                                    }
                                </button>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        }

        @if (showRecoveryReleaseModal)
        {
            <div class="modal-wrapper">
                <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Release Recovery Confirmation</h5>
                                <button type="button" class="btn-close" @onclick="() => showRecoveryReleaseModal = false" disabled="@PrepareToReleaseCoinsConfirmSpinner"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">

                                <p class="mb-1">The amount to be released from the penalty = @Money.Satoshis(releaseRecoveryTransaction.Transaction.Outputs.Sum(s => s.Value)).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>

                                <p class="mb-1">Send to @releaseRecoveryTransaction.Transaction.Outputs[0].ScriptPubKey.GetDestinationAddress(_NetworkConfiguration.GetNetwork()) </p>

                                <p class="mb-1">
                                    <strong>Miner fee:</strong> @Money.Satoshis(releaseRecoveryTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                </p>

                                <hr>

                                <div class="mb-3">
                                    <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                                    <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="ReleaseFeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                                </div>

                                <hr>

                                <p class="mt-3">Are you sure you want to release these funds from the penalty?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-border" @onclick="() => showRecoveryReleaseModal = false" disabled="@PrepareToReleaseCoinsConfirmSpinner">Cancel</button>
                                <button type="button" class="btn btn-border" @onclick="ReleaseCoins" disabled="@PrepareToReleaseCoinsConfirmSpinner">
                                    @if (PrepareToReleaseCoinsConfirmSpinner)
                                    {
                                        <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Confirm...</span>
                                    }
                                    else
                                    {
                                        <span>Confirm</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (showEndOfProjectModal)
        {
            <div class="modal-wrapper">
                <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">End Of project Confirmation</h5>
                                <button type="button" class="btn-close" @onclick="() => showEndOfProjectModal = false" disabled="@PrepareEndOfProjectCoinsConfirmSpinner"></button>
                            </div>
                            <div class="modal-body modal-body-scroll">

                                <p class="mb-1">The amount to claim back after project ended = @Money.Satoshis(endOfProjectTransaction.Transaction.Outputs.Sum(s => s.Value)).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>

                                <p class="mb-1">Send to @endOfProjectTransaction.Transaction.Outputs[0].ScriptPubKey.GetDestinationAddress(_NetworkConfiguration.GetNetwork()) </p>

                                <p class="mb-1">
                                    <strong>Miner fee:</strong> @Money.Satoshis(endOfProjectTransaction?.TransactionFee ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                </p>

                                <hr>

                                <div class="mb-3">
                                    <label for="feeRange" class="form-label">Feerate for @feeData.SelectedFeeEstimation.Confirmations blocks is @feeData.SelectedFeeEstimation.FeeRate sats</label>
                                    <input type="range" class="form-range" id="feeRange" @bind="feeData.FeePosition" @oninput="EndOfProjectFeeRangeChanged" min="@feeData.FeeMin" max="@feeData.FeeMax">
                                </div>

                                <hr>

                                <p class="mt-3">Are you sure you want to claim these funds?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-border" @onclick="() => showEndOfProjectModal = false" disabled="@PrepareEndOfProjectCoinsConfirmSpinner">Cancel</button>
                                <button type="button" class="btn btn-border" @onclick="EndOfProjectCoins" disabled="@PrepareEndOfProjectCoinsConfirmSpinner">
                                    @if (PrepareEndOfProjectCoinsConfirmSpinner)
                                    {
                                        <span class=" spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Confirm...</span>
                                    }
                                    else
                                    {
                                        <span>Confirm</span>
                                    }

                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter] public string ProjectId { get; set; }
    private InvestorProject project;

    private bool showRecoveryModal = false;
    private bool showRecoveryReleaseModal = false;
    private bool showEndOfProjectModal = false;

    private bool refreshSpinner = false;
    private bool firstTimeRefreshSpinner = false;
    private bool PrepareToRecoverCoinsModalSpinner = false;
    private bool PrepareToRecoverCoinsConfirmSpinner = false;

    private bool PrepareToReleaseCoinsModalSpinner = false;
    private bool PrepareToReleaseCoinsConfirmSpinner = false;

    private bool PrepareEndOfProjectCoinsModalSpinner = false;
    private bool PrepareEndOfProjectCoinsConfirmSpinner = false;

    private Transaction? investmentTransaction;
    private Transaction? unsignedRecoveryTransaction;
    private TransactionInfo? recoveryTransaction;
    private TransactionInfo? releaseRecoveryTransaction;
    private TransactionInfo? endOfProjectTransaction;

    StageData StageInfo = new();
    string explorerLink;

    private FeeData feeData = new();

    private bool trxNotFound = false;

    public class StageData
    {
        public QueryTransaction? TransactionInfo;
        public long TotalSpendable;
        public long TotalInPenalty;
        public bool CanRecover;
        public bool CanRelease;
        public bool EndOfProject;

        public List<StageDataTrx> Items = new();
    }

    public class StageDataTrx
    {
        public int StageIndex;

        public int Outputindex;
        public string OutputAddress;
        public long Amount; // Store amount in satoshis
        public bool IsSpent;
        public string SpentTo;

        public ProjectScriptType ProjectScriptType;
    }

    protected override async Task OnInitializedAsync()
    {
        project = storage.GetInvestmentProjects().First(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

        firstTimeRefreshSpinner = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (hasWallet)
            {
                await RefreshInvestments();
            }
        }
    }

    private async Task RefreshInvestments()
    {
        refreshSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            await FindInvestments();

            await CheckSpentFund();
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            refreshSpinner = false;
            firstTimeRefreshSpinner = false;
        }

        StateHasChanged();
        await Task.Delay(10);
    }

    private async Task FindInvestments()
    {
        if (StageInfo.TransactionInfo != null)
        {
            // we already fetched the trx info
            return;
        }

        var trxs = await _IndexerService.GetInvestmentsAsync(project.ProjectInfo.ProjectIdentifier);

        var trx = trxs.FirstOrDefault(f => f.TransactionId == project.TransactionId);

        if (trx == null)
        {
            explorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{project.TransactionId}";
            trxNotFound = true;
            return;
        }

        trxNotFound = false;

        if (investmentTransaction == null)
        {
            var trxHex = await _IndexerService.GetTransactionHexByIdAsync(project.TransactionId);
            investmentTransaction = network.CreateTransaction(trxHex);
        }

        var trxInfo = await _IndexerService.GetTransactionInfoByIdAsync(trx.TransactionId);

        StageInfo.TransactionInfo = trxInfo;
        lastCheck = DateTime.UtcNow;

        explorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{trx.TransactionId}";

        StageInfo.Items.Clear();

        int stageIndex = 0;
        foreach (var stageInfo in project.ProjectInfo.Stages)
        {
            var output = trxInfo.Outputs.First(f => f.Index == stageIndex + 2);

            var insert = new StageDataTrx
            {
                OutputAddress = output.Address,
                Outputindex = stageIndex + 2,
                Amount = output.Balance, // Store balance in satoshis
                StageIndex = stageIndex,
                IsSpent = false,
            };

            StageInfo.Items.Add(insert);

            stageIndex++;
        }
    }

    DateTime lastCheck = DateTime.UtcNow;

    private async Task CheckSpentFund()
    {
        if (StageInfo.TransactionInfo == null)
        {
            return;
        }

        if ((DateTime.UtcNow - lastCheck).Minutes > 1)
        {
            var trxInfo = await _IndexerService.GetTransactionInfoByIdAsync(StageInfo.TransactionInfo.TransactionId);
            StageInfo.TransactionInfo = trxInfo;
            lastCheck = DateTime.UtcNow;
        }
        else
        {
            await Task.Delay(500); // fake
        }

        var unconfirmedOutbound = _cacheStorage.GetUnconfirmedOutboundFunds();
        bool modified = false;

        foreach (var infoOutput in StageInfo.TransactionInfo.Outputs)
        {
            if (!string.IsNullOrEmpty(infoOutput.SpentInTransaction))
            {
                modified |= LinqExtension.Remove(unconfirmedOutbound, new Outpoint(StageInfo.TransactionInfo.TransactionId, infoOutput.Index));
            }
        }

        if (modified)
        {
            _cacheStorage.SetUnconfirmedOutboundFunds(unconfirmedOutbound);
        }

        var penaltyExpieryDate = Utils.UnixTimeToDateTime(StageInfo.TransactionInfo.Timestamp).AddDays(project.ProjectInfo.PenaltyDays);

        foreach (var item in StageInfo.Items)
        {
            if (LinqExtension.Contains(unconfirmedOutbound, new Outpoint(StageInfo.TransactionInfo.TransactionId, item.Outputindex)))
            {
                item.IsSpent = true;
                item.SpentTo = "pending confirmations";
                item.ProjectScriptType = new ProjectScriptType { ScriptType = ProjectScriptTypeEnum.Unknown };

                continue;
            }

            var output = StageInfo.TransactionInfo.Outputs.ElementAt(item.Outputindex);

            if (!string.IsNullOrEmpty(output.SpentInTransaction))
            {
                item.IsSpent = true;

                if (output.SpentInTransaction == project.RecoveryTransactionId)
                {
                    if (!string.IsNullOrEmpty(project.RecoveryReleaseTransactionId))
                    {
                        item.SpentTo = "Recovered after penalty";
                        item.ProjectScriptType = new ProjectScriptType { ScriptType = ProjectScriptTypeEnum.Unknown };
                    }
                    else
                    {
                        item.ProjectScriptType = new ProjectScriptType { ScriptType = ProjectScriptTypeEnum.InvestorWithPenalty };
                        var days = (penaltyExpieryDate - DateTime.Now).TotalDays;
                        item.SpentTo = days > 0 ? $"Penalty, released in {days.ToString("0.0")} days" : "Penalty can be released";
                    }
                }
                else
                {
                    // try to resolve the destination
                    var spentInTransaction = await _IndexerService.GetTransactionInfoByIdAsync(output.SpentInTransaction);

                    var input = spentInTransaction?.Inputs.FirstOrDefault(input => input.InputTransactionId == StageInfo.TransactionInfo.TransactionId && input.InputIndex == item.Outputindex);

                    if (input != null && investmentTransaction != null)
                    {
                        item.ProjectScriptType = _InvestorTransactionActions.DiscoverUsedScript(project.ProjectInfo, investmentTransaction, item.StageIndex, input.WitScript);

                        switch (item.ProjectScriptType.ScriptType)
                        {
                            case ProjectScriptTypeEnum.Founder:
                            {
                                item.SpentTo = "Spent by founder";
                                break;
                            }
                            case ProjectScriptTypeEnum.InvestorWithPenalty:
                            {
                                var days = (penaltyExpieryDate - DateTime.Now).TotalDays;
                                item.SpentTo = days > 0 ? $"Penalty, released in {days.ToString("0.0")} days" : "Penalty can be released";
                                break;
                            }
                            case ProjectScriptTypeEnum.EndOfProject:
                            case ProjectScriptTypeEnum.InvestorNoPenalty:
                            {
                                item.SpentTo = $"Spent by investor";
                                break;
                            }
                        }
                    }
                }
            }
        }

        StageInfo.CanRecover = StageInfo.Items.Any(a => a.IsSpent == false);
        StageInfo.TotalSpendable = StageInfo.Items.Where(a => !a.IsSpent).Sum(a => a.Amount);
        StageInfo.CanRelease = (StageInfo.Items.Any(a => a.ProjectScriptType?.ScriptType == ProjectScriptTypeEnum.InvestorWithPenalty) && DateTime.UtcNow > penaltyExpieryDate);
        StageInfo.TotalInPenalty = StageInfo.Items.Where(t => t.ProjectScriptType?.ScriptType == ProjectScriptTypeEnum.InvestorWithPenalty).Sum(t => t.Amount);
        StageInfo.EndOfProject = project.ProjectInfo.ExpiryDate < DateTime.Now;
    }

    private void AddTransactionToPending(Transaction transaction)
    {
        var accountInfo = storage.GetAccountInfo(network.Name);
        var unconfirmedInbound = _cacheStorage.GetUnconfirmedInboundFunds();
        var unconfirmedOutbound = _cacheStorage.GetUnconfirmedOutboundFunds();

        unconfirmedInbound.AddRange(_WalletOperations.UpdateAccountUnconfirmedInfoWithSpentTransaction(accountInfo, transaction));
        unconfirmedOutbound.AddRange(transaction.Inputs.Select(_ => new Outpoint(_.PrevOut.Hash.ToString(), (int)_.PrevOut.N)));

        storage.SetAccountInfo(network.Name, accountInfo);
        _cacheStorage.SetUnconfirmedInboundFunds(unconfirmedInbound);
        _cacheStorage.SetUnconfirmedOutboundFunds(unconfirmedOutbound);
    }

    private async Task PrepareToRecoverCoinsCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(PrepareToRecoverCoins);
        }
        else
        {
            await PrepareToRecoverCoins();
        }
    }

    private async Task PrepareToRecoverCoins()
    {
        PrepareToRecoverCoinsModalSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            var accountInfo = storage.GetAccountInfo(network.Name);
            var words = await passwordComponent.GetWalletAsync();

            var investorPrivateKey = _derivationOperations.DeriveInvestorPrivateKey(words, project.ProjectInfo.FounderKey);

            unsignedRecoveryTransaction = _InvestorTransactionActions.AddSignaturesToRecoverSeederFundsTransaction(project.ProjectInfo, investmentTransaction, project.SignaturesInfo, Encoders.Hex.EncodeData(investorPrivateKey.ToBytes()));

            // remove outputs that have been spent
            List<TxOut> removeTxout = new();
            List<TxIn> removeTxin = new();
            foreach (var item in StageInfo.Items)
            {
                if (item.IsSpent)
                {
                    removeTxout.Add(unsignedRecoveryTransaction.Outputs[item.StageIndex]);
                    removeTxin.Add(unsignedRecoveryTransaction.Inputs[item.StageIndex]);
                }
            }

            foreach (var txOut in removeTxout) unsignedRecoveryTransaction.Outputs.Remove(txOut);
            foreach (var txIn in removeTxin) unsignedRecoveryTransaction.Inputs.Remove(txIn);

            // add fee to the recovery trx
            recoveryTransaction = _WalletOperations.AddFeeAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedRecoveryTransaction, words, accountInfo, feeData.SelectedFeeEstimation.FeeRate);

            Logger.LogInformation($"recoveryTransaction={recoveryTransaction.Transaction.GetHash().ToString()}");

            showRecoveryModal = true;
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            PrepareToRecoverCoinsModalSpinner = false;
        }

        StateHasChanged();
    }

    private async Task RecoveryFeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showRecoveryModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    var words = await passwordComponent.GetWalletAsync();

                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);

                    recoveryTransaction = _WalletOperations.AddFeeAndSignTransaction(accountInfo.GetNextChangeReceiveAddress(), unsignedRecoveryTransaction, words, accountInfo, feeData.SelectedFeeEstimation.FeeRate);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task RecoverCoins()
    {
        PrepareToRecoverCoinsConfirmSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            showRecoveryModal = false;

            storage.UpdateInvestmentProject(project);

            var response = await _WalletOperations.PublishTransactionAsync(network, recoveryTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            // the last output is the change so no penalty on that output
            var totalsats = recoveryTransaction.Transaction.Outputs.SkipLast(1).Sum(s => s.Value.Satoshi);

            project.RecoveryTransactionId = recoveryTransaction.Transaction.GetHash().ToString();
            project.AmountInRecovery = totalsats;

            storage.UpdateInvestmentProject(project);

            AddTransactionToPending(recoveryTransaction.Transaction);

            notificationComponent.ShowNotificationMessage("Done", 1);
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            PrepareToRecoverCoinsConfirmSpinner = false;
            passwordComponent.ClearPassword();
        }
    }

    private async Task PrepareToReleaseCoinsCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(PrepareToReleaseCoins);
        }
        else
        {
            await PrepareToReleaseCoins();
        }
    }

    private async Task PrepareToReleaseCoins()
    {
        PrepareToReleaseCoinsModalSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            var accountInfo = storage.GetAccountInfo(network.Name);
            var words = await passwordComponent.GetWalletAsync();

            var investorPrivateKey = _derivationOperations.DeriveInvestorPrivateKey(words, project.ProjectInfo.FounderKey);

            if (recoveryTransaction == null)
            {
                recoveryTransaction = new TransactionInfo();

                var trxHex = await _IndexerService.GetTransactionHexByIdAsync(project.RecoveryTransactionId);
                recoveryTransaction.Transaction = network.CreateTransaction(trxHex);
            }

            releaseRecoveryTransaction = _InvestorTransactionActions.BuildAndSignRecoverReleaseFundsTransaction(project.ProjectInfo, investmentTransaction, recoveryTransaction.Transaction,
                accountInfo.GetNextChangeReceiveAddress(), feeData.SelectedFeeEstimation, Encoders.Hex.EncodeData(investorPrivateKey.ToBytes()));

            Logger.LogInformation($"recoveryReleaseTransactionId={releaseRecoveryTransaction.Transaction.GetHash().ToString()}");

            showRecoveryReleaseModal = true;
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            PrepareToReleaseCoinsModalSpinner = false;
        }

        StateHasChanged();
    }

    private async Task ReleaseFeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showRecoveryReleaseModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);
                    var words = await passwordComponent.GetWalletAsync();

                    var investorPrivateKey = _derivationOperations.DeriveInvestorPrivateKey(words, project.ProjectInfo.FounderKey);

                    releaseRecoveryTransaction = _InvestorTransactionActions.BuildAndSignRecoverReleaseFundsTransaction(project.ProjectInfo, investmentTransaction, recoveryTransaction.Transaction,
                        accountInfo.GetNextChangeReceiveAddress(), feeData.SelectedFeeEstimation, Encoders.Hex.EncodeData(investorPrivateKey.ToBytes()));

                    StateHasChanged();
                }
            }
        }
    }

    private async Task ReleaseCoins()
    {
        PrepareToReleaseCoinsConfirmSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            showRecoveryReleaseModal = false;

            storage.UpdateInvestmentProject(project);

            var response = await _WalletOperations.PublishTransactionAsync(network, releaseRecoveryTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            project.RecoveryReleaseTransactionId = releaseRecoveryTransaction.Transaction.GetHash().ToString();
            storage.UpdateInvestmentProject(project);

            AddTransactionToPending(releaseRecoveryTransaction.Transaction);

            notificationComponent.ShowNotificationMessage("Done", 1);
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            PrepareToReleaseCoinsConfirmSpinner = false;
            passwordComponent.ClearPassword();
        }
    }

    private async Task PrepareEndOfProjectCoinsCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(PrepareEndOfProjectCoins);
        }
        else
        {
            await PrepareEndOfProjectCoins();
        }
    }

    private async Task PrepareEndOfProjectCoins()
    {
        PrepareEndOfProjectCoinsModalSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var fetchFees = await _WalletOperations.GetFeeEstimationAsync();
            feeData.FeeEstimations.Fees.Clear();
            feeData.FeeEstimations.Fees.AddRange(fetchFees);
            feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.First();

            var accountInfo = storage.GetAccountInfo(network.Name);
            var words = await passwordComponent.GetWalletAsync();

            var investorPrivateKey = _derivationOperations.DeriveInvestorPrivateKey(words, project.ProjectInfo.FounderKey);

            var fromStage = StageInfo.Items.First(f => f.IsSpent == false);

            endOfProjectTransaction = _InvestorTransactionActions.RecoverEndOfProjectFunds(investmentTransaction.ToHex(network.Consensus.ConsensusFactory), project.ProjectInfo, fromStage.StageIndex,
                accountInfo.GetNextChangeReceiveAddress(), Encoders.Hex.EncodeData(investorPrivateKey.ToBytes()), feeData.SelectedFeeEstimation);

            Logger.LogInformation($"EndOfProjectTransactionId={endOfProjectTransaction.Transaction.GetHash().ToString()}");

            showEndOfProjectModal = true;
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            PrepareEndOfProjectCoinsModalSpinner = false;
        }

        StateHasChanged();
    }

    private async Task EndOfProjectFeeRangeChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (selected != null)
        {
            if (int.TryParse(selected, out int res))
            {
                if (res <= feeData.FeeEstimations.Fees.Count)
                {
                    if (!passwordComponent.HasPassword())
                    {
                        showEndOfProjectModal = false;
                        notificationComponent.ShowErrorMessage("Wallet password expired");
                        return;
                    }

                    feeData.SelectedFeeEstimation = feeData.FeeEstimations.Fees.OrderBy(fee => fee.Confirmations).ToList()[res - 1];

                    var accountInfo = storage.GetAccountInfo(network.Name);
                    var words = await passwordComponent.GetWalletAsync();

                    var investorPrivateKey = _derivationOperations.DeriveInvestorPrivateKey(words, project.ProjectInfo.FounderKey);

                    var fromStage = StageInfo.Items.First(f => f.IsSpent == false);

                    endOfProjectTransaction = _InvestorTransactionActions.RecoverEndOfProjectFunds(investmentTransaction.ToHex(network.Consensus.ConsensusFactory), project.ProjectInfo, fromStage.StageIndex,
                        accountInfo.GetNextChangeReceiveAddress(), Encoders.Hex.EncodeData(investorPrivateKey.ToBytes()), feeData.SelectedFeeEstimation);

                    StateHasChanged();
                }
            }
        }
    }

    private async Task EndOfProjectCoins()
    {
        PrepareEndOfProjectCoinsConfirmSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            showEndOfProjectModal = false;

            storage.UpdateInvestmentProject(project);

            var response = await _WalletOperations.PublishTransactionAsync(network, endOfProjectTransaction.Transaction);

            if (!response.Success)
            {
                notificationComponent.ShowErrorMessage(response.Message);
                return;
            }

            project.EndOfProjectTransactionId = endOfProjectTransaction.Transaction.GetHash().ToString();
            storage.UpdateInvestmentProject(project);

            AddTransactionToPending(endOfProjectTransaction.Transaction);

            notificationComponent.ShowNotificationMessage("Done", 1);
        }
        catch (Exception e)
        {
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            PrepareEndOfProjectCoinsConfirmSpinner = false;
            passwordComponent.ClearPassword();
        }
    }

}