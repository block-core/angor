@page "/recover/{ProjectId}"

@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Client.Services
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders

@inject HttpClient Http
@inject IClientStorage storage;
@inject IIndexerService _IndexerService
@inject INetworkConfiguration _NetworkConfiguration
@inject IDerivationOperations _derivationOperations
@inject IWalletOperations _WalletOperations
@inject IInvestorTransactionActions _InvestorTransactionActions
@inject ILogger<Recover> Logger;

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<h3>Recover funds</h3>

<div class="container">

    <NotificationComponent @ref="notificationComponent" />

    <p style="margin-bottom: 20px;">
        Project ID: <span id="transactionID">@ProjectId</span>
    </p>

    <p style="margin-bottom: 20px;">
        Transaction ID: <span id="transactionID">@StageInfo.Trxid</span> | 
        <a href="@explorerLink" target="_blank" style="margin-left: 10px;">View on explorer</a>
    </p>
    
    <p>Total funds to recover = @StageInfo.Items.Where(t => !t.IsSpent).Sum(t => t.Amount) BTC</p>

    <button class="btn btn-primary" @onclick="RecoverCoins">Recover Funds</button>

    <table class="table">
        <thead>
            <tr>
                <th>Stage Details</th>
                <th>Address</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in StageInfo.Items)
            {
                <tr>
                    <td>@item.Amount BTC</td>
                    <td>@item.OutputAddress</td>
                    <td>
                        @if (item.IsSpent)
                        {
                            <span class="text-primary">Spent</span>
                        }
                        else
                        {
                            <span class="text-success">Not Spent</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showRecoveryModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Recovery Confirmation</h5>
                        <button type="button" class="btn-close" @onclick="() => showRecoveryModal = false"></button>
                    </div>
                    <div class="modal-body">

                        <p class="mb-1">The number of stages to be recovered is @StageInfo.Items.Count(s => !s.IsSpent) </p>

                        <p class="mb-1">The amount to be recovered in to a penalty = @StageInfo.Items.Where(s=> !s.IsSpent).Sum(s=> s.Amount) BTC</p>

                        <p class="mb-1">The penalty duration is @((project.PenaltyDate - DateTime.UtcNow).Days) days </p>

                        <hr>
                        <p class="mt-3">Are you sure you want to recover these funds?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showRecoveryModal = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="RecoverFunds">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }
    private ProjectInfo project;

    private bool showRecoveryModal = false;
    private Transaction investmentTransaction; 
    private Transaction recoveryTransaction;
    StageData StageInfo = new();
    string explorerLink;

    public class StageData
    {
        public string Trxid;

        public List<StageDataTrx> Items = new ();
    }

    public class StageDataTrx
    {
        public int StageIndex;

        public int Outputindex;
        public string OutputAddress;
        public decimal Amount;
        public bool IsSpent;
    } 

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (hasWallet)
            {
                var operationResult = await notificationComponent.LongOperation(async () =>
                {
                    await FindInvestments();

                    await CheckSpentFund();

                    return new OperationResult { Success = true };

                });

                if (operationResult.Success)
                {
                    StateHasChanged();
                }
            }
        }
    }

    private async Task FindInvestments()
    {
        var network = _NetworkConfiguration.GetNetwork();

        project = storage.GetProjects().First(p => p.ProjectIdentifier == ProjectId);

        var trxs = await _IndexerService.GetInvestmentsAsync(project.ProjectIdentifier);

        var trxHex = trxs.First(f => f.ProjectIdentifier == ProjectId);

        investmentTransaction = network.CreateTransaction(trxHex.TrxHex);
        StageInfo.Trxid = trxHex.TrxId;

        explorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{trxHex.TrxId}";

        StageInfo.Items.Clear();

        int stageIndex = 0;
        foreach (var stageInfo in project.Stages)
        {
            var output = investmentTransaction.Outputs[stageIndex + 2];

            var insert = new StageDataTrx
            {
                OutputAddress = output.ScriptPubKey.WitHash.GetAddress(network).ToString(),
                Outputindex = stageIndex,
                Amount = output.Value.ToUnit(MoneyUnit.BTC),
                StageIndex = stageIndex,
                IsSpent = false
            };

            StageInfo.Items.Add(insert);

            stageIndex++;
        }
    }

    private async Task CheckSpentFund()
    {
        IndexerUrl indexer = _NetworkConfiguration.GetIndexerUrl();

        var url = $"/query/transaction/{StageInfo.Trxid}";

        Console.WriteLine($"fetching {url}");

        // todo: use indexer service
        var response = await Http.GetAsync(indexer.Url + url);
        var trx = await response.Content.ReadFromJsonAsync<QueryTransaction>();

        foreach (var item in StageInfo.Items)
        {
            var output = trx.Outputs.ElementAt(item.StageIndex + 2);

            if (!string.IsNullOrEmpty(output.SpentInTransaction))
            {
                item.IsSpent = true;
            }
        }
    }

    private async Task RecoverCoins()
    {
        var network = _NetworkConfiguration.GetNetwork();

        var operationResult = await notificationComponent.LongOperation(async () =>
        {
            var feeEstimation = await _WalletOperations.GetFeeEstimationAsync();

            var sigs = storage.GetSignaturess().First(p => p.ProjectIdentifier == ProjectId);
            var accountInfo = storage.GetAccountInfo(network.Name);

            var investorPrivateKey = _derivationOperations.DeriveInvestorPrivateKey(_walletStorage.GetWallet(), project.FounderKey);

            recoveryTransaction = _InvestorTransactionActions.AddSignaturesToRecoverSeederFundsTransaction(project, investmentTransaction, sigs, Encoders.Hex.EncodeData(investorPrivateKey.ToBytes()));

            // remove outputs that have been spent
            List<TxOut> removeTxout = new();
            List<TxIn> removeTxin = new();
            foreach (var item in StageInfo.Items)
            {
                if (item.IsSpent)
                {
                    removeTxout.Add(recoveryTransaction.Outputs[item.StageIndex]); 
                    removeTxin.Add(recoveryTransaction.Inputs[item.StageIndex]);
                }
            }

            foreach (var txOut in removeTxout) recoveryTransaction.Outputs.Remove(txOut);
            foreach (var txIn in removeTxin) recoveryTransaction.Inputs.Remove(txIn);

            // add fee to the recovery trx
            recoveryTransaction = _WalletOperations.AddFeeAndSignTransaction(accountInfo.ChangeAddressesInfo.First().Address, recoveryTransaction, _walletStorage.GetWallet(), accountInfo, feeEstimation.First());

            Logger.LogInformation($"recoveryTransaction={recoveryTransaction.ToHex(network.Consensus.ConsensusFactory)}");

            return new OperationResult { Success = true };
        });

        if (operationResult.Success)
        {
            showRecoveryModal = true;
        }
        else
        {
            notificationComponent.ShowErrorMessage(operationResult.Message);
        }
    }

    private async Task RecoverFunds()
    {
        var operationResult = await notificationComponent.LongOperation(async () =>
        {
            showRecoveryModal = false;

            var network = _NetworkConfiguration.GetNetwork();

            var response = await _WalletOperations.PublishTransactionAsync(network, recoveryTransaction);

            if (!response.Success)
                return response;

            return new OperationResult { Success = response.Success, Message = response.Message };
        });

        if (operationResult.Success)
        {
            notificationComponent.ShowNotificationMessage("Done", 1);
        }
        else
        {
            notificationComponent.ShowErrorMessage(operationResult.Message);
        }
    }
}
