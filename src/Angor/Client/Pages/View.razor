@page "/view/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Shared.Services
@using Angor.Client.Models
@using Nostr.Client.Messages

@inject IDerivationOperations _derivationOperations
@inject IClientStorage storage;
@inject ICacheStorage SessionStorage;
@inject NavigationManager NavigationManager
@inject INetworkConfiguration _NetworkConfiguration
@inject IClipboardService _clipboardService
@inject IIndexerService _IndexerService
@inject IRelayService _RelayService
@inject ISerializer serializer

@inherits BaseComponent
<NotificationComponent @ref="notificationComponent" />


<div class="row">

    @if (project?.ProjectInfo == null)
    {
        @if (findInProgress)
        {
            <div class="d-flex justify-content-center">
                <div class="loader"></div>
            </div>
        }
        else
        {
            <p><em>project not found...</em></p>
        }
    }
    else
    {
        <!-- Project Details Section -->
        <div class="card card-body p-0">
            @if (project.ProjectInfo.NostrPubKey != null)
            {
                var metadata = project.Metadata;


                <div class="card-header p-0 overflow-hidden position-relative">
                    <img class="card-img-top card-img-top-view" src="@(metadata?.Banner ?? "/assets/img/no-image.jpg")" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                    <img class="profile-image-view rounded-circle" src="@(metadata?.Picture ?? "/assets/img/no-image.jpg")" alt="Profile Picture" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                </div>


                <div class="p-4">
                    <div class="d-flex align-items-center justify-content-between mb-4">
                        <div class="d-flex align-items-center">
                            <span class="user-select-none">
                                <Icon IconName="view" Height="32" Width="32"></Icon>
                            </span>
                            <div class="h-100 ms-3">
                                <h5 class="mb-0 font-weight-bolder">
                                    <a href="/view/@project.ProjectInfo.ProjectIdentifier">@metadata?.Name</a>
                                </h5>
                            </div>
                        </div>
                    </div>

                    <p class="card-subtitle">@((MarkupString)metadata?.About)</p>

                    <div class="row align-items-center">
                        <div class="col-12 col-md-12 col-lg-8 order-2 order-md-2 mt-4">
                            <div class="form-control d-flex align-items-center">
                                <Icon IconName="explorer"></Icon>
                                <a class="ms-2" href="@projectExplorerLink" target="_blank">View the transaction on the explorer.</a>
                            </div>
                            @* <div class="form-control mt-1 d-flex align-items-center">
                    <Icon IconName="view"></Icon>
                    <p class="card-text ms-2">Project Identifier: @project.ProjectInfo.ProjectIdentifier</p>
                    </div>
                    <div class="form-control mt-1 d-flex align-items-center">
                    <Icon IconName="key"></Icon>
                    <p class="card-text ms-2">Founder Key: @project.ProjectInfo.FounderKey</p>
                    </div> *@
                            <div class="form-control mt-1 d-flex align-items-center">
                                <Icon IconName="balance"></Icon>
                                <p class="card-text ms-2">Target Amount: @project.ProjectInfo.TargetAmount @network.CoinTicker</p>
                            </div>
                            <div class="form-control mt-1 d-flex align-items-center">
                                <Icon IconName="calendar"></Icon>
                                <p class="card-text ms-2">Penalty duration: @project.ProjectInfo.PenaltyDays days</p>
                            </div>
                            <div class="form-control mt-1 d-flex align-items-center">
                                <Icon IconName="date"></Icon>
                                <p class="card-text ms-2">
                                    Project dates: @project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") - @project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy")
                                </p>
                            </div>

                        </div>
                        <div class="col-12 col-md-12 col-lg-4 order-1 order-md-1 d-flex justify-content-center align-items-center mt-4">
                            <div class="w-100">
                                @{
                                    int startsInDays = (project.ProjectInfo.StartDate - DateTime.Now).Days;

                                    if (startsInDays > 0)
                                    {
                                        <p class="card-text text-center">Starts in @startsInDays days</p>
                                    }
                                    else
                                    {
                                        int totalDays = (project.ProjectInfo.ExpiryDate - project.ProjectInfo.StartDate).Days;
                                        int currentDays = (DateTime.Now - project.ProjectInfo.StartDate).Days;
                                        currentDays = currentDays < 0 ? 0 : currentDays;
                                        currentDays = currentDays > totalDays ? totalDays : currentDays;

                                        if (totalDays > 0)
                                        {
                                            <div class="progress-container">
                                                <div role="progressbar" data-type="days" aria-valuenow="@currentDays" aria-valuemin="0" aria-valuemax="@totalDays" style="--day: @currentDays; --total: @totalDays;" data-day="@currentDays" data-total="@totalDays"></div>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>

                    <div class="row align-items-center">
                        <div class="col-12 col-lg-4 d-flex justify-content-center align-items-center mt-4 order-1 order-lg-1">
                            <div class="w-100">
                                <div class="progress-container">
                                    <div role="progressbar" data-type="percent" aria-valuenow="@projectStats.FundingProgressPercent" aria-valuemin="0" aria-valuemax="100" style="--value: @projectStats.FundingProgressPercent;"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-8 mt-4 order-2 order-lg-2">
                            @if (projectStats.Loading)
                            {
                                <div class="loader"></div>
                            }
                            else
                            {
                                <div class="form-control mt-1 d-flex align-items-center">
                                    <Icon IconName="calculator"></Icon>
                                    <p class="card-text ms-2">Total Raised: @Money.Satoshis(projectStats.TotalRaised).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                                </div>
                                <div class="form-control mt-1 d-flex align-items-center">
                                    <Icon IconName="users"></Icon>
                                    <p class="card-text ms-2">Total Investors: @projectStats.TotalInvestors</p>
                                </div>
                                @* <p class="card-text mb-0">Total Seeders: @projectStats.TotalSeeders</p>*@
                                <div class="form-control mt-1 d-flex align-items-center">
                                    <Icon IconName="calendar"></Icon>
                                    <p class="card-text ms-2">Time Left for Investing: @projectStats.TimeLeft days</p>
                                </div>
                            }
                        </div>
                    </div>

                </div>
            }
        </div>

        <!-- Stages Section -->


        <div class="card card-body mt-4">
            <div class="d-flex align-items-center">
                <span class="user-select-none">
                    <Icon IconName="stages"></Icon>
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Stages
                    </h5>
                </div>
            </div>
            <div class="table-responsive form-control mt-4">
                <table class="table align-items-center mb-0">
                    <thead>
                        <tr>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Stage </th>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Stage %</th>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Release Date</th>
                            <!-- Other headers -->
                        </tr>
                    </thead>
                    <tbody>
                        @for (int index = 0; index < project.ProjectInfo.Stages.Count; index++)
                        {
                            <tr>
                                <td>@(index + 1)</td>
                                <td>@project.ProjectInfo.Stages[index].AmountToRelease %</td>
                                <td>@project.ProjectInfo.Stages[index].ReleaseDate.ToString("dd/MM/yyyy")</td>
                                <!-- Other stage details -->
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>


        <!-- Seeders Section -->
        @*        <div class="card mb-3">
    <div class="card-header">
    <h4>Selected Seeders</h4>
    </div>
    <div class="card-body">
    @if (SelectedSeeders.Any())
    {
    <!-- Seeders table -->
    }
    else
    {
    <p><i class="bi bi-exclamation-triangle-fill"></i> No seeders yet.</p>
    }
    </div>
    </div>*@

        <!-- Actions Section -->

        <div class="card card-body mt-4">
            @if (founder)
            {
                <div class="text-center justify-content-center">
                    <Icon IconName="verified-check" Height="100" Width="100"></Icon>
                    <p class="mt-4 text-success">Congratulations, you are the founder!</p>

                    <div class="mb-3">
                        <!-- Buttons Spend Funds and Approve Signature next to each other -->
                        <NavLink href=@($"/spend/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-border me-2">Spend Funds</NavLink>
                        <NavLink href=@($"/signatures/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-border">Approve signature</NavLink>
                    </div>
                </div>
            }
            else if (invested)
            {
                <div class="text-center justify-content-center">
                    <Icon IconName="cup" Height="100" Width="100"></Icon>
                    <p class="mt-4">
                        Thank you for your investment in this project!

                        <a href="@myProjectExplorerLink" target="_blank">Track your transaction on the explorer.</a>
                    </p>

                    <button class="btn btn-danger mb-3" @onclick="RecoverFunds">Recover</button>
                </div>
            }
            else
            {
                <div class="text-center justify-content-center mt-4">
                    <Icon IconName="shield-star" Height="100" Width="100"></Icon>
                    <p class="mt-4">
                        Seize the opportunity to invest in this project.
                    </p>
                    <button class="btn btn-border mb-3" data-cy="INVEST_BUTTON" @onclick="InvestInProject">Invest Now</button>
                </div>
            }
        </div>


        <!-- Relays Section -->
        <div class="card mt-4">
            <div class="card-header">
                <h4>Nostr</h4>
            </div>
            <div class="card-body">
                @if (project.ProjectInfo.NostrPubKey != null)
                {
                    <div class="mb-3">
                        <label for="NostrPublicKey" class="form-label">Project NOSTR public key (hex)</label>
                        <div class="input-group">
                            <InputText id="NostrPublicKey" @bind-Value="project.ProjectInfo.NostrPubKey" class="form-control" placeholder="@project.ProjectInfo.NostrPubKey" readonly />
                            @if (founder)
                            {
                                <button @onclick="CopyNsecToClipboardAsyncCheckPassword" class="btn btn-success">Copy NSec to clipboard</button>
                            }
                        </div>
                    </div>
                }

                <br />
                <h6>Relays</h6>
                @foreach (var relay in NostrClients)
                {
                    <a href="@relay" target="_blank" class="d-block mb-2">
                        <i class="bi bi-globe"></i> @relay
                    </a>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private Project? project;

    private bool sendConfirmModal;

    string myProjectExplorerLink;
    string projectExplorerLink;

    private List<(string Hash, int Amount)> SelectedSeeders = new List<(string hash, int amount)>
    {
    { (new uint256().ToString(), 10) },
    { (new uint256().ToString(), 20) },
    };

    public class ProjectStats
    {
        public bool Loading { get; set; }
        public long TotalRaised { get; set; }
        public int TotalInvestors { get; set; }
        public int TotalSeeders { get; set; }
        public int TimeLeft { get; set; }
        public int FundingProgressPercent { get; set; }

    };

    ProjectStats projectStats = new ProjectStats
        {
            Loading = true,
            TimeLeft = 0,
            TotalInvestors = 0,
            TotalRaised = 0,
            TotalSeeders = 0,
            FundingProgressPercent = 0,
        };

    bool founder = false;
    bool invested = false;
    bool findInProgress = false;

    private List<string> NostrClients = new();

    protected override async Task OnInitializedAsync()
    {
        NostrClients = _NetworkConfiguration.GetDefaultRelayUrls().Select(_ => _.Url.ToString()).ToList();

        project = storage.GetInvestmentProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

        if (project is InvestorProject findProject)
        {
            invested = findProject.InvestedInProject(); // TODO need to scan for the invested projects when opening on a new browsers
            myProjectExplorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{findProject.TransactionId}";
        }
        else
        {
            project = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

            if (project != null)
            {
                founder = true;
            }
            else
            {
                project = SessionStorage.GetProjectById(ProjectId);

                if (project == null)
                {
                    findInProgress = true;

                    var projectIndexerData = await _IndexerService.GetProjectByIdAsync(ProjectId);

                    if (projectIndexerData != null)
                    {
                        project = new Project { CreationTransactionId = projectIndexerData.TrxId };
                        _RelayService.RequestProjectCreateEventsByPubKey(e =>
                        {
                            if (project != null)
                            {
                                switch (e)
                                {
                                    case { Kind: NostrKind.Metadata }:
                                        var nostrMetadata = serializer.Deserialize<ProjectMetadata>(e.Content);
                                        project.Metadata ??= nostrMetadata;
                                        break;
                                    case { Kind: NostrKind.ApplicationSpecificData }:
                                        var projectInfo = serializer.Deserialize<ProjectInfo>(e.Content);
                                        project.ProjectInfo ??= projectInfo;
                                        break;
                                }
                            }
                        }, () =>
                        {
                            findInProgress = false;
                            if (project.ProjectInfo != null)
                                SessionStorage.StoreProject(project);
                            StateHasChanged();
                        },
                        new[] { projectIndexerData.NostrPubKey });
                    }
                }
            }
        }

        if (project?.CreationTransactionId != null)
        {
            projectExplorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{project.CreationTransactionId}";

            await RefreshBalance();
        }
    }

    private async Task RefreshBalance()
    {
        try
        {
            projectStats.Loading = true;

            if (project?.ProjectInfo != null)
            {
                var data = await _IndexerService.GetProjectStatsAsync(project.ProjectInfo.ProjectIdentifier);

                if (data != null)
                {
                    projectStats.TotalInvestors = (int)data.InvestorCount;
                    projectStats.TotalRaised = data.AmountInvested;

                    projectStats.TimeLeft = (project.ProjectInfo.ExpiryDate - DateTime.UtcNow).Days;
                    if (projectStats.TimeLeft < 0)
                        projectStats.TimeLeft = 0;

                    var targetSat = Money.Coins(project.ProjectInfo.TargetAmount).Satoshi;
                    projectStats.FundingProgressPercent = (int)((projectStats.TotalRaised * 100) / targetSat);
                }
            }
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage(ex.Message);
        }
        finally
        {
            projectStats.Loading = false;
        }

    }

    private async Task RecoverFunds()
    {
        NavigationManager.NavigateTo($"/recover/{ProjectId}");
    }

    private async Task InvestInProject()
    {
        if (hasWallet)
            NavigationManager.NavigateTo($"/invest/{ProjectId}");
        else
            notificationComponent.ShowNotificationMessage("You must create a wallet if you want to invest");
    }

    private async Task CopyNsecToClipboardAsyncCheckPassword()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(CopyNsecToClipboardAsync);
        }
        else
        {
            await CopyNsecToClipboardAsync();
        }
    }

    private async Task CopyNsecToClipboardAsync()
    {
        if (project is FounderProject founderProject)
        {
            var words = await passwordComponent.GetWalletAsync();
            var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, founderProject.ProjectIndex);
            var nsec = NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes());
            await _clipboardService.WriteTextAsync(nsec);
            StateHasChanged();
        }
    }
}
