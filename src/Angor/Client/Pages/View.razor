@page "/view/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Services
@using Angor.Shared.Services
@using System.Text.Json
@using Angor.Client.Models
@using Nostr.Client.Messages

@inject IDerivationOperations DerivationOperations
@inject IWalletStorage WalletStorage;
@inject IClientStorage Storage;
@inject ICacheStorage SessionStorage;
@inject NavigationManager NavigationManager
@inject INetworkConfiguration NetworkConfiguration
@inject IClipboardService ClipboardService
@inject IIndexerService IndexerService
@inject IRelayService RelayService

@inherits BaseComponent

<div class="container mt-4">
    <h1>View Project</h1>

    <NotificationComponent @ref="NotificationComponent" />

    @if (_project == null)
    {
        @if (_findInProgress)
        {
            <div class="d-flex justify-content-center">
                <div class="loader"></div>
            </div>
        }
        else
        {
            <p><em>project not found...</em></p>    
        }
    }
    else
    {
        <!-- Project Details Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>@_project.ProjectInfo.ProjectIdentifier</h4>
            </div>
            <div class="card-body">

                @if (_project.ProjectInfo.NostrPubKey != null)
                {
                    var metadata = _project.Metadata;

                    if (metadata?.Banner != null)
                    {
                        <div class="card-header overflow-hidden">
                            <img class="card-img-top" src="@metadata.Banner" alt=""/>
                        </div>
                    }

                    <br/>
                    <h3 class="card-title">@metadata?.Name</h3>
                    <p class="card-subtitle">@metadata?.About</p>
                    <hr />
                }

                <a href="@_projectExplorerLink" target="_blank">View the transaction on the explorer.</a>
                <p class="card-text">Project Identifier: @_project.ProjectInfo.ProjectIdentifier</p>
                <p class="card-text">Founder Key: @_project.ProjectInfo.FounderKey</p>
                <p class="card-text">Target Amount: @_project.ProjectInfo.TargetAmount @Network.CoinTicker</p>
                <p class="card-text">Penalty duration: @_project.ProjectInfo.PenaltyDays days</p>

                <p class="card-text">
                    Project dates: @_project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") - @_project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy")
                </p>

                @{
                    int startsInDays = (_project.ProjectInfo.StartDate - DateTime.Now).Days;

                    if (startsInDays > 0)
                    {
                        <p class="card-text">Starts in @startsInDays days</p>
                    }
                    else
                    {
                        int totalDays = (_project.ProjectInfo.ExpiryDate - _project.ProjectInfo.StartDate).Days;
                        int currentDays = (DateTime.Now - _project.ProjectInfo.StartDate).Days;
                        currentDays = currentDays < 0 ? 0 : currentDays;
                        currentDays = currentDays > totalDays ? totalDays : currentDays;

                        var completePercent = 0;

                        if (totalDays > 0)
                            completePercent = (currentDays * 100) / totalDays;

                        <div class="progress mb-2">
                            <div class="progress-bar bg-info" role="progressbar" style="width: @completePercent%;" aria-valuenow="@completePercent" aria-valuemin="0" aria-valuemax="100">@currentDays/@totalDays days</div>
                        </div>
                    }

                 }
            </div>
        </div>

        <!-- Stats Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Stats</h4>
            </div>
            <div class="card-body">
                <!-- Progress bar section -->
                <div class="progress mb-2">
                    <div class="progress-bar" role="progressbar" style="width: @_projectStats.FundingProgressPercent%;" aria-valuenow="@_projectStats.FundingProgressPercent" aria-valuemin="0" aria-valuemax="100">@_projectStats.FundingProgressPercent%</div>
                </div>

                <!-- Additional details section -->
                <div class="row align-items-center">
                    <div class="col-md-8">
                        
                        @if (_projectStats.Loading)
                        {
                            <div class="loader"></div>
                        }
                        else
                        {
                            <p class="card-text mb-0">Total Raised: @Money.Satoshis(_projectStats.TotalRaised).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</p>
                            <p class="card-text mb-0">Total Investors: @_projectStats.TotalInvestors</p>
                           @* <p class="card-text mb-0">Total Seeders: @projectStats.TotalSeeders</p>*@
                            <p class="card-text mb-0">Time Left for Investing: @_projectStats.TimeLeft days</p>    
                        }
                        
                    </div>
                </div>
            </div>
        </div>

        <!-- Stages Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Stages</h4>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Stage </th>
                        <th>Stage %</th>
                        <th>Release Date</th>
                        <!-- Other headers -->
                    </tr>
                    </thead>
                    <tbody>
                        @for (int index = 0; index < _project.ProjectInfo.Stages.Count; index++)
                        {
                            <tr>
                                <td>@(index + 1)</td>
                                <td>@_project.ProjectInfo.Stages[index].AmountToRelease %</td>
                                <td>@_project.ProjectInfo.Stages[index].ReleaseDate.ToString("dd/MM/yyyy")</td>
                                <!-- Other stage details -->
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Seeders Section -->
@*        <div class="card mb-3">
            <div class="card-header">
                <h4>Selected Seeders</h4>
            </div>
            <div class="card-body">
                @if (SelectedSeeders.Any())
                {
                    <!-- Seeders table -->
                }
                else
                {
                    <p><i class="bi bi-exclamation-triangle-fill"></i> No seeders yet.</p>
                }
            </div>
        </div>*@

        <!-- Actions Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Actions</h4>
            </div>
            <div class="card-body">
                @if (_founder)
                {
                    <p>You are the founder.</p>

                    <div class="mb-3">
                        <!-- Buttons Spend Funds and Approve Signature next to each other -->
                        <NavLink href=@($"/spend/{_project.ProjectInfo.ProjectIdentifier}") class="btn btn-primary me-2">Spend Funds</NavLink>
                        <NavLink href=@($"/signatures/{_project.ProjectInfo.ProjectIdentifier}") class="btn btn-primary">Approve signature</NavLink>
                    </div>

                    @if (_project.ProjectInfo.NostrPubKey != null)
                    {
                        <div class="mb-3">
                            <label for="NostrPublicKey" class="form-label">Project NOSTR public key (hex)</label>
                            <div class="input-group">
                                <InputText id="NostrPublicKey" @bind-Value="_project.ProjectInfo.NostrPubKey" class="form-control" placeholder="@_project.ProjectInfo.NostrPubKey" readonly/>
                                <button @onclick="CopyWordsToClipboardAsync" class="btn btn-success">Copy NSec to clipboard</button>
                            </div>
                        </div>
                    }

                }
                else if (_invested)
                {
                    <p>You have already invested in this project.

                        <a href="@_myProjectExplorerLink" target="_blank">View the transaction on the explorer.</a>
                    </p>

                    <button class="btn btn-danger" @onclick="RecoverFunds">Recover</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="InvestInProject">Invest</button>
                }
            </div>
        </div>
      

        <!-- Relays Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Relays</h4>
            </div>
            <div class="card-body">
                @foreach (var relay in _nostrClients)
                {
                    <a href="@relay" target="_blank" class="d-block mb-2">
                        <i class="bi bi-globe"></i> @relay
                    </a>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private Project? _project;

    private bool _sendConfirmModal;

    string _myProjectExplorerLink;
    string _projectExplorerLink;

    private List<(string Hash, int Amount)> _selectedSeeders = new List<(string hash, int amount)>
    {
        { (new uint256().ToString(), 10) },
        { (new uint256().ToString(), 20) },
    };

    public class ProjectStats
    {
        public bool Loading { get; set; }
        public long TotalRaised { get; set; }
        public int TotalInvestors { get; set; }
        public int TotalSeeders { get; set; }
        public int TimeLeft { get; set; }
        public int FundingProgressPercent { get; set; }

    };

    ProjectStats _projectStats = new ProjectStats
    {
        Loading = true,
        TimeLeft = 0,
        TotalInvestors = 0,
        TotalRaised = 0,
        TotalSeeders = 0,
        FundingProgressPercent = 0,
    };

    bool _founder = false;
    bool _invested = false;
    bool _findInProgress = false;

    private List<string> _nostrClients = new ();

    protected override async Task OnInitializedAsync()
    {
        _nostrClients = NetworkConfiguration.GetDefaultRelayUrls().Select(_ => _.Url.ToString()).ToList();
        
        _project = Storage.GetInvestmentProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

        if (_project is InvestorProject findProject)
        {
            _invested = findProject.InvestedInProject(); // TODO need to scan for the invested projects when opening on a new browsers
            _myProjectExplorerLink = NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{findProject.TransactionId}";
        }
        else
        {
            _project = Storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);

            if (_project != null)
            {
                _founder = true;
            }
            else
            {
                _project = SessionStorage.GetProjectById(ProjectId);

                if (_project == null)
                {
                    _findInProgress = true;

                    var projectIndexerData = await IndexerService.GetProjectByIdAsync(ProjectId);

                    if (projectIndexerData != null)
                    {
                        _project = new Project { CreationTransactionId = projectIndexerData.TrxId };
                        RelayService.RequestProjectCreateEventsByPubKey(e =>
                        {
                            if (_project != null)
                            {
                                switch (e)
                                {
                                    case { Kind: NostrKind.Metadata }:
                                        var nostrMetadata = JsonSerializer.Deserialize<ProjectMetadata>(e.Content, Angor.Shared.Services.RelayService.Settings);
                                        _project.Metadata ??= nostrMetadata;
                                        break;
                                    case { Kind: NostrKind.ApplicationSpecificData }:
                                        var projectInfo = JsonSerializer.Deserialize<ProjectInfo>(e.Content, Angor.Shared.Services.RelayService.Settings);
                                        _project.ProjectInfo ??= projectInfo;
                                        break;
                                }
                            }
                        }, () =>
                        {
                            _findInProgress = false;
                            if (_project.ProjectInfo != null)
                                SessionStorage.StoreProject(_project);
                            StateHasChanged();
                        },
                            new[] { projectIndexerData.NostrPubKey });
                    }
                }
            }
        }

        if (_project?.CreationTransactionId != null)
        {
            _projectExplorerLink = NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{_project.CreationTransactionId}";
            
            await RefreshBalance();
        }
    }

    private async Task RefreshBalance()
    {
        try
        {
            _projectStats.Loading = true;

            if (_project != null)
            {
                var data = await IndexerService.GetProjectStatsAsync(_project.ProjectInfo.ProjectIdentifier);

                if (data != null)
                {
                    _projectStats.TotalInvestors = (int)data.InvestorCount;
                    _projectStats.TotalRaised = data.AmountInvested;

                    _projectStats.TimeLeft = (_project.ProjectInfo.StartDate - DateTime.UtcNow).Days;
                    if (_projectStats.TimeLeft < 0) 
                        _projectStats.TimeLeft = 0;

                    var targetSat = Money.Coins(_project.ProjectInfo.TargetAmount).Satoshi;
                    _projectStats.FundingProgressPercent = (int)((_projectStats.TotalRaised * 100) / targetSat);
                }
            }
        }
        catch (Exception ex)
        {
            NotificationComponent.ShowErrorMessage(ex.Message);
        }
        finally
        {
            _projectStats.Loading = false;
        }
      
    }

    private async Task RecoverFunds()
    {
        NavigationManager.NavigateTo($"/recover/{ProjectId}");
    }

    private async Task InvestInProject()
    {
        if (HasWallet)
            NavigationManager.NavigateTo($"/invest/{ProjectId}");
        else
            NotificationComponent.ShowNotificationMessage("You must create a wallet if you want to invest");
    }
    
    
    private async Task CopyWordsToClipboardAsync()
    {
        if (_project is FounderProject founderProject)
        {
            var nostrKey = await DerivationOperations.DeriveProjectNostrPrivateKeyAsync(WalletStorage.GetWallet().WalletWords, founderProject.ProjectIndex);
            var nsec = NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes());
            await ClipboardService.WriteTextAsync(nsec);
            StateHasChanged();   
        }
    }
}