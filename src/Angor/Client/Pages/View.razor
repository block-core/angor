@page "/view/{ProjectId}"
@using System.Text.RegularExpressions
@using Angor.Client.Models
@using Angor.Client.Storage
@using Angor.Shared
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Shared.Utilities
@using Blockcore.NBitcoin
@using Blockcore.Networks
@using NBitcoin.DataEncoders
@using Nostr.Client.Messages

@inject IDerivationOperations _derivationOperations
@inject IClientStorage storage;
@inject ICacheStorage SessionStorage;
@inject NavigationManager NavigationManager
@inject INetworkConfiguration _NetworkConfiguration
@inject IClipboardService _clipboardService
@inject IIndexerService _IndexerService
@inject IRelayService _RelayService
@inject ISerializer serializer
@inject IJSRuntime Js;
@inject ILogger<Browse> Logger;
@inject IHtmlStripperService HtmlStripperService;
@inject IApplicationLogicService applicationLogicService;
@inject NostrConversionHelper NostrHelper


@inherits BaseComponent
<NotificationComponent @ref="notificationComponent" />
<PasswordComponent @ref="passwordComponent" />

<div class="row">

    @if (project?.ProjectInfo == null)
    {
        @if (findInProgress)
        {
            <div class="d-flex justify-content-center">
                <div class="loader"></div>
            </div>
        }
        else
        {
            @if (!string.IsNullOrEmpty(error))
            {
                <div class="row mt-4">
                    <div class="card card-body angor-alert-info pt-2 pb-2">
                        <div class="d-flex align-items-center">
                            <span class="me-3 user-select-none">
                                <i>
                                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                                </i>
                            </span>
                            <span class="text-white">@error</span>
                        </div>
                    </div>
                </div>
            }
        }
    }
    else
    {
        <!-- Project Details Section -->
        @if (project.ProjectInfo.NostrPubKey != null)
        {
            <div class="card card-body p-0 profile-card animate-fade-in">
                @{
                    var metadata = project.Metadata;
                }

                <div class="card-header p-0 overflow-hidden position-relative banner-container">
                    <img @onclick="() => profileBannerModal = true" class="card-img-top card-img-top-view animate-slide-down" src="@(metadata?.Banner ?? "/assets/img/no-image.jpg")" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                    <img @onclick="() => profileImageModal = true" class="profile-image-view rounded-circle animate-scale-in" src="@(metadata?.Picture ?? "/assets/img/no-image.jpg")" alt="Profile Picture" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                </div>

                <div class="p-4 content-container animate-fade-up">
                    <div class="d-flex align-items-center justify-content-between mb-4">
                        <div class="d-flex align-items-center hover-effect">
                            <span class="user-select-none animate-rotate">
                                <i>
                                    <Icon IconName="view" Height="32" Width="32" />
                                </i>
                            </span>
                            <div class="h-100 ms-3">
                                <h5 class="mb-0 font-weight-bolder project-title">
                                    <a href="/view/@project.ProjectInfo.ProjectIdentifier">@metadata?.Name</a>
                                </h5>
                            </div>
                        </div>
                    </div>


                    <p class="card-subtitle animate-fade-in-delayed">@((MarkupString)metadata?.About)</p>
                </div>

            </div>

            @if (profileImageModal)
            {
                <div class="modal-wrapper">
                    <div class="modal fade show d-block" tabindex="-1">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content modern-modal">
                                <div class="modal-header border-0 pb-0">
                                    <div class="d-flex align-items-center">
                                        <Icon IconName="view" Height="32" Width="32" class="me-2" />
                                        <h5 class="modal-title">@metadata?.Name</h5>
                                    </div>
                                    <button class="btn-close-custom" @onclick="() => profileImageModal = false">
                                        <Icon IconName="close-circle" Height="24" Width="24" />
                                    </button>
                                </div>
                                <div class="modal-body modal-body-scroll">
                                    <img class="animate-scale-in w-100 rounded-3" src="@(metadata?.Picture ?? "/assets/img/no-image.jpg")" alt="Profile Picture" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                </div>
                             </div>
                        </div>
                    </div>
                </div>
            }

            @if (profileBannerModal)
            {
                <div class="modal-wrapper">
                    <div class="modal fade show d-block" tabindex="-1">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content modern-modal">
                                <div class="modal-header border-0 pb-0">
                                    <div class="d-flex align-items-center">
                                        <Icon IconName="view" Height="32" Width="32" class="me-2" />
                                        <h5 class="modal-title">@metadata?.Name</h5>
                                    </div>
                                    <button class="btn-close-custom" @onclick="() => profileBannerModal = false">
                                        <Icon IconName="close-circle" Height="24" Width="24" />
                                    </button>
                                </div>
                                <div class="modal-body modal-body-scroll">
                                    <img class="animate-slide-down w-100 rounded-3" src="@(metadata?.Banner ?? "/assets/img/no-image.jpg")" alt="" onerror="this.onerror=null; this.src='/assets/img/no-image.jpg';" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }


            <div class="card card-body mt-4">

                <div class="row align-items-center">
                    <div class="col-12 col-md-12 col-lg-8 order-2 order-md-2 mt-4">
                        <div class="form-control d-flex align-items-center">
                            <i class="me-2">
                                <Icon IconName="explorer" />
                            </i>
                            <a class="ms-2" href="@projectExplorerLink" target="_blank">View the transaction on the explorer.</a>
                        </div>
                        <div class="form-control mt-1 d-flex align-items-center">
                            <i class="me-2">
                                <Icon IconName="view" />
                            </i>
                            <p class="card-text ms-2 text-break">Project Identifier: <b>@project.ProjectInfo.ProjectIdentifier</b> </p>
                        </div>
                        <div class="form-control mt-1 d-flex align-items-center">
                            <i class="me-2">
                                <Icon IconName="key" />
                            </i>
                            <p class="card-text ms-2 text-break">Founder Key: <b>@project.ProjectInfo.FounderKey</b></p>
                        </div>
                        <div class="form-control mt-1 d-flex align-items-center">
                            <i class="me-2">
                                <Icon IconName="balance" />
                            </i>
                            <p class="card-text ms-2">Target Amount: <b>@project.ProjectInfo.TargetAmount.ToUnitBtc() @network.CoinTicker</b></p>
                        </div>
                        <div class="form-control mt-1 d-flex align-items-center">
                            <i class="me-2">
                                <Icon IconName="calendar" />
                            </i>
                            <p class="card-text ms-2">Penalty duration: <b>@project.ProjectInfo.PenaltyDays days</b></p>
                        </div>
                        <div class="form-control mt-1 d-flex align-items-center">
                            <i class="me-2">
                                <Icon IconName="date" />
                            </i>
                            <p class="card-text ms-2">
                                Project dates: <b>@project.ProjectInfo.StartDate.ToString("dd/MM/yyyy") - @project.ProjectInfo.ExpiryDate.ToString("dd/MM/yyyy")</b>
                            </p>
                        </div>

                    </div>
                    <div class="col-12 col-md-12 col-lg-4 order-1 order-md-1 d-flex justify-content-center align-items-center mt-4">
                        <div class="w-100">
                            @{
                                var startsInDays = (project.ProjectInfo.StartDate - DateTime.UtcNow).Days;

                                if (startsInDays > 0)
                                {
                                    <p class="card-text text-center">Starts in @startsInDays days</p>
                                }
                                else
                                {
                                    var totalDays = (project.ProjectInfo.ExpiryDate - project.ProjectInfo.StartDate).Days;
                                    var currentDays = (DateTime.Now - project.ProjectInfo.StartDate).Days;
                                    currentDays = currentDays < 0 ? 0 : currentDays;
                                    currentDays = currentDays > totalDays ? totalDays : currentDays;

                                    if (totalDays > 0)
                                    {
                                        <div class="progress-container">
                                            <div role="progressbar" data-type="days" aria-valuenow="@currentDays" aria-valuemin="0" aria-valuemax="@totalDays" style="--day: @currentDays; --total: @totalDays;" data-day="@currentDays" data-total="@totalDays"></div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>

                <div class="row align-items-center">
                    <div class="col-12 col-lg-4 d-flex justify-content-center align-items-center mt-4 order-1 order-lg-1">
                        <div class="w-100">
                            <div class="progress-container">
                                <div role="progressbar" data-type="percent" aria-valuenow="@projectStats.FundingProgressPercent" aria-valuemin="0" aria-valuemax="100" style="--value: @projectStats.FundingProgressPercent;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-8 mt-4 order-2 order-lg-2">
                        @if (projectStats.Loading)
                        {
                            <div class="loader"></div>
                        }
                        else
                        {
                            <div class="form-control mt-1 d-flex align-items-center">
                                <i class="me-2">
                                    <Icon IconName="calculator" />
                                </i>
                                <p class="card-text ms-2">Total Raised: <b>@Money.Satoshis(projectStats.TotalRaised).ToUnit(MoneyUnit.BTC) @network.CoinTicker</b> </p>
                            </div>
                            <div class="form-control mt-1 d-flex align-items-center">
                                <i class="me-2">
                                    <Icon IconName="users" />
                                </i>
                                <p class="card-text ms-2">Total Investors: <b>@projectStats.TotalInvestors</b></p>
                            </div>
                            <div class="form-control mt-1 d-flex align-items-center">
                                <i class="me-2">
                                    <Icon IconName="calendar" />
                                </i>
                                <p class="card-text ms-2">
                                    @{
                                        var daysLeft = (project.ProjectInfo.StartDate - DateTime.UtcNow).Days;
                                    }

                                    @if (daysLeft >= 0)
                                    {
                                        <span>Time Left for Investing: @daysLeft days</span>
                                    }
                                    else
                                    {
                                        <span>The investing period is over</span>
                                    }

                                </p>
                            </div>
                        }
                    </div>
                </div>

            </div>

        }


        <!-- Stages Section -->

        <div class="card card-body mt-4">
            <div class="d-flex align-items-center">
                <span class="user-select-none">
                    <i class="me-2">
                        <Icon IconName="stages" />
                    </i>
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Stages
                    </h5>
                </div>
            </div>
            <div class="table-responsive form-control mt-4">
                <table class="table align-items-center mb-0">
                    <thead>
                        <tr>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Stage</th>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Stage %</th>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Release Date</th>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Days Until Stage</th>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Amount Per Stage</th>
                            <!-- Other headers -->
                        </tr>
                    </thead>
                    <tbody>
                        @for (var index = 0; index < project.ProjectInfo.Stages.Count; index++)
                        {
                            var stage = project.ProjectInfo.Stages[index];
                            var daysUntilStage = (stage.ReleaseDate - currentDate).Days;
                            var amountInStage = Money.Satoshis(projectStats.TotalRaised).ToUnit(MoneyUnit.BTC) * stage.AmountToRelease / 100;
                            <tr>
                                <td>@(index + 1)</td>
                                <td>@stage.AmountToRelease %</td>
                                <td>@stage.ReleaseDate.ToString("dd/MM/yyyy")</td>
                                <td>
                                    @if (daysUntilStage < 0)
                                    {
                                        <span>Released</span>
                                    }
                                    else
                                    {
                                        <span>@daysUntilStage days</span>
                                    }
                                </td>
                                <td>@amountInStage @network.CoinTicker</td>
                                <!-- Other stage details -->
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>


        <!-- Seeders Section -->
        @*        <div class="card mb-3">
    <div class="card-header">
    <h4>Selected Seeders</h4>
    </div>
    <div class="card-body">
    @if (SelectedSeeders.Any())
    {
    <!-- Seeders table -->
    }
    else
    {
    <p><i class="bi bi-exclamation-triangle-fill"></i> No seeders yet.</p>
    }
    </div>
    </div>*@

        <!-- Actions Section -->

        <div class="card card-body mt-4">
            @if (founder)
            {
                <div class="action-card founder-card animate-fade-in">
                    <i class="me-2">
                        <Icon IconName="verified-check" Height="100" Width="100" Class="action-icon" />
                    </i>
                    <h3 class="mt-4 text-success">Project Owner Dashboard</h3>
                    <p class="action-text">Manage your project funds and approve transactions</p>
                    <div class="action-buttons d-flex justify-content-center item-center mt-4">
                                             
                        <a href=@($"/spend/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-border-success text-white animate-scale">
                            <i class="me-2">
                                <Icon IconName="wallet" />
                            </i>
                            Manage Funds
                        </a>
                        <a href=@($"/signatures/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-border-warning animate-scale">
                            <i class="me-2">
                                <Icon IconName="signature" />
                            </i>
                            Pending Approvals
                        </a>

                        <a href="#" class="btn btn-border animate-scale warning-button disabled">
                            <i class="me-2">
                                <Icon IconName="lock" />
                            </i>
                            Release funds back to investors
                        </a>
                    </div>


                </div>
          
            }
            else if (invested)
            {
                <div class="action-card investor-card animate-fade-in">
                    <i class="me-2">
                        <Icon IconName="cup" Height="100" Width="100" Class="action-icon" />
                    </i>
                    <h3 class="mt-4">Investment Active</h3>
                    <p class="action-text">
                        You are part of this project's success!
                        <a href="@myProjectExplorerLink" target="_blank" class="d-block mt-2">View Transaction Details</a>
                    </p>
                    <div class="d-flex justify-content-center item-center mt-4">

                    <button class="btn btn-border animate-scale" @onclick="RecoverFunds">
                        <Icon IconName="recover" Class="me-2" />
                         Manage Investment
                    </button>
                     </div>
                </div>
            }
            else
            {
                <div class="action-card prospect-card animate-fade-in">

                    <Icon IconName="shield-star" Height="100" Width="100" Class="action-icon me-2" />

                    <h3 class="mt-4">Investment Opportunity</h3>
                    <p class="action-text">
                        Join this project and be part of its journey to success
                    </p>

                    @{
                        var canInvest = applicationLogicService.IsInvestmentWindowOpen(project?.ProjectInfo);
                    }
                    <div class="d-flex justify-content-center item-center mt-4">
                       <button class="btn btn-border-success animate-scale"
                            data-cy="INVEST_BUTTON"
                            @onclick="InvestInProject"
                            disabled="@(!canInvest)">

                        <Icon IconName="shield-star" Class="me-2" />

                        @if (!canInvest)
                        {
                            <span>Investment Period Closed</span>
                        }
                        else
                        {
                            <span>Invest Now</span>
                        }
                       </button>
                     </div>
                </div>
            }
        </div>



        <!-- Relays Section -->
        <div class="card card-body mt-4">
            <div class="d-flex align-items-center">
                <span class="user-select-none">
                    <i class="me-2">
                        <Icon IconName="relay" />
                    </i>
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Nostr
                    </h5>
                </div>
            </div>
            @if (project.ProjectInfo.NostrPubKey != null)
            {
                <div class="mb-4 mt-4">

                    @{
                        var Npub = NostrHelper.ConvertHexToNpub(project.ProjectInfo.NostrPubKey);
                    }
                    <label for="NostrNpubPublicKey" class="form-label">Project NOSTR public key (npub)</label>

                    <div class="input-group">
                        <InputText id="NostrNpubPublicKey" @bind-Value="@Npub" class="form-control" placeholder="@Npub" readonly />
                        <button @onclick="OpenInHUBAsync" class="btn btn-border">
                            <i>
                                <Icon IconName="link" />
                            </i>
                        </button>
                    </div>
                    <br />
                    <label for="NostrHexPublicKey" class="form-label">Project NOSTR public key (hex)</label>
                    <div class="input-group">
                        <InputText id="NostrHexPublicKey" @bind-Value="project.ProjectInfo.NostrPubKey" class="form-control" placeholder="@project.ProjectInfo.NostrPubKey" readonly />
                     @*<button @onclick="OpenInHUBAsync" class="btn btn-border">
                           <Icon IconName="link"></Icon>
                       </button> *@
                    </div>


                    @if (founder)
                    {
                        <div class="action-buttons d-flex justify-content-center item-center mt-4">
                            <button @onclick="OpenInHUBAsync" class="btn btn-border-success mt-4 mr-1">
                                <Icon IconName="link" Class="me-2" />
                                Open in Angor HUB
                            </button>
                            <button @onclick="OpenInBrowseProfileAsync" class="btn btn-border-warning mt-4 mr-1">
                                <Icon IconName="edit" Class="me-2" />
                                Edit project profile
                            </button>
                            <button @onclick="ShowNsecAsync" class="btn btn-border-danger mt-4">
                                <Icon IconName="shield" Class="me-2" />
                                Show private key
                            </button>
                        </div>



                        @if (isGeneratingNsec)
                        {
                            <div class="d-flex justify-content-center mt-4">
                                <div class="loader"></div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="mt-2 text-danger">
                                <span>@errorMessage</span>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(NostrHexSecKey) || !string.IsNullOrEmpty(NostrNsecSecKey))
                        {
                            <br />
                            <label for="NostrNsecSecKey" class="form-label mt-4">Project NOSTR private key (nsec)</label>
                            <div class="input-group">
                                <InputText id="NostrNsecSecKey" @bind-Value="NostrNsecSecKey" class="form-control nsec-box" readonly />
                                <button @onclick="CopyNsecSecKeyToClipboardAsync" class="btn btn-border">
                                    <i>
                                        <Icon IconName="copy" />
                                    </i>
                                </button>
                            </div>

                            <br />
                            <label for="NostrHexSecKey" class="form-label mt-4">Project NOSTR private key (hex)</label>
                            <div class="input-group">
                                <InputText id="NostrHexSecKey" @bind-Value="NostrHexSecKey" class="form-control nsec-box" readonly />
                                <button @onclick="CopyHexSecKeyToClipboardAsync" class="btn btn-border">
                                    <i>
                                        <Icon IconName="copy" />
                                    </i>
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="action-buttons d-flex justify-content-center item-center mt-4">
                            <button @onclick="OpenInHUBAsync" class="btn btn-border-success mt-4 mr-1">
                                <Icon IconName="link" Class="me-2" />
                                Open in Angor HUB
                            </button>
                        </div>
                    }
                </div>
            }

            <br />
            <h6>Relays</h6>
            @foreach (var relay in NostrClients)
            {
                <a href="@relay" target="_blank">
                    <div class="form-control mt-2 d-flex align-items-center">
                        <i class="me-2">
                            <Icon IconName="menu_open" />
                        </i>
                        <p class="card-text ms-2">@relay</p>
                    </div>
                </a>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string ProjectId { get; set; }

    private Project? project;

    private bool sendConfirmModal;

    string myProjectExplorerLink;
    string projectExplorerLink;

    private string NostrNsecSecKey { get; set; } = string.Empty;
    private string NostrHexSecKey { get; set; } = string.Empty;

    private bool profileImageModal = false;
    private bool profileBannerModal = false;
    private bool isGeneratingNsec;
    private string errorMessage = string.Empty;


    private string error;

    private List<(string Hash, int Amount)> SelectedSeeders = new List<(string hash, int amount)>
    {
        (new uint256().ToString(), 10),
        (new uint256().ToString(), 20)
    };

    public class ProjectStats
    {
        public bool Loading { get; set; }
        public long TotalRaised { get; set; }
        public int TotalInvestors { get; set; }
        public int TotalSeeders { get; set; }
        public int TimeLeft { get; set; }
        public int FundingProgressPercent { get; set; }
    }

    readonly ProjectStats projectStats = new()
        {
            Loading = true,
            TimeLeft = 0,
            TotalInvestors = 0,
            TotalRaised = 0,
            TotalSeeders = 0,
            FundingProgressPercent = 0
        };

    bool founder;
    bool invested;
    bool findInProgress;
    readonly DateTime currentDate = DateTime.UtcNow;

    private List<string> NostrClients = new();

    protected override async Task OnInitializedAsync()
    {
        projectStats.Loading = true;
        findInProgress = false;
        error = string.Empty;

        try
        {
            NostrClients = _NetworkConfiguration.GetDefaultRelayUrls().Select(_ => _.Url.ToString()).ToList();

            project = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);
            if (project != null)
            {
                founder = true;
                projectStats.Loading = false;
                SetProjectLinksAndRefreshBalance();
                return;
            }

            project = storage.GetInvestmentProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == ProjectId);
            if (project is InvestorProject investorProject)
            {
                invested = investorProject.InvestedInProject();
                myProjectExplorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{investorProject.TransactionId}";
                projectStats.Loading = false;
                SetProjectLinksAndRefreshBalance();
                return;
            }

            project = SessionStorage.GetProjectById(ProjectId);
            if (project != null)
            {
                projectStats.Loading = false;
                SetProjectLinksAndRefreshBalance();
                StateHasChanged();
                return;
            }

            findInProgress = true;
            var projectIndexerData = await _IndexerService.GetProjectByIdAsync(ProjectId);

            if (projectIndexerData != null)
            {
                project = new Project { CreationTransactionId = projectIndexerData.TrxId };

                _RelayService.LookupProjectsInfoByEventIds<ProjectInfo>(projectInfo =>
                            {
                                if (projectInfo is null)
                                {
                                    throw new Exception("The project info must be in the application specific data event");
                                }

                                if (project is { ProjectInfo: null }) { project.ProjectInfo = projectInfo; }
                            },
                            () =>
                            {
                                _RelayService.LookupNostrProfileForNPub(
                                    (projectNpub, metadata) =>
                                    {
                                        if (project is { Metadata: null }) { project.Metadata = metadata; }
                                    },
                                    () =>
                                    {
                                        findInProgress = false;
                                        if (project?.ProjectInfo != null)
                                        {
                                            if (!SessionStorage.IsProjectInStorageById(project.ProjectInfo.ProjectIdentifier))
                                            {
                                                SessionStorage.StoreProject(project);
                                            }

                                        }
                                        else
                                        {
                                            // Handle case where project info is not available
                                            error = "Project not found...";
                                        }
                                        StateHasChanged();
                                    },
                                    project.ProjectInfo.NostrPubKey);

                                SetProjectLinksAndRefreshBalance();

                            }, projectIndexerData.NostrEventId);
            }
            else
            {
                findInProgress = false;
                error = "Project not found...";
                StateHasChanged();
            }
        }


        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
            projectStats.Loading = false;
            StateHasChanged();
        }
    }

    private async Task SetProjectLinksAndRefreshBalance()
    {
        if (!string.IsNullOrEmpty(project?.CreationTransactionId))
        {
            projectExplorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{project.CreationTransactionId}";
        }
        else
        {
            error = "Project created; awaiting confirmation. Check back shortly.";
        }

        await RefreshBalance();
        StateHasChanged();
    }

    private async Task RefreshBalance()
    {
        try
        {
            projectStats.Loading = true;

            if (project?.ProjectInfo != null)
            {
                var data = await _IndexerService.GetProjectStatsAsync(project.ProjectInfo.ProjectIdentifier);

                if (data != null)
                {
                    projectStats.TotalInvestors = (int)data.InvestorCount;
                    projectStats.TotalRaised = data.AmountInvested;

                    // Calculate time left based on the project start and expiry dates
                    if (DateTime.UtcNow < project.ProjectInfo.StartDate)
                    {
                        // Project has not started yet, so time left is until the start date
                        projectStats.TimeLeft = (project.ProjectInfo.StartDate - DateTime.UtcNow).Days;
                    }
                    else
                    {
                        // Project has expired
                        projectStats.TimeLeft = 0; // Ensure no negative time left
                    }

                    // Calculate funding progress as a percentage of the target amount
                    projectStats.FundingProgressPercent = (int)(projectStats.TotalRaised * 100 / project.ProjectInfo.TargetAmount);
                }
            }
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage(ex.Message, ex);
        }
        finally
        {
            projectStats.Loading = false;
            StateHasChanged();
        }
    }

    private async Task RecoverFunds()
    {
        NavigationManager.NavigateTo($"/recover/{ProjectId}");
    }

    private async Task InvestInProject()
    {
        if (hasWallet)
            NavigationManager.NavigateTo($"/invest/{ProjectId}");
        else
            notificationComponent.ShowNotificationMessage("You must create a wallet if you want to invest");
    }


    private async Task ShowNsecAsync()
    {
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(async () => { await GenerateNsec(); });
        }
        else
        {
            await GenerateNsec();
        }
    }

    private async Task GenerateNsec()
    {
        isGeneratingNsec = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (project is FounderProject founderProject)
            {
                var words = await passwordComponent.GetWalletAsync();
                var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(words, founderProject.ProjectIndex);
                NostrHexSecKey = Encoders.Hex.EncodeData(nostrKey.ToBytes());
                NostrNsecSecKey = NostrHelper.ConvertHexToNsec(NostrHexSecKey)!;

                StateHasChanged();
            }
        }
        catch (InvalidOperationException ex)
        {
            HandlePasswordError();
            Logger.LogWarning(ex, "InvalidOperationException occurred during NSEC generation.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An unexpected error occurred during NSEC generation.");
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isGeneratingNsec = false;
            StateHasChanged();
        }
    }


    private async Task CopyNsecSecKeyToClipboardAsync()
    {
        if (!string.IsNullOrEmpty(NostrNsecSecKey))
        {
            await _clipboardService.WriteTextAsync(NostrNsecSecKey);
            notificationComponent.ShowNotificationMessage("Copied to clipboard!", 3);
        }
    }

    private async Task CopyHexSecKeyToClipboardAsync()
    {
        if (!string.IsNullOrEmpty(NostrHexSecKey))
        {
            await _clipboardService.WriteTextAsync(NostrHexSecKey);
            notificationComponent.ShowNotificationMessage("Copied to clipboard!", 3);
        }
    }

    private async void HandlePasswordError()
    {
        errorMessage = "Incorrect password. Please try again.";
        StateHasChanged();

        // Show error message for a short time before reopening password prompt
        await Task.Delay(2000);

        errorMessage = string.Empty;
        StateHasChanged();

        // Reopen password prompt
        passwordComponent.ShowPassword(async () =>
        {
            isGeneratingNsec = true;
            StateHasChanged();
            await GenerateNsec();
        });
    }

    private async void OpenInBrowseProfileAsync()
    {
        var npub = NostrHelper.ConvertHexToNpub(project.ProjectInfo.NostrPubKey);

        if (!string.IsNullOrEmpty(npub))
        {
            var url = $"https://profile.angor.io/profile/{npub}";

            await Js.InvokeVoidAsync("window.open", url, "_blank");
        }
        else
        {
            notificationComponent.ShowNotificationMessage("Public key is not available.", 3);
        }
    }

    private async void OpenInHUBAsync()
    {
        var url = $"https://hub.angor.io/project/{project.ProjectInfo.ProjectIdentifier}";

        await Js.InvokeVoidAsync("window.open", url, "_blank");
    }

    public MarkupString ConvertToMarkupString(string input)
    {
        string sanitizedInput = HtmlStripperService.StripHtmlTags(input);
        return new MarkupString(sanitizedInput);
    }
}

