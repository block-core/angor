@page "/view/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Services

@inject HttpClient Http
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject ISessionStorage SessionStorage;
@inject NavigationManager NavigationManager
@inject INetworkConfiguration _NetworkConfiguration
@inject IClipboardService _clipboardService

@inherits BaseComponent

<div class="container mt-4">
    <h3>View Project</h3>

    @if (!hasWallet)
    {
        NavigationManager.NavigateTo($"/wallet");
        return;
    }

    <NotificationComponent @ref="notificationComponent" />

    @if (project == null)
    {
        <p><em>project not found...</em></p>
    }
    else
    {
        <!-- Project Details Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Project Details</h4>
            </div>
            <div class="card-body">
                <h5 class="card-title">Project Identifier: @project.ProjectIdentifier</h5>
                <a href="@projectExplorerLink" target="_blank">View the transaction on the explorer.</a>
                <p class="card-text">Founder Key: @project.FounderKey</p>
                <p class="card-text">Start Date: @project.StartDate.ToString("dd/MM/yyyy")</p>
                <p class="card-text">Penalty Days: @project.PenaltyDays</p>
                <p class="card-text">Expiry Date: @project.ExpiryDate.ToString("dd/MM/yyyy")</p>
                <p class="card-text">Target Amount: @project.TargetAmount</p>
            </div>
        </div>

        <!-- Stages Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Stages</h4>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Stage </th>
                        <th>Stage %</th>
                        <th>Release Date</th>
                        <!-- Other headers -->
                    </tr>
                    </thead>
                    <tbody>
                        @for (int index = 0; index < project.Stages.Count; index++)
                        {
                            <tr>
                                <td>@(index + 1)</td>
                                <td>@project.Stages[index].AmountToRelease %</td>
                                <td>@project.Stages[index].ReleaseDate.ToString("dd/MM/yyyy")</td>
                                <!-- Other stage details -->
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Seeders Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Selected Seeders</h4>
            </div>
            <div class="card-body">
                @if (SelectedSeeders.Any())
                {
                    <!-- Seeders table -->
                }
                else
                {
                    <p><i class="bi bi-exclamation-triangle-fill"></i> No seeders yet.</p>
                }
            </div>
        </div>

        <!-- Stats Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Stats</h4>
            </div>
            <div class="card-body">
                <!-- Progress bar section -->
                <div class="progress mb-2">
                    <div class="progress-bar" role="progressbar" style="width: @projectStats.FundingProgressPercent%;" aria-valuenow="@projectStats.FundingProgressPercent" aria-valuemin="0" aria-valuemax="100"></div>
                </div>

                <!-- Additional details section -->
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <p class="card-text mb-0">Total Raised: @projectStats.TotalRaised BTC</p>
                        <p class="card-text mb-0">Total Investors: @projectStats.TotalInvestors</p>
                        <p class="card-text mb-0">Total Seeders: @projectStats.TotalSeeders</p>
                        <p class="card-text mb-0">Time Left for Investing: @projectStats.TimeLeft days</p>
                    </div>
                </div>
            </div>
        </div>


        <!-- Actions Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Actions</h4>
            </div>
            <div class="card-body">
                @if (founder)
                {
                    <p>You are the founder.</p>

                    <div class="mb-3">
                        <!-- Buttons Spend Funds and Approve Signature next to each other -->
                        <NavLink href=@($"/spend/{project.ProjectIdentifier}") class="btn btn-primary me-2">Spend Funds</NavLink>
                        <NavLink href=@($"/signatures/{project.ProjectIdentifier}") class="btn btn-primary">Approve signature</NavLink>
                    </div>

                    @if (project.NostrPubKey != null)
                    {
                        <div class="mb-3">
                            <label for="NostrPublicKey" class="form-label">Project NOSTR public key (hex)</label>
                            <div class="input-group">
                                <InputText id="NostrPublicKey" @bind-Value="project.NostrPubKey" class="form-control" placeholder="@project.NostrPubKey" readonly/>
                                <button @onclick="CopyWordsToClibboardAsync" class="btn btn-success">Copy NSec to clipboard</button>
                            </div>
                        </div>
                    }

                }
                else if (invested)
                {
                    <p>You have already invested in this project.

                        <a href="@myProjectExplorerLink" target="_blank">View the transaction on the explorer.</a>
                    </p>

                    <button class="btn btn-danger" @onclick="RecoverFunds">Recover</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="InvestInProject">Invest</button>
                }
            </div>
        </div>
      

        <!-- Relays Section -->
        <div class="card mb-3">
            <div class="card-header">
                <h4>Relays</h4>
            </div>
            <div class="card-body">
                @foreach (var relay in NostrClients)
                {
                    <a href="@relay" target="_blank" class="d-block mb-2">
                        <i class="bi bi-globe"></i> @relay
                    </a>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private ProjectInfo? project;

    private bool sendConfirmModal;

    string myProjectExplorerLink;
    string projectExplorerLink;

    private List<(string Hash, int Amount)> SelectedSeeders = new List<(string hash, int amount)>
    {
        { (new uint256().ToString(), 10) },
        { (new uint256().ToString(), 20) },
    };

    public class ProjectStats
    {
        public int TotalRaised { get; set; }
        public int TotalInvestors { get; set; }
        public int TotalSeeders { get; set; }
        public int TimeLeft { get; set; }
        public int FundingProgressPercent { get; set; }
        
    };

    ProjectStats projectStats = new ProjectStats
    {
        TimeLeft = 7,
        TotalInvestors = 150,
        TotalRaised = 240,
        TotalSeeders = 7,
        FundingProgressPercent = 50,
    };

    bool founder = false;
    bool invested = false;

    private List<string> NostrClients = new List<string> { "wss://relay.angor.io", "wss://relay.angor1.io" };

    protected override Task OnInitializedAsync()
    {
        if (hasWallet)
        {
            var findProject = storage.GetProjects().FirstOrDefault(p => p.ProjectIdentifier == ProjectId);

            if (findProject != null)
            {
                invested = true;
                project = findProject;

                var myProject = storage.GetSignaturess().First(s => s.ProjectIdentifier == ProjectId);
                myProjectExplorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{myProject.TransactionId}";
            }
            else
            {
                findProject = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectIdentifier == ProjectId);

                if (findProject != null)
                {
                    founder = true;
                    invested = true;
                    project = findProject;
                }
                else
                {
                    findProject = SessionStorage.GetProjectById(ProjectId);

                    if (findProject != null)
                    {
                        project = findProject;
                    }
                }
            }

            if (project != null)
            {
                projectExplorerLink = _NetworkConfiguration.GetExplorerUrl().Url + $"/transaction/{project.CreationTransactionId}";
            }
        }
        
        return Task.CompletedTask;
    }

    private async Task RefreshBalance()
    {
        var operationResult = await notificationComponent.LongOperation(async () =>
        {
            await Task.Delay(1000);

            return new OperationResult { Success = true };
        });
    }
    private async Task RecoverFunds()
    {
        NavigationManager.NavigateTo($"/recover/{ProjectId}");
    }

    private async Task InvestInProject()
    {
        NavigationManager.NavigateTo($"/invest/{ProjectId}");
    }
    
    
    private async Task CopyWordsToClibboardAsync()
    {
        var nostrKey = _derivationOperations.DeriveProjectNostrPrivateKey(_walletStorage.GetWallet(), project.ProjectIndex);
        var nsec = NBitcoin.DataEncoders.Encoders.Hex.EncodeData(nostrKey.ToBytes());
        await _clipboardService.WriteTextAsync(nsec);
        StateHasChanged();
    }
}