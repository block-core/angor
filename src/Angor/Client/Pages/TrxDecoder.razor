@page "/trxdecoder"

<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="addresses" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Transaction Decoder</h5>
            </div>
            <div class="header-actions">
                
            </div>
        </div>
    </div>
</div>
 
<div>
    <label for="network">Select Network:</label>
    <select id="network" @bind="selectedNetwork">
        @foreach (var network in NBitcoin.Network.GetNetworks())
        {
            <option value="@network.Name">@network.Name</option>
        }
    </select>
</div>

<div>
    <br/>
    <label for="trxHex">Paste TRX Hex:</label>
    <textarea style="width: 700px; height: 100px;" id="trxHex" @bind="trxHex"></textarea>
</div>

<button @onclick="DecodeTrx">Decode</button>

@if (!string.IsNullOrEmpty(decodedResult))
{
    <h4>Decoded Result:</h4>
    <pre>@decodedResult</pre>
}

@code {
    private string trxHex = string.Empty;
    private string decodedResult = string.Empty;
    private string selectedNetwork = "Mainnet";  // Default selected network

    private void DecodeTrx()
    {
        // Mock decoding process
        // Here, the decoding might be influenced by the selected network.
        // For demonstration, we'll just include the network in the mock decoded result.

        var network = NBitcoin.Network.GetNetwork(selectedNetwork);
        
        decodedResult = $"{NBitcoin.Transaction.Parse(trxHex, network).ToString()} ";
    }
}