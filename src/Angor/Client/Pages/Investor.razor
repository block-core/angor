@page "/investor"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Models
@using Angor.Shared
@using Angor.Shared.Services
@using Blockcore.NBitcoin.DataEncoders
@using Nostr.Client.Messages

@inject ILogger<Investor> _Logger
@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage;
@inject ICacheStorage SessionStorage;
@inject IIndexerService _IndexerService
@inject IDerivationOperations _DerivationOperations
@inject IRelayService _RelayService
@inject ISignService _SignService
@inject ISerializer serializer
@inject IEncryptionService _encryptionService

@inject IJSRuntime JS

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="mb-4">Invested Portfolio</h1>
        <div>
            <button class="btn btn-secondary" @onclick="GetProjectsAndUpdateAsync">
                @if (RefreshBalanceTriggered)
                {
                <!-- If balanceSpinner is true, show spinner icon -->
                <span class="spinner-border spinner-border-sm opacity-10 btn-content" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <!-- If balanceSpinner is false, show 'history' icon -->
                    <span>refresh</span>
                }
            </button>
            <button class="btn btn-secondary" @onclick="NavigateToPenalties" data-toggle="tooltip" title="Penalties return control to investors but put Bitcoin on hold for a penalty duration.">View Penalties</button>
        </div>
    </div>
    <NotificationComponent @ref="notificationComponent" />
    <PasswordComponent @ref="passwordComponent" />

    <!-- Summary Statistics -->
    <div class="row row-cols-1 row-cols-md-4 g-4 mb-4">
        <div class="col">
            <div class="card text-white bg-gradient">
                <div class="card-body">
                    <h5 class="card-title">Funded Projects</h5>
                    <p class="card-text">@TotalFundedProjects</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-gradient">
                <div class="card-body">
                    <h5 class="card-title">Total invested</h5>
                    <p class="card-text"> @Money.Satoshis(TotalInvested).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-gradient">
                <div class="card-body">
                    <h5 class="card-title">Wallet</h5>
                    <p class="card-text">@Money.Satoshis(TotalWallet).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-gradient">
                <div class="card-body">
                    <h5 class="card-title">In Recovery</h5>
                    <p class="card-text">@Money.Satoshis(TotalInRecovery).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
    </div>

    <!-- List of Projects -->
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header pb-0 p-3">
                    <div class="row">
                        <div class="col-6 d-flex align-items-center">
                            <h6 class="mb-0">Your Projects</h6>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive form-control">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Name</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Funding Target (@network.CoinTicker)</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Raised (@network.CoinTicker)</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Raised  (% Target)</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Project Status</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">My Investment (@network.CoinTicker)</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Spent by Founder</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Available to Founder</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">In Recovery</th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var project in projects)
                                {
                                    Stats.TryGetValue(project.ProjectInfo.ProjectIdentifier, out var stats);

                                    <tr>
                                        <td>
                                             <a href=@($"/view/{project.ProjectInfo.ProjectIdentifier}")>@project.Metadata?.Name</a>
                                        </td>
                                        <td>@project.ProjectInfo.TargetAmount @network.CoinTicker</td>
                                        <td>@Money.Satoshis(stats?.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker </td>
                                        <td>@((stats?.AmountInvested ?? 0) * 100 / Money.Coins(project.ProjectInfo.TargetAmount).Satoshi) %</td>
                                        <td>
                                            @if (project.ProjectInfo.StartDate < DateTime.UtcNow)
                                            {
                                                <p class="text-info">Funding</p>
                                            }
                                            else
                                            {
                                                <p class="text-success">Live</p>
                                            }
                                        </td>
                                        <td>
                                            @Money.Satoshis(project.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                            @if (!project.SignaturesInfo?.Signatures.Any() ?? false)
                                            {
                                                <a href=@($"/invest/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-link" data-toggle="tooltip" title="Pending"> <i class="oi oi-clock"></i></a>
                                            }
                                        </td>
                                        <td>-</td>
                                        <td>-</td>
                                        <td>@Money.Satoshis(project.AmountInRecovery ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>

</div>
@code {

    bool RefreshBalanceTriggered;
    bool addedProjectsFromEvent;
    
    private List<InvestorProject> projects = new();

    long TotalInvested = 0;
    long TotalWallet = 0;
    int TotalFundedProjects = 0;
    long TotalInRecovery = 0;

    public Dictionary<string, ProjectStats> Stats = new();

    private Investments scannedInvestments = new();
    
    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();

            projects = storage.GetInvestmentProjects();

            var abi = new AccountBalanceInfo();
            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

            TotalFundedProjects = projects.Count;
            TotalInvested = projects.Sum(s => s.AmountInvested ?? 0);
            TotalWallet = abi.TotalBalance;
            TotalInRecovery = projects.Sum(s => s.AmountInRecovery ?? 0);

            await RefreshBalance();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (RefreshBalanceTriggered)
        {
            if (addedProjectsFromEvent)
            {
                addedProjectsFromEvent = false;
                
                var tasks = scannedInvestments.ProjectIdentifiers.Select(GetInvestmentProjectDataAsync);

                await Task.WhenAll(tasks);

                scannedInvestments.ProjectIdentifiers = new();
                
                RefreshBalanceTriggered = false;
                StateHasChanged();
            }
            else
            {
                RefreshBalanceTriggered = false;   
            }
        }

        if (TotalFundedProjects != projects.Count)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();
            
            var abi = new AccountBalanceInfo();
            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

            TotalFundedProjects = projects.Count;
            TotalInvested = projects.Sum(s => s.AmountInvested ?? 0);
            TotalWallet = abi.TotalBalance;
            TotalInRecovery = projects.Sum(s => s.AmountInRecovery ?? 0);

            await RefreshBalance();
        }
        
    }
    
    

    private async Task RefreshBalance()
    {
        try
        {
            Stats.Clear();

            var tasks = projects.Select(x => AddProjectStats(x.ProjectInfo.ProjectIdentifier));
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage(ex.Message);
        }
    }

    private async Task AddProjectStats(string projectId)
    {
        var projectStats = await _IndexerService.GetProjectStatsAsync(projectId);
        Stats.Add(projectId, projectStats);
    }

    private async Task GetProjectsAndUpdateAsync()
    {
        RefreshBalanceTriggered = true;
        
        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(GetProjectsAndUpdateAsync);
            RefreshBalanceTriggered = false;
            return;
        }
     
        var words = await passwordComponent.GetWalletAsync();
        var NostrDMPrivateKey = await _DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, 1); 
        var NostrDMPrivateKeyHex = Encoders.Hex.EncodeData(NostrDMPrivateKey.ToBytes());
        
        var rootNostrPubKeyHex = _DerivationOperations.DeriveNostrPubKey(words, 0);
        
        
        await _RelayService.LookupDirectMessagesForPubKeyAsync( NostrDMPrivateKey.PubKey.ToHex()[2..], null,1,
            async x =>
            {
                try
                {
                    var decryptedString = await _encryptionService.DecryptNostrContentAsync(
                        NostrDMPrivateKeyHex, rootNostrPubKeyHex, x.Content);
                
                    var projectIdList = serializer.Deserialize<Investments>(decryptedString);

                    bool foundNewProjects = false;
                    foreach (var investment in projectIdList.ProjectIdentifiers)
                    {
                        if (projects.Any(x => x.ProjectInfo.ProjectIdentifier == investment.ProjectIdentifier) ||
                            scannedInvestments.ProjectIdentifiers.Any(x => x.ProjectIdentifier == investment.ProjectIdentifier))
                            continue;

                        scannedInvestments.ProjectIdentifiers.Add(investment);
                        foundNewProjects = true;
                    }
                    
                    if (foundNewProjects)
                    {
                        addedProjectsFromEvent = true;
                        RefreshBalanceTriggered = true;
                        StateHasChanged();
                    }
                }
                catch (Exception e)
                {
                    _Logger.LogError(e,"failed to get handle investment list event from relay");
                }
            },rootNostrPubKeyHex);
    }

    private async Task GetInvestmentProjectDataAsync(InvestmentState investmentState)
    {
        var project = await _IndexerService.GetProjectByIdAsync(investmentState.ProjectIdentifier);

        if (project == null)
            return;
        
        var words = await passwordComponent.GetWalletAsync();
        var investmentPubKey = _DerivationOperations.DeriveInvestorKey(words, project.FounderKey);
       
        var investments = await _IndexerService.GetInvestmentsAsync(investmentState.ProjectIdentifier);
        var investment = investments.SingleOrDefault(x => x.InvestorPublicKey == investmentPubKey);

        if (investment == null)
            return;

        var investorNostrPrivateKey = _DerivationOperations.DeriveProjectNostrInvestorPrivateKey(words, project.ProjectIdentifier);
        var investorNostrPubKey = investorNostrPrivateKey.PubKey.ToHex()[2..];
        
        var investorProject = new InvestorProject
        {
            TransactionId = investment.TransactionId,
            AmountInvested = investment.TotalAmount,
        };

        DateTime? createdAt = null;
        string? eventId = null;

        await _SignService.LookupInvestmentRequestsAsync(project.NostrPubKey, null,
            (id, publisherPubKey, content, eventTime) =>
            {
                if ((createdAt == null || createdAt < eventTime) && publisherPubKey == investorNostrPubKey)
                {
                    createdAt = eventTime;
                    eventId = id;
                }
            }, () =>
            {
                _RelayService.RequestProjectCreateEventsByPubKey(x =>
                    {
                        switch (x.Kind)
                        {
                            case NostrKind.Metadata:
                                investorProject.Metadata ??=
                                    serializer.Deserialize<ProjectMetadata>(x.Content!);
                                break;
                            case NostrKind.ApplicationSpecificData:
                                investorProject.ProjectInfo ??= serializer.Deserialize<ProjectInfo>(x.Content!) ??
                                                                throw new Exception("The project info must be in the application specific data event");
                                break;
                            default:
                                throw new ArgumentOutOfRangeException($"{x.Kind}");
                        }
                    }, () =>
                    {
                        _SignService.LookupSignatureForInvestmentRequest(investorNostrPubKey, project.NostrPubKey,
                            createdAt!.Value, eventId!, async encryptedSignatures =>
                            {
                                //TODO decrypt the signatures and add to project

                                if (investorProject.ReceivedFounderSignatures()) //multiple relays for the same message
                                    return;

                                var signatureJson = await _encryptionService.DecryptNostrContentAsync(
                                    Encoders.Hex.EncodeData(investorNostrPrivateKey.ToBytes()), project.NostrPubKey, encryptedSignatures);

                                var res = serializer.Deserialize<SignatureInfo>(signatureJson);

                                if (res.ProjectIdentifier == investorProject.ProjectInfo.ProjectIdentifier)
                                {
                                    investorProject.SignaturesInfo = res;
                                }

                                if (projects.All(x => x.ProjectInfo.ProjectIdentifier != investorProject.ProjectInfo.ProjectIdentifier))
                                {
                                    projects.Add(investorProject);
                                    storage.AddInvestmentProject(investorProject);
                                    RefreshBalanceTriggered = false;
                                    StateHasChanged();
                                }
                            });
                    },
                    project.NostrPubKey);
            });

    }
    
    private void NavigateToPenalties()
    {
        NavigationManager.NavigateTo("/penalties");
    }
}
