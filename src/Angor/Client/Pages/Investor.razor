@page "/investor"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Models
@using Angor.Shared
@using Angor.Shared.Services
@using Blockcore.NBitcoin.DataEncoders
@using Nostr.Client.Messages

@inject ILogger<Investor> _Logger
@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage;
@inject ICacheStorage SessionStorage;
@inject IIndexerService _IndexerService
@inject IDerivationOperations _DerivationOperations
@inject IRelayService _RelayService
@inject ISignService _SignService
@inject ISerializer serializer
@inject IEncryptionService _encryptionService

@inject IJSRuntime JS

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="portfolio" Class="header-icon" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Invested Portfolio</h5>
            </div>
            <div class="header-actions">
                <div class="d-flex align-items-center justify-content-end wallet-actions">
                    <button class="btn btn-border-success refresh-btn h-100"
                            @onclick="GetProjectsAndUpdateAsync"
                            disabled="@RefreshBalanceTriggered">
                        @if (RefreshBalanceTriggered)
                        {
                            <span class="spinner-border spinner-border-sm opacity-10 btn-angor btn-content"
                                  role="status"
                                  aria-hidden="true">
                            </span>
                        }
                        else
                        {
                            <Icon IconName="refresh" Height="24" Width="24" />
                            <span class="button-text ms-2">Refresh</span>
                        }
                    </button>
                    <button class="btn btn-border-warning test-coins-btn h-100" @onclick="NavigateToPenalties" data-toggle="tooltip" title="Penalties return control to investors but put Bitcoin on hold for a penalty duration.">
                        <i>
                            <Icon IconName="sad-circle" Width="24" Height="24"></Icon>
                        </i>
                        <span class="button-text ms-2">Penalties</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>




<div class="mt-4">

    <NotificationComponent @ref="notificationComponent" />
    <PasswordComponent @ref="passwordComponent" />

    <!-- Summary Statistics -->
    <div class="stats-container">
        <div class="stats-card">
            <div class="stats-content">
                <div class="stats-icon">
                    <Icon IconName="founder" Height="32" Width="32" />
                </div>
                <div class="stats-info">
                    <h6 class="stats-title">Funded Projects</h6>
                    <p class="stats-value">@TotalFundedProjects</p>
                </div>
            </div>
        </div>

        <div class="stats-card">
            <div class="stats-content">
                <div class="stats-icon">
                    <Icon IconName="btc" Height="32" Width="32" />
                </div>
                <div class="stats-info">
                    <h6 class="stats-title">Total invested</h6>
                    <p class="stats-value">@Money.Satoshis(TotalInvested).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>

        <div class="stats-card">
            <div class="stats-content">
                <div class="stats-icon">
                    <Icon IconName="wallet" Height="32" Width="32" />
                </div>
                <div class="stats-info">
                    <h6 class="stats-title">Wallet</h6>
                    <p class="stats-value">@Money.Satoshis(TotalWallet).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>

        <div class="stats-card">
            <div class="stats-content">
                <div class="stats-icon">
                    <Icon IconName="recovery" Height="32" Width="32" />
                </div>
                <div class="stats-info">
                    <h6 class="stats-title">In Recovery</h6>
                    <p class="stats-value">@Money.Satoshis(TotalInRecovery).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
    </div>

    <!-- List of Projects -->
    @if (projects.Count > 0)
    {
        <div class="projects-container mt-4">

            <div class="projects-grid">
                @foreach (var project in projects)
                {
                    Stats.TryGetValue(project.ProjectInfo.ProjectIdentifier, out var stats);
                    var nostrPubKey = project.ProjectInfo.NostrPubKey;
                    investmentRequestsMap.TryGetValue(nostrPubKey, out bool hasInvestmentRequests);
                    releaseRequestsMap.TryGetValue(nostrPubKey, out bool hasInvestmentReleaseRequests);

                    <div class="card card-body p-4">
                        <div class="project-header">
                            <div class="project-icon">
                                <Icon IconName="project_explorer" Height="24" Width="24" />
                            </div>
                            <h6 class="project-title">@project.Metadata?.Name</h6>
                        </div>

                        <div class="project-stats">
                            <div class="stat-row">
                                <span class="stat-label">Target</span>
                                <span class="stat-value">@Money.Satoshis(project.ProjectInfo.TargetAmount).ToUnit(MoneyUnit.BTC) @network.CoinTicker</span>
                            </div>

                            <div class="stat-row">
                                <span class="stat-label">Raised</span>
                                <div class="stat-value-group">
                                    <span class="stat-percentage">(@((stats?.AmountInvested ?? 0) * 100 / project.ProjectInfo.TargetAmount)%)</span>
                                    <span class="stat-value">@Money.Satoshis(stats?.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</span>
                                </div>
                            </div>

                            <div class="stat-row">
                                <span class="stat-label">Status</span>
                                @if (project.ProjectInfo.StartDate < DateTime.UtcNow)
                                {
                                    <span class="status-badge status-funding">Funding</span>
                                }
                                else
                                {
                                    <span class="status-badge status-live">Live</span>
                                }
                            </div>

                            <div class="stat-row">
                                <span class="stat-label">My Investment</span>
                                <div class="stat-value-group">
                                    @if (!project.SignaturesInfo?.Signatures.Any() ?? false)
                                    {
                                        <a href=@($"/invest/{project.ProjectInfo.ProjectIdentifier}") title="Pending">
                                            <span class="stat-value text-warning">@Money.Satoshis(project.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</span>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="stat-value">@Money.Satoshis(project.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</span>
                                    }
                                </div>
                            </div>

                            <div class="stat-row">
                                <span class="stat-label">Founder Status</span>
                                <div class="stat-value-group">
                                    @if (hasInvestmentRequests)
                                    {
                                        <span class="status-badge status-approved">Approved</span>
                                    }
                                    else
                                    {
                                        <span class="status-badge status-pending">Pending</span>
                                    }
                                </div>
                            </div>

                            <div class="stat-row">
                                <span class="stat-label">In Recovery</span>
                                <span class="stat-value">@Money.Satoshis(project.AmountInRecovery ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</span>
                            </div>
                        </div>

                        <div class="project-actions">
                            @if (hasInvestmentReleaseRequests && project.UnfundedReleaseTransactionId == null)
                            {
                                <a href=@($"/release/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-border-warning">
                                    Release Funds
                                </a>
                            }
                            <a href=@($"/view/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-border">
                                View Project
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>
@code {

    bool RefreshBalanceTriggered;
    bool addedProjectsFromEvent;

    private List<InvestorProject> projects = new();

    long TotalInvested = 0;
    long TotalWallet = 0;
    int TotalFundedProjects = 0;
    long TotalInRecovery = 0;

    private Dictionary<string, bool> investmentRequestsMap = new Dictionary<string, bool>();
    private Dictionary<string, bool> releaseRequestsMap = new Dictionary<string, bool>();

    public Dictionary<string, ProjectStats> Stats = new();

    private Investments scannedInvestments = new();

    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();

            projects = storage.GetInvestmentProjects();

            var abi = new AccountBalanceInfo();
            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

            TotalFundedProjects = projects.Count;
            TotalInvested = projects.Sum(s => s.AmountInvested ?? 0);
            TotalWallet = abi.TotalBalance;
            TotalInRecovery = projects.Sum(s => s.AmountInRecovery ?? 0);

            var refreshTask = RefreshBalance();
            CheckSignatureFromFounder();
            CheckReleaseFromFounder();
            await refreshTask;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (RefreshBalanceTriggered)
        {
            if (addedProjectsFromEvent)
            {
                addedProjectsFromEvent = false;

                var tasks = scannedInvestments.ProjectIdentifiers.Select(GetInvestmentProjectDataAsync);

                await Task.WhenAll(tasks);

                scannedInvestments.ProjectIdentifiers = new();

                RefreshBalanceTriggered = false;
                StateHasChanged();
            }
            else
            {
                RefreshBalanceTriggered = false;
            }
        }

        if (TotalFundedProjects != projects.Count)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();

            var abi = new AccountBalanceInfo();
            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

            TotalFundedProjects = projects.Count;
            TotalInvested = projects.Sum(s => s.AmountInvested ?? 0);
            TotalWallet = abi.TotalBalance;
            TotalInRecovery = projects.Sum(s => s.AmountInRecovery ?? 0);

            await RefreshBalance();
        }

    }

    private Task HandleSignatureReceivedAsync(string nostrPubKey, string signatureContent)
    {
        if (investmentRequestsMap.ContainsKey(nostrPubKey))
        {
            investmentRequestsMap[nostrPubKey] = true;
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private void HandleReleaseSignatureReceivedAsync(string nostrPubKey, string signatureContent)
    {
        if (releaseRequestsMap.ContainsKey(nostrPubKey))
        {
            releaseRequestsMap[nostrPubKey] = true;
            StateHasChanged();
        }
    }

    private void CheckSignatureFromFounder()
    {
        foreach (var project in projects)
        {
            investmentRequestsMap[project.ProjectInfo.NostrPubKey] = false;

            _SignService.LookupSignatureForInvestmentRequest(
                project.InvestorNPub,
                project.ProjectInfo.NostrPubKey,
                project.SignaturesInfo.TimeOfSignatureRequest.Value,
                project.SignaturesInfo.SignatureRequestEventId,
                signatureContent => HandleSignatureReceivedAsync(project.ProjectInfo.NostrPubKey, signatureContent)
            );
        }
    }

    private void CheckReleaseFromFounder()
    {
        foreach (var project in projects)
        {
            releaseRequestsMap[project.ProjectInfo.NostrPubKey] = false;

            _SignService.LookupReleaseSigs(
                project.InvestorNPub,
                project.ProjectInfo.NostrPubKey,
                null,
                project.SignaturesInfo.SignatureRequestEventId,
                signatureContent => HandleReleaseSignatureReceivedAsync(project.ProjectInfo.NostrPubKey, signatureContent)
                , () => { });
        }
    }

    private async Task RefreshBalance()
    {
        try
        {
            Stats.Clear();

            var tasks = projects.Select(x => AddProjectStats(x.ProjectInfo.ProjectIdentifier));
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage(ex.Message, ex);
        }
    }

    private async Task AddProjectStats(string projectId)
    {
        var projectStats = await _IndexerService.GetProjectStatsAsync(projectId);
        Stats.Add(projectId, projectStats);
    }

    private async Task GetProjectsAndUpdateAsync()
    {
        RefreshBalanceTriggered = true;

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(GetProjectsAndUpdateAsync);
            RefreshBalanceTriggered = false;
            return;
        }

        RefreshBalanceTriggered = true;
        var words = await passwordComponent.GetWalletAsync();
        var NostrDMPrivateKey = await _DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, 1);
        var NostrDMPrivateKeyHex = Encoders.Hex.EncodeData(NostrDMPrivateKey.ToBytes());
        var NostrDMPubkey = _DerivationOperations.DeriveNostrPubKey(words, 1);

        CheckSignatureFromFounder();

        var rootNostrPubKeyHex = _DerivationOperations.DeriveNostrPubKey(words, 0);


        await _RelayService.LookupDirectMessagesForPubKeyAsync(NostrDMPrivateKey.PubKey.ToHex()[2..], null, 1,
            async x =>
            {
                try
                {
                    var decryptedString = await _encryptionService.DecryptNostrContentAsync(
                        NostrDMPrivateKeyHex, rootNostrPubKeyHex, x.Content);

                    var projectIdList = serializer.Deserialize<Investments>(decryptedString);

                    bool foundNewProjects = false;
                    foreach (var investment in projectIdList.ProjectIdentifiers)
                    {
                        if (projects.Any(x => x.ProjectInfo.ProjectIdentifier == investment.ProjectIdentifier) ||
                            scannedInvestments.ProjectIdentifiers.Any(x => x.ProjectIdentifier == investment.ProjectIdentifier))
                            continue;

                        scannedInvestments.ProjectIdentifiers.Add(investment);
                        foundNewProjects = true;
                    }

                    if (foundNewProjects)
                    {
                        addedProjectsFromEvent = true;
                        RefreshBalanceTriggered = true;
                        StateHasChanged();
                    }
                }
                catch (Exception e)
                {
                    _Logger.LogError(e, "failed to get handle investment list event from relay");
                }
            }, rootNostrPubKeyHex);
    }


    //TODO David check if we should replace the logic to get all projects first and then get signatures for them?
    private void FetchProjectsData(params string[] eventIds)
    {
        _RelayService.LookupProjectsInfoByEventIds<NostrEvent>(x =>
            {
                var projectInfo = serializer.Deserialize<ProjectInfo>(x.Content!) ??
                                  throw new Exception("The project info must be in the application specific data event");

                if (projects.Any(x => x.ProjectInfo.ProjectIdentifier == projectInfo.ProjectIdentifier))
                    return;

                projects.Add(new InvestorProject { ProjectInfo = projectInfo });
            },
            () =>
            {
                _RelayService.LookupNostrProfileForNPub(
                    (projectNpub, metadata) =>
                    {
                        var project = projects.FirstOrDefault(x => x.ProjectInfo.NostrPubKey == projectNpub);
                        if (project is { Metadata: null }) { project.Metadata = metadata; }
                    },
                    () =>
                    {
                        if (eventIds.Length != projects.Count)
                        {
                            notificationComponent.ShowErrorMessage("Unable to pull the information for all projects invested (try adding relays)");
                        }
                        StateHasChanged();
                    },
                    projects.Select(x => x.ProjectInfo.NostrPubKey).ToArray());
            }, eventIds);
    }

    private async Task GetInvestmentProjectDataAsync(InvestmentState investmentState)
    {
        var projectIndexerData = await _IndexerService.GetProjectByIdAsync(investmentState.ProjectIdentifier);

        if (projectIndexerData == null)
            return;

        var words = await passwordComponent.GetWalletAsync();

        var investment = await _IndexerService.GetInvestmentAsync(investmentState.ProjectIdentifier, investmentState.InvestorPubKey);

        if (investment == null)
            return;

        var investorNostrPrivateKey = _DerivationOperations.DeriveProjectNostrInvestorPrivateKey(words, projectIndexerData.ProjectIdentifier);

        var investorProject = new InvestorProject
            {
                TransactionId = investment.TransactionId,
                AmountInvested = investment.TotalAmount,
                InvestorNPub = investorNostrPrivateKey.PubKey.ToHex()[2..]
            };

        DateTime? createdAt = null;
        string? eventId = null;

        _RelayService.LookupProjectsInfoByEventIds<NostrEvent>(
            x =>
            {
                if (investorProject.ProjectInfo == null)
                {
                    investorProject.ProjectInfo = serializer.Deserialize<ProjectInfo>(x.Content!) ??
                                                  throw new Exception("The project info must be in the application specific data event");
                }
            },
            () =>
            {
                if (investorProject.ProjectInfo == null)
                {
                    _Logger.LogError("Failed to get project info for project {0}", investmentState.ProjectIdentifier);
                    return;
                }
                _RelayService.LookupNostrProfileForNPub(
                    (_, metadata) => { investorProject.Metadata ??= metadata; },
                    () =>
                    {
                        _SignService.LookupInvestmentRequestsAsync(investorProject.ProjectInfo.NostrPubKey, investorProject.InvestorNPub, null,
                            (id, publisherPubKey, content, eventTime) =>
                            {
                                if (createdAt == null || createdAt < eventTime)
                                {
                                    createdAt = eventTime;
                                    eventId = id;
                                }
                            }, () =>
                            {
                                _SignService.LookupSignatureForInvestmentRequest(investorProject.InvestorNPub, investorProject.ProjectInfo.NostrPubKey,
                                    createdAt!.Value, eventId!,
                                    async encryptedSignatures =>
                                    {
                                        if (investorProject.ReceivedFounderSignatures()) //multiple relays for the same message
                                            return;

                                        var signatureJson = await _encryptionService.DecryptNostrContentAsync(
                                            Encoders.Hex.EncodeData(investorNostrPrivateKey.ToBytes()), investorProject.ProjectInfo.NostrPubKey, encryptedSignatures);

                                        var res = serializer.Deserialize<SignatureInfo>(signatureJson);

                                        if (res.ProjectIdentifier == investorProject.ProjectInfo.ProjectIdentifier)
                                        {
                                            investorProject.SignaturesInfo = res;
                                        }

                                        if (projects.All(x => x.ProjectInfo.ProjectIdentifier != investorProject.ProjectInfo.ProjectIdentifier))
                                        {
                                            projects.Add(investorProject);
                                            storage.AddInvestmentProject(investorProject);

                                            RefreshBalanceTriggered = false;
                                            StateHasChanged();
                                        }
                                    });
                            }).GetAwaiter().GetResult();
                    },
                    investorProject.ProjectInfo.NostrPubKey);
            },
            projectIndexerData.NostrEventId);
    }

    private void NavigateToPenalties()
    {
        NavigationManager.NavigateTo("/penalties");
    }
}
