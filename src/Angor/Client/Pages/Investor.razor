@page "/investor"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Models
@using Angor.Shared
@using Angor.Shared.Services
@using Blockcore.NBitcoin.DataEncoders
@using Nostr.Client.Messages

@inject ILogger<Investor> _Logger
@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage;
@inject ICacheStorage SessionStorage;
@inject IIndexerService _IndexerService
@inject IDerivationOperations _DerivationOperations
@inject IRelayService _RelayService
@inject ISignService _SignService
@inject ISerializer serializer
@inject IEncryptionService _encryptionService

@inject IJSRuntime JS

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}


<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between flex-wrap">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none">
                    <Icon IconName="portfolio" Height="42" Width="42" />
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Invested Portfolio
                    </h5>
                </div>
            </div>
            <div class="d-flex align-items-center justify-content-end w-100 w-lg-auto mt-3 mt-lg-0">
                <button class="btn btn-border w-100 w-lg-auto me-3 mb-lg-0" @onclick="GetProjectsAndUpdateAsync">
                    <i class="@(RefreshBalanceTriggered ? "rotate-icon" : "")">
                        <Icon IconName="refresh" Width="24" Height="24"></Icon>
                    </i>
                </button>

                <button class="btn btn-border w-100 w-lg-auto" @onclick="NavigateToPenalties" data-toggle="tooltip" title="Penalties return control to investors but put Bitcoin on hold for a penalty duration.">
                    <i>
                        <Icon IconName="sad-circle" Width="24" Height="24"></Icon>
                    </i>
                    <span class="nav-link-text ms-1">Penalties</span>
                </button>
            </div>
        </div>
    </div>
</div>



<div class="mt-4">

    <NotificationComponent @ref="notificationComponent" />
    <PasswordComponent @ref="passwordComponent" />

    <!-- Summary Statistics -->
    <div class="row g-4 mb-4">
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card text-white">
                <div class="card-body text-center">
                    <span class="user-select-none">
                        <Icon IconName="founder" Height="42" Width="42" />
                    </span>
                    <h5 class="card-title mt-4">Funded Projects</h5>
                    <p class="card-text">@TotalFundedProjects</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card text-white">
                <div class="card-body text-center">
                    <span class="user-select-none">
                        <Icon IconName="btc" Height="42" Width="42" />
                    </span>
                    <h5 class="card-title mt-4">Total invested</h5>
                    <p class="card-text">@Money.Satoshis(TotalInvested).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card text-white">
                <div class="card-body text-center">
                    <span class="user-select-none">
                        <Icon IconName="wallet" Height="42" Width="42" />
                    </span>
                    <h5 class="card-title mt-4">Wallet</h5>
                    <p class="card-text">@Money.Satoshis(TotalWallet).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card text-white">
                <div class="card-body text-center">
                    <span class="user-select-none">
                        <Icon IconName="recovery" Height="42" Width="42" />
                    </span>
                    <h5 class="card-title mt-4">In Recovery</h5>
                    <p class="card-text">@Money.Satoshis(TotalInRecovery).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
    </div>

    <!-- List of Projects -->
    @if (projects.Count > 0)
    {
        <div class="row mt-4">
            <div class="col-md-12">

                <div class="card card-body">

                    <div class="d-flex align-items-center">
                        <span class="user-select-none">
                            <Icon IconName="project_explorer"></Icon>
                        </span>
                        <div class="h-100 ms-3">
                            <h5 class="mb-0 font-weight-bolder">
                                Your Projects
                            </h5>
                        </div>
                    </div>
                </div>

                <div class="row row-cols-1 row-cols-sm-1 row-cols-md-1 row-cols-lg-2 g-4 card-container mt-0">
                    @foreach (var project in projects)
                    {
                        Stats.TryGetValue(project.ProjectInfo.ProjectIdentifier, out var stats);
                        var nostrPubKey = project.ProjectInfo.NostrPubKey;
                        investmentRequestsMap.TryGetValue(nostrPubKey, out bool hasInvestmentRequests);

                        <div class="col">

          

                            <div class="card card-body">
                                <div class="d-flex align-items-center">
                                    <span class="user-select-none">
                                        <Icon IconName="project_explorer"></Icon>
                                    </span>
                                    <div class="h-100 ms-3">
                                        <h5 class="mb-0 font-weight-bolder">
                                            @project.Metadata?.Name
                                        </h5>
                                    </div>
                                </div>

                                <div class="mb-3 mt-4 d-flex justify-content-between">
                                    <span>Funding Target:</span>
                                    <strong>@project.ProjectInfo.TargetAmount @network.CoinTicker</strong>
                                </div>

                                <div class="mb-3 d-flex justify-content-between">
                                    <span>Raised:</span>
                                    <strong>@Money.Satoshis(stats?.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</strong>
                                </div>

                                <div class="mb-3 d-flex justify-content-between">
                                    <span>Raised (% Target):</span>
                                    <strong>@((stats?.AmountInvested ?? 0) * 100 / Money.Coins(project.ProjectInfo.TargetAmount).Satoshi) %</strong>
                                </div>

                                <div class="mb-3 d-flex justify-content-between">
                                    <span>Status:</span>
                                    @if (project.ProjectInfo.StartDate < DateTime.UtcNow)
                                    {
                                        <strong class="text-warning">Funding</strong>
                                    }
                                    else
                                    {
                                        <strong class="text-success">Live</strong>
                                    }
                                </div>

                                <div class="mb-3 d-flex justify-content-between">
                                    <span>My Investment:</span>
                                    <div>
                                        @if (!project.SignaturesInfo?.Signatures.Any() ?? false)
                                        {
                                            <a href=@($"/invest/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-sm btn-border ms-2" title="Pending">
                                                <i class="oi oi-clock">
                                                    <Icon IconName="clock-square" Width="24" Height="24"></Icon>
                                                </i>
                                            </a>
                                         }     
                                        <strong>@Money.Satoshis(project.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</strong>

                                    </div>
           
                                </div>

                                <div class="mb-3 d-flex justify-content-between">
                                    <span>Spent by Founder:</span>
                                    <strong>-</strong>
                                </div>

                                <div class="mb-3 d-flex justify-content-between">
                                    <span>Available to Founder:</span>
                                    <strong>-</strong>
                                </div>

                                <div class="mb-3 d-flex justify-content-between">
                                    <span>In Recovery:</span>
                                    <strong>@Money.Satoshis(project.AmountInRecovery ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</strong>
                                </div>

                                <div class="mb-3 d-flex justify-content-between">
                                    <span>Founder Approval:</span>
                                    @if (hasInvestmentRequests)
                                    {
                                        <strong class="text-primary">Approved</strong>
                                    }
                                    else
                                    {
                                        <strong class="text-danger">Pending</strong>
                                    }
                                </div>
                                <div class="card-footer">
                                    <a href=@($"/view/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-border w-100">
                                        View Project
                                    </a>
                                </div>
                            </div>

            

                        </div>
                    }
                </div>



            </div>

        </div>
    }


</div>
@code {

    bool RefreshBalanceTriggered;
    bool addedProjectsFromEvent;

    private List<InvestorProject> projects = new();

    long TotalInvested = 0;
    long TotalWallet = 0;
    int TotalFundedProjects = 0;
    long TotalInRecovery = 0;

    private Dictionary<string, bool> investmentRequestsMap = new Dictionary<string, bool>();

    public Dictionary<string, ProjectStats> Stats = new();

    private Investments scannedInvestments = new();

    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();

            projects = storage.GetInvestmentProjects();

            var abi = new AccountBalanceInfo();
            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

            TotalFundedProjects = projects.Count;
            TotalInvested = projects.Sum(s => s.AmountInvested ?? 0);
            TotalWallet = abi.TotalBalance;
            TotalInRecovery = projects.Sum(s => s.AmountInRecovery ?? 0);

            await RefreshBalance();
            await checkSignatureFromFounder();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (RefreshBalanceTriggered)
        {
            if (addedProjectsFromEvent)
            {
                addedProjectsFromEvent = false;

                var tasks = scannedInvestments.ProjectIdentifiers.Select(GetInvestmentProjectDataAsync);

                await Task.WhenAll(tasks);

                scannedInvestments.ProjectIdentifiers = new();

                RefreshBalanceTriggered = false;
                StateHasChanged();
            }
            else
            {
                RefreshBalanceTriggered = false;
            }
        }

        if (TotalFundedProjects != projects.Count)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();

            var abi = new AccountBalanceInfo();
            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

            TotalFundedProjects = projects.Count;
            TotalInvested = projects.Sum(s => s.AmountInvested ?? 0);
            TotalWallet = abi.TotalBalance;
            TotalInRecovery = projects.Sum(s => s.AmountInRecovery ?? 0);

            await RefreshBalance();
        }

    }

    private async Task HandleSignatureReceivedAsync(string nostrPubKey, string signatureContent)
    {
        if (investmentRequestsMap.ContainsKey(nostrPubKey))
        {
            investmentRequestsMap[nostrPubKey] = true;
            StateHasChanged();
        }
    }

    private async Task checkSignatureFromFounder()
    {
        foreach (var project in projects)
        {
            investmentRequestsMap[project.ProjectInfo.NostrPubKey] = false;

            var investorNostrPubKey = storage.GetNostrPublicKeyPerProject(project.ProjectInfo.ProjectIdentifier);

            if (!string.IsNullOrEmpty(investorNostrPubKey))
            {
                _SignService.LookupSignatureForInvestmentRequest(
                    investorNostrPubKey,
                    project.ProjectInfo.NostrPubKey,
                    project.SignaturesInfo.TimeOfSignatureRequest.Value,
                    project.SignaturesInfo.SignatureRequestEventId,
                    async signatureContent => await HandleSignatureReceivedAsync(project.ProjectInfo.NostrPubKey, signatureContent)
                    );
            }
        }
    }


    private async Task RefreshBalance()
    {
        try
        {
            Stats.Clear();

            var tasks = projects.Select(x => AddProjectStats(x.ProjectInfo.ProjectIdentifier));
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage(ex.Message);
        }
    }

    private async Task AddProjectStats(string projectId)
    {
        var projectStats = await _IndexerService.GetProjectStatsAsync(projectId);
        Stats.Add(projectId, projectStats);
    }

    private async Task GetProjectsAndUpdateAsync()
    {
        RefreshBalanceTriggered = true;

        if (!passwordComponent.HasPassword())
        {
            passwordComponent.ShowPassword(GetProjectsAndUpdateAsync);
            RefreshBalanceTriggered = false;
            return;
        }

        RefreshBalanceTriggered = true;
        var words = await passwordComponent.GetWalletAsync();
        var NostrDMPrivateKey = await _DerivationOperations.DeriveProjectNostrPrivateKeyAsync(words, 1);
        var NostrDMPrivateKeyHex = Encoders.Hex.EncodeData(NostrDMPrivateKey.ToBytes());
        var NostrDMPubkey = _DerivationOperations.DeriveNostrPubKey(words, 1);

        await checkSignatureFromFounder();

        var rootNostrPubKeyHex = _DerivationOperations.DeriveNostrPubKey(words, 0);


        await _RelayService.LookupDirectMessagesForPubKeyAsync(NostrDMPrivateKey.PubKey.ToHex()[2..], null, 1,
            async x =>
            {
                try
                {
                    var decryptedString = await _encryptionService.DecryptNostrContentAsync(
                        NostrDMPrivateKeyHex, rootNostrPubKeyHex, x.Content);

                    var projectIdList = serializer.Deserialize<Investments>(decryptedString);

                    bool foundNewProjects = false;
                    foreach (var investment in projectIdList.ProjectIdentifiers)
                    {
                        if (projects.Any(x => x.ProjectInfo.ProjectIdentifier == investment.ProjectIdentifier) ||
                            scannedInvestments.ProjectIdentifiers.Any(x => x.ProjectIdentifier == investment.ProjectIdentifier))
                            continue;

                        scannedInvestments.ProjectIdentifiers.Add(investment);
                        foundNewProjects = true;
                    }

                    if (foundNewProjects)
                    {
                        addedProjectsFromEvent = true;
                        RefreshBalanceTriggered = true;
                        StateHasChanged();
                    }
                }
                catch (Exception e)
                {
                    _Logger.LogError(e, "failed to get handle investment list event from relay");
                }
            }, rootNostrPubKeyHex);
    }

    private async Task GetInvestmentProjectDataAsync(InvestmentState investmentState)
    {
        var project = await _IndexerService.GetProjectByIdAsync(investmentState.ProjectIdentifier);

        if (project == null)
            return;

        var words = await passwordComponent.GetWalletAsync();
        var investmentPubKey = _DerivationOperations.DeriveInvestorKey(words, project.FounderKey);

        var investments = await _IndexerService.GetInvestmentsAsync(investmentState.ProjectIdentifier);
        var investment = investments.SingleOrDefault(x => x.InvestorPublicKey == investmentPubKey);

        if (investment == null)
            return;

        var investorNostrPrivateKey = _DerivationOperations.DeriveProjectNostrInvestorPrivateKey(words, project.ProjectIdentifier);
        var investorNostrPubKey = investorNostrPrivateKey.PubKey.ToHex()[2..];

        var investorProject = new InvestorProject
            {
                TransactionId = investment.TransactionId,
                AmountInvested = investment.TotalAmount,
            };

        DateTime? createdAt = null;
        string? eventId = null;

        await _SignService.LookupInvestmentRequestsAsync(project.NostrPubKey, null,
            (id, publisherPubKey, content, eventTime) =>
            {
                if ((createdAt == null || createdAt < eventTime) && publisherPubKey == investorNostrPubKey)
                {
                    createdAt = eventTime;
                    eventId = id;
                }
            }, () =>
            {
                _RelayService.RequestProjectCreateEventsByPubKey(x =>
                    {
                        switch (x.Kind)
                        {
                            case NostrKind.Metadata:
                                investorProject.Metadata ??=
                                    serializer.Deserialize<ProjectMetadata>(x.Content!);
                                break;
                            case NostrKind.ApplicationSpecificData:
                                investorProject.ProjectInfo ??= serializer.Deserialize<ProjectInfo>(x.Content!) ??
                                                                throw new Exception("The project info must be in the application specific data event");
                                break;
                            default:
                                throw new ArgumentOutOfRangeException($"{x.Kind}");
                        }
                    }, () =>
                    {
                        _SignService.LookupSignatureForInvestmentRequest(investorNostrPubKey, project.NostrPubKey,
                            createdAt!.Value, eventId!, async encryptedSignatures =>
                            {
                                //TODO decrypt the signatures and add to project

                                if (investorProject.ReceivedFounderSignatures()) //multiple relays for the same message
                                    return;

                                var signatureJson = await _encryptionService.DecryptNostrContentAsync(
                                    Encoders.Hex.EncodeData(investorNostrPrivateKey.ToBytes()), project.NostrPubKey, encryptedSignatures);

                                var res = serializer.Deserialize<SignatureInfo>(signatureJson);

                                if (res.ProjectIdentifier == investorProject.ProjectInfo.ProjectIdentifier)
                                {
                                    investorProject.SignaturesInfo = res;
                                }

                                if (projects.All(x => x.ProjectInfo.ProjectIdentifier != investorProject.ProjectInfo.ProjectIdentifier))
                                {
                                    projects.Add(investorProject);
                                    storage.AddInvestmentProject(investorProject);

                                    // todo: David to check this, not sure this is correct.
                                    // storage.SetNostrPublicKeyPerProject(investorProject.ProjectInfo.ProjectIdentifier, investorNostrPrivateKey.PubKey.ToHex()[2..]);

                                    RefreshBalanceTriggered = false;
                                    StateHasChanged();
                                }
                            });
                    },
                    project.NostrPubKey);
            });

    }

    private void NavigateToPenalties()
    {
        NavigationManager.NavigateTo("/penalties");
    }
}
