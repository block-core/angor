@page "/investor"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Models
@using Angor.Shared.Services

@inject IClientStorage Storage;
@inject NavigationManager NavigationManager
@inject IWalletStorage WalletStorage;
@inject ICacheStorage SessionStorage;
@inject IIndexerService IndexerService

@inherits BaseComponent

@if (!HasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="mb-4">Invested Portfolio</h1>
        <button class="btn btn-secondary" @onclick="NavigateToPenalties">View Penalties</button>
    </div>    
    <NotificationComponent @ref="NotificationComponent"/>
    
    <!-- Summary Statistics -->
    <div class="row row-cols-1 row-cols-md-4 g-4 mb-4">
        <div class="col">
            <div class="card text-white bg-primary">
                <div class="card-body">
                    <h5 class="card-title">Funded Projects</h5>
                    <p class="card-text">@_totalFundedProjects</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h5 class="card-title">Total invested</h5>
                    <p class="card-text"> @Money.Satoshis(_totalInvested).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-info">
                <div class="card-body">
                    <h5 class="card-title">Wallet</h5>
                    <p class="card-text">@Money.Satoshis(_totalWallet).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-secondary">
                <div class="card-body">
                    <h5 class="card-title">In Recovery</h5>
                    <p class="card-text">@Money.Satoshis(_totalInRecovery).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</p>
                </div>
            </div>
        </div>
    </div>

    <!-- List of Projects -->
    <h2 class="mb-4">Your Projects</h2>
    <div class="row">
        <div class="col">
            <table class="table table-bordered">
                <thead>
                    <tr >
                        <th></th>
                        <th></th>
                        <th>Funding Target (@Network.CoinTicker)</th>
                        <th>Raised (@Network.CoinTicker)</th>
                        <th>Raised  (% Target)</th>
                        <th>Project Status</th>
                        <th>My Investment (@Network.CoinTicker)</th>
                        <th>Spent by Founder</th>
                        <th>Available to Founder</th>
                        <th>In Recovery</th>
                    </tr>
                </thead>
                <tbody>
                @foreach(var project in _projects)
                {
                    Stats.TryGetValue(project.ProjectInfo.ProjectIdentifier, out var stats);
                    
                    <tr>
                        <td>
                            <a href=@($"/view/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-link"> @TrimString(@project.ProjectInfo.ProjectIdentifier)</a>
                        </td>
                        <td> @project.Metadata?.Name</td>
                        <td>@project.ProjectInfo.TargetAmount @Network.CoinTicker</td>
                        <td>@Money.Satoshis(stats?.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @Network.CoinTicker </td>
                        <td>@((stats?.AmountInvested ?? 0) * 100 / Money.Coins(project.ProjectInfo.TargetAmount).Satoshi) %</td>
                        <td>
                            @if (project.ProjectInfo.StartDate < DateTime.UtcNow)
                            {
                                <p class="text-info">Funding</p>
                            }
                            else
                            {
                                <p class="text-success">Live</p>
                            }
                        </td>
                        <td>@Money.Satoshis(project.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @Network.CoinTicker 
                            @if (!project.SignaturesInfo?.Signatures.Any() ?? false)
                            {
                                    <a href=@($"/invest/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-link" data-toggle="tooltip" title="Pending"> <i class="oi oi-clock"></i></a>
                            }
                         </td>
                        <td>-</td>
                        <td>-</td>
                        <td>@Money.Satoshis(project.AmountInRecovery ?? 0).ToUnit(MoneyUnit.BTC) @Network.CoinTicker</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

</div>

@code {

    private List<InvestorProject> _projects = new();

    long _totalInvested = 0;
    long _totalWallet = 0;
    int _totalFundedProjects = 0;
    long _totalInRecovery = 0;

    public Dictionary<string,ProjectStats> Stats = new();
    
    protected override async Task OnInitializedAsync()
    {
        HasWallet = WalletStorage.HasWallet();

        if (HasWallet)
        {
            var accountInfo = Storage.GetAccountInfo(Network.Name);
            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();

            _projects = Storage.GetInvestmentProjects();

            var abi = new AccountBalanceInfo();
            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

            _totalFundedProjects = _projects.Count;
            _totalInvested =  _projects.Sum(s => s.AmountInvested ?? 0);
            _totalWallet = abi.TotalBalance;
            _totalInRecovery = _projects.Sum(s => s.AmountInRecovery ?? 0);

            await RefreshBalance();
        }
    }

    private async Task RefreshBalance()
    {
        try
        {
            Stats.Clear();
            
            foreach (var project in _projects)
            {
                var projectStats = await IndexerService.GetProjectStatsAsync(project.ProjectInfo.ProjectIdentifier);
                Stats.Add(project.ProjectInfo.ProjectIdentifier, projectStats);
            }
        }
        catch (Exception ex)
        {
            NotificationComponent.ShowErrorMessage(ex.Message);
        }
    }

    public string TrimString(string input)
    {
        if (input.Length > 20)
        {
            return input.Substring(0, 10) + "..." + input.Substring(input.Length - 10);
        }

        return input;
    }

    private void NavigateToPenalties()
    {
        NavigationManager.NavigateTo("/penalties");
    }
}