@page "/CheckTransactionCode"
@using Blockcore.Consensus.TransactionInfo
@using Angor.Client.Storage
@using Angor.Shared
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Blockcore.Consensus.ScriptInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.BIP32
@using Blockcore.NBitcoin.Crypto
@using Blockcore.NBitcoin.DataEncoders
@using Microsoft.Extensions.Logging.Abstractions

<h3>CheckTransactionCode</h3>

@inject IWalletOperations _walletOperations; 
@inject INetworkConfiguration _networkConfiguration;
@inject IClientStorage storage;
@inject IWalletStorage _walletStorage;
@inject IHdOperations _hdOperations;
@inject ISeederTransactionActions SeederTransactionActions;
@inject IFounderTransactionActions FounderTransactionActions;

<div class="container mt-4">
    <h1 class="mb-4">Dashboard</h1>
    
    <button type="button" class="btn btn-light" @onclick="CreateInvestmentTransaction">Load transaction</button>
    
</div>
        
@if (transactionInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@transactionInfo.Transaction.GetHash()</h5>
            <h6>Inputs</h6>
            @foreach (var input in transactionInfo.Transaction.Inputs)
            {
                <p class="card-text">From: @input.ScriptSig</p>
                <p class="card-text">Script: @input.WitScript</p>
            }
            <h6>Outputs</h6>
            @foreach (var output in transactionInfo.Transaction.Outputs)
            {
                <p class="card-text">To: @output.ScriptPubKey</p>
                <p class="card-text">Amount: @output.Value BTC</p>
            }
        </div>
    </div>
}


@if (founderTransaction == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@founderTransaction.GetHash()</h5>
            <h6>Inputs</h6>
            @foreach (var input in founderTransaction.Inputs)
            {
                <p class="card-text">From: @input.ScriptSig</p>
                <p class="card-text">Script: @input.WitScript</p>
                <p class="card-text">Script: @(new Script(input.WitScript.ToScript().ToOps()[1].PushData).ToString())</p>
            }
            <h6>Outputs</h6>
            @foreach (var output in founderTransaction.Outputs)
            {
                <p class="card-text">To: @output.ScriptPubKey</p>
                <p class="card-text">Amount: @output.Value BTC</p>
            }
        </div>
    </div>
}


@if (recoveryTransaction == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@recoveryTransaction.GetHash()</h5>
            <h6>Inputs</h6>
            @foreach (var input in recoveryTransaction.Inputs)
            {
                <p class="card-text">From: @input.ScriptSig</p>
                <p class="card-text">Script: @input.WitScript.ToScript().WitHash.ScriptPubKey.ToHex()</p>
                <p class="card-text">Script: @(input.WitScript.ToScript().ToString())</p>
            }
            <h6>Outputs</h6>
            @foreach (var output in recoveryTransaction.Outputs)
            {
                <p class="card-text">To: @output.ScriptPubKey</p>
                <p class="card-text">Amount: @output.Value BTC</p>
            }
        </div>
    </div>
}

@code {

    TransactionInfo transactionInfo;
    Transaction founderTransaction;
    Transaction recoveryTransaction;
    
    bool ShowTransaction = false;
    private AccountInfo localAccountInfo = new();

    private AccountInfo GetAccountInfoFromStorage()
    {
        var network = _networkConfiguration.GetNetwork();
        return storage.GetAccountInfo(network.Name);
    }

    private async Task CreateInvestmentTransaction()
    {
         DerivationOperations derivationOperations = new DerivationOperations(new HdOperations(), new NullLogger<DerivationOperations>(), _networkConfiguration);
        
        var network = _networkConfiguration.GetNetwork();
        localAccountInfo = GetAccountInfoFromStorage();

        ExtPubKey accountExtPubKey = ExtPubKey.Parse(localAccountInfo.ExtPubKey, network);
        var walletWords = new WalletWords();// this is test code we can probably delete it _walletStorage.GetWallet().WalletWords;
        var extendedKey = _hdOperations.GetExtendedKey(walletWords.Words, walletWords.Passphrase);

        var privateFounderKey = extendedKey.Derive(new KeyPath("m/84'/1'/0'/0/3")); //derive a different path for the founder keys testing
        
        var pubKey = _hdOperations.GeneratePublicKey(accountExtPubKey, localAccountInfo.LastFetchIndex + 1, false);

        string angorRootKey =
            "tpubD8JfN1evVWPoJmLgVg6Usq2HEW9tLqm6CyECAADnH5tyQosrL6NuhpL9X1cQCbSmndVrgLSGGdbRqLfUbE6cRqUbrHtDJgSyQEY2Uu7WwTL";
        
        //var angorPubKey = _hdOperations.GeneratePublicKey(accountExtPubKey, localAccountInfo.LastFetchIndex + 3, false);

        var secret = new Key();
        var testAddress = new Key();
        
        var context = new InvestorContext
        {
            ChangeAddress = localAccountInfo.ChangeAddressesInfo.First().Address,
            InvestorKey = pubKey.ToHex(),
            ProjectInfo = new ProjectInfo
            {
                Stages = new List<Stage>
                {
                    new() { AmountToRelease = 1, ReleaseDate = DateTime.UtcNow.AddDays(1) },
                    new() { AmountToRelease = 1, ReleaseDate = DateTime.UtcNow.AddDays(2) },
                    new() { AmountToRelease = 1, ReleaseDate = DateTime.UtcNow.AddDays(3) }
                },
                ExpiryDate = DateTime.Now.AddDays(1),
                FounderKey = Encoders.Hex.EncodeData(privateFounderKey.Neuter().PubKey.ToBytes()),
                PenaltyDays = 100,
                StartDate = DateTime.Now,
                TargetAmount = 10,
                ProjectIdentifier = derivationOperations.DeriveAngorKey(Encoders.Hex.EncodeData(privateFounderKey.Neuter().PubKey.ToBytes()),angorRootKey),
                ProjectSeeders = new ProjectSeeders()
            }
        };

        transactionInfo = new TransactionInfo();

        transactionInfo.Transaction = SeederTransactionActions.CreateInvestmentTransaction(context.ProjectInfo, pubKey.ToHex(), Hashes.Hash256(secret.ToBytes())
            , 1000000);

        context.TransactionHex = transactionInfo.Transaction.ToHex();

        recoveryTransaction = SeederTransactionActions.BuildRecoverSeederFundsTransaction(context.ProjectInfo, transactionInfo.Transaction, context.ProjectInfo.PenaltyDays, testAddress.PubKey.ToHex());

        var signatures = FounderTransactionActions.SignInvestorRecoveryTransactions(context.ProjectInfo, context.TransactionHex, recoveryTransaction, Encoders.Hex.EncodeData(privateFounderKey.PrivateKey.ToBytes()));

        var sendInfo = new SendInfo
        {
            ChangeAddress = pubKey.GetSegwitAddress(network).ToString(),
            SendAmount = 10,
            SendToAddress = privateFounderKey.Neuter().PubKey.GetSegwitAddress(network).ToString()
        };

        _walletOperations.CalculateTransactionFee(sendInfo, localAccountInfo,  1000);

        var fee = await _walletOperations.GetFeeEstimationAsync();

        recoveryTransaction = SeederTransactionActions.AddSignaturesToRecoverSeederFundsTransaction(context.ProjectInfo, transactionInfo.Transaction, testAddress.PubKey.ToHex(), signatures, Encoders.Hex.EncodeData(privateFounderKey.PrivateKey.ToBytes()),
            Encoders.Hex.EncodeData(secret.ToBytes()));

        var founderTransactionRes = FounderTransactionActions.SpendFounderStage(context.ProjectInfo, new List<string>() { transactionInfo.Transaction.ToHex() }, 1,
            testAddress.ScriptPubKey , privateFounderKey.PrivateKey.ToHex(network.Consensus.ConsensusFactory), fee.First());

        founderTransaction = founderTransactionRes.Transaction;

        transactionInfo = _walletOperations.AddInputsAndSignTransaction(context.ChangeAddress, transactionInfo.Transaction, walletWords, localAccountInfo, fee.First());
        
        ShowTransaction = true;
    }

}