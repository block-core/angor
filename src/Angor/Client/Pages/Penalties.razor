@page "/penalties"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Blockcore.Consensus.ScriptInfo
@using Blockcore.NBitcoin
@using Angor.Client.Components

@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IIndexerService _IndexerService
@inject ILogger<Penalties> Logger;

@inherits BaseComponent
<NotificationComponent @ref="notificationComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="sad-circle" Width="32" Height="32" />
                </span>
                <h5 class="header-text">View Penalties</h5>
            </div>
            <div class="header-actions">
                <button class="btn btn-border-success"
                        @onclick="RefreshPenalties"
                        disabled="@refreshSpinner"
                        title="Refresh">
                    @if (refreshSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <Icon IconName="refresh" Height="24" Width="24" />
                        <span class="button-text ms-2">Refresh</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@if (!penaltyProjects.Any())
{
    <div class="row mt-4">
        <div class="card card-body angor-alert-info pt-2 pb-2">
            <div class="d-flex align-items-center align-items-center">
                <span class="me-3 user-select-none">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)" />
                </span>
                <span class="text-white">No penalties found</span>
            </div>
        </div>
    </div>
}
else
{
<!-- Penalties Details Section -->

<div class="row mt-4">
    <div class="col-md-12">
        <div class="card card-body">
            <div class="d-flex align-items-center">
                <span class="user-select-none">
                    <Icon IconName="sad-circle"></Icon>
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Penalties Details
                    </h5>
                </div>
            </div>
            <div class="table-responsive form-control mt-4">
                <table class="table align-items-center mb-0">
                    <thead>
                        <tr>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Project ID</th>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Amount in Penalty</th>
                            <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Days Left</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var penalty in penaltyProjects)
                        {
                            <tr>
                                <td>@penalty.ProjectIdentifier</td>
                                <td>@Money.Satoshis(penalty.AmountInSatoshis).ToUnit(MoneyUnit.BTC) @network.CoinTicker</td>
                                <td>
                                    @if (penalty.IsExpired)
                                    {
                                        if (penalty.IsReleased)
                                        {
                                            <button disabled class="btn btn-border-warning">Penalty Released</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-info" @onclick="() => ClaimPenalty(penalty.ProjectIdentifier)">Claim Penalty</button>
                                        }
                                    }
                                    else
                                    {
                                        <button disabled class="btn btn-border-warning">Penalty Release in @penalty.DaysLeftForPenalty days</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

}

@code {
    private List<PenaltiesData> penaltyProjects = new(); // Assuming this is the model name
    private bool hasWallet = true; // Placeholder, actual value should come from your backend
                                   // Add any required variables and methods here
    public class PenaltiesData
    {
        public string ProjectIdentifier;
        public string RecoveryTransactionId;
        public bool IsReleased;
        public bool IsExpired;
        public long AmountInSatoshis;
        public int DaysLeftForPenalty;
    }

    private bool refreshSpinner = false;
    private bool firstTimeRefreshSpinner = false;

    protected override async Task OnInitializedAsync()
    {
        if (hasWallet)
        {
            var projects = storage.GetInvestmentProjects();

            foreach (var project in projects)
            {
                if (!string.IsNullOrEmpty(project.RecoveryTransactionId))
                {
                    penaltyProjects.Add(new PenaltiesData
                        {
                            ProjectIdentifier = project.ProjectInfo.ProjectIdentifier,
                            RecoveryTransactionId = project.RecoveryTransactionId,
                            IsReleased = !string.IsNullOrEmpty(project.RecoveryReleaseTransactionId),
                        });
                }
            }

            firstTimeRefreshSpinner = true;

            await RefreshPenalties();
        }
    }

    private async Task RefreshPenalties()
    {
        refreshSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var projects = storage.GetInvestmentProjects();

            foreach (var penaltyProject in penaltyProjects)
            {
                var recoveryTansaction = await _IndexerService.GetTransactionInfoByIdAsync(penaltyProject.RecoveryTransactionId);

                var totalsats = recoveryTansaction.Outputs.Where(s => Script.FromHex(s.ScriptPubKey).IsScriptType(ScriptType.P2WSH)).Sum(s => s.Balance);
                penaltyProject.AmountInSatoshis = totalsats;

                var project = projects.First(p => p.ProjectInfo.ProjectIdentifier == penaltyProject.ProjectIdentifier);

                var expieryDate = Utils.UnixTimeToDateTime(recoveryTansaction.Timestamp).AddDays(project.ProjectInfo.PenaltyDays);
                penaltyProject.DaysLeftForPenalty = (expieryDate - DateTimeOffset.UtcNow).Days;
                penaltyProject.IsExpired = (expieryDate - DateTimeOffset.UtcNow).Days <= 0;
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message, e);
        }
        finally
        {
            refreshSpinner = false;
            firstTimeRefreshSpinner = false;
        }

        StateHasChanged();
        await Task.Delay(10);
    }

    private void ClaimPenalty(string projectId)
    {
        NavigationManager.NavigateTo($"/recover/{projectId}");
    }
 }
