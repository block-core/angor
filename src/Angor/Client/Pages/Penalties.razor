@page "/penalties"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Blockcore.Consensus.ScriptInfo
@using Blockcore.NBitcoin

@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IIndexerService _IndexerService
@inject ILogger<Penalties> Logger;

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container mt-4">
    <h1>View Penalties</h1>

    <NotificationComponent @ref="notificationComponent" />
    
    @if (firstTimeRefreshSpinner && refreshSpinner)
    {
        <div class="d-flex justify-content-center">
            <div class="loader"></div>
        </div>
    }
    else
    {
        <div>
            <button class="btn btn-primary" @onclick="RefreshPenalties" disabled="@refreshSpinner">
                @if (refreshSpinner)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Refresh...</span>
                }
                else
                {
                    <span>Refresh</span>
                }
            </button>
        </div>
    }

    @if (!penaltyProjects.Any())
    {
        <p><em>No penalties found...</em></p>
    }
    else
    {
        <!-- Penalties Details Section -->
        <div class="row mt-4">

            <div class="col-md-12">
                <div class="card">
                    <div class="card-header pb-0 p-3">
                        <div class="row">
                            <div class="col-6 d-flex align-items-center">
                                <h6 class="mb-0">Penalties Details</h6>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Project ID</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Amount in Penalty</th>
                                        <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Days Left</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var penalty in penaltyProjects)
                                    {
                                        <tr>
                                            <td>@penalty.ProjectIdentifier</td>
                                            <td>@penalty.Amount @network.CoinTicker</td>
                                            <td>
                                                @if (penalty.IsExpired)
                                                {
                                                    if (penalty.IsReleased)
                                                    {
                                                        <button disabled class="btn btn-secondary">Penalty Released</button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-info" @onclick="() => ClaimPenalty(penalty.ProjectIdentifier)">Claim Penalty</button>
                                                    }
                                                }
                                                else
                                                {
                                                    <button disabled class="btn btn-warning">Penalty Release in @penalty.DaysLeftForPenalty days</button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>


        </div>
    }
</div>

@code {
    private List<PenaltiesData> penaltyProjects = new(); // Assuming this is the model name
    private bool hasWallet = true; // Placeholder, actual value should come from your backend
                                   // Add any required variables and methods here
    public class PenaltiesData
    {
        public string ProjectIdentifier;
        public string RecoveryTransactionId;
        public bool IsReleased;
        public bool IsExpired;
        public decimal Amount;
        public int DaysLeftForPenalty;
    }

    private bool refreshSpinner = false;
    private bool firstTimeRefreshSpinner = false;

    protected override async Task OnInitializedAsync()
    {
        if (hasWallet)
        {
            var projects = storage.GetInvestmentProjects();

            foreach (var project in projects)
            {
                if (!string.IsNullOrEmpty(project.RecoveryTransactionId))
                {
                    penaltyProjects.Add(new PenaltiesData
                        {
                            ProjectIdentifier = project.ProjectInfo.ProjectIdentifier,
                            RecoveryTransactionId = project.RecoveryTransactionId,
                            IsReleased = !string.IsNullOrEmpty(project.RecoveryReleaseTransactionId),
                        });
                }
            }

            firstTimeRefreshSpinner = true;

            await RefreshPenalties();
        }
    }

    private async Task RefreshPenalties()
    {
        refreshSpinner = true;
        StateHasChanged();
        await Task.Delay(10);

        try
        {
            var projects = storage.GetInvestmentProjects();

            foreach (var penaltyProject in penaltyProjects)
            {
                var recoveryTansaction = await _IndexerService.GetTransactionInfoByIdAsync(penaltyProject.RecoveryTransactionId);

                var totalsats = recoveryTansaction.Outputs.Where(s => Script.FromHex(s.ScriptPubKey).IsScriptType(ScriptType.P2WSH)).Sum(s => s.Balance);
                penaltyProject.Amount = Money.Satoshis(totalsats).ToUnit(MoneyUnit.BTC);

                var project = projects.First(p => p.ProjectInfo.ProjectIdentifier == penaltyProject.ProjectIdentifier);

                var expieryDate = Utils.UnixTimeToDateTime(recoveryTansaction.Timestamp).AddDays(project.ProjectInfo.PenaltyDays);
                penaltyProject.DaysLeftForPenalty = (expieryDate - DateTimeOffset.UtcNow).Days;
                penaltyProject.IsExpired = (expieryDate - DateTimeOffset.UtcNow).Days <= 0;
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            notificationComponent.ShowErrorMessage(e.Message);
        }
        finally
        {
            refreshSpinner = false;
            firstTimeRefreshSpinner = false;
        }

        StateHasChanged();
        await Task.Delay(10);
    }

    private void ClaimPenalty(string projectId)
    {
        NavigationManager.NavigateTo($"/recover/{projectId}");
    }
}
