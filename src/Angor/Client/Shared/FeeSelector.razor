@using Angor.Client.Models
@using Angor.Shared.Models
@using Microsoft.Extensions.Logging
@inject ILogger<FeeSelector> Logger

<div class="info-card fee-selector-container">
    <!-- Header Section -->
    <div class="fee-header">
        <div class="fee-display">
            <div class="fee-label">
                Transaction Fee
            </div>
            <div class="fee-amount">
                <span class="amount">@SendFee.ToString("F8")</span>
                <span class="currency">@CoinTicker</span>
            </div>
        </div>

        <div class="confirmation-info">
            @if (!UseCustomFee)
            {
                <div class="confirmation-badge">
                    ~@FeeBlockCount blocks
                </div>
            }
            <div class="fee-rate-badge @(UseCustomFee ? "custom" : "")">
                @{
                    var rate = UseCustomFee ? ((decimal)CustomFeeRate) / 1000 : ((decimal)FeeRate) / 1000;
                }
                @(rate.ToString("0.##")) sat/vB
            </div>
        </div>
    </div>

    <!-- Fee Selection -->
    <div class="fee-selection">
        <div class="fee-options @(UseCustomFee ? "disabled" : "")">
            <div class="fee-option @(FeePosition == 1 && !UseCustomFee ? "selected" : "")"
                @onclick="() => SetFeePosition(1)">
                <div class="option-content">
                    <div class="option-info">
                        <div class="option-name">Priority</div>
                        <div class="option-time">~1-3 blocks</div>
                    </div>
                </div>
            </div>

            <div class="fee-option @(FeePosition == 2 && !UseCustomFee ? "selected" : "")"
                @onclick="() => SetFeePosition(2)">
                <div class="option-content">
                    <div class="option-info">
                        <div class="option-name">Standard</div>
                        <div class="option-time">~3-6 blocks</div>
                    </div>
                </div>
            </div>

            <div class="fee-option @(FeePosition == 3 && !UseCustomFee ? "selected" : "")"
                @onclick="() => SetFeePosition(3)">
                <div class="option-content">
                    <div class="option-info">
                        <div class="option-name">Economy</div>
                        <div class="option-time">~6+ blocks</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Custom Fee Toggle -->
        <div class="custom-fee-toggle">
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="customFeeToggle" checked="@UseCustomFee"
                    @onchange="HandleCustomFeeToggle" />
                <label class="form-check-label" for="customFeeToggle">
                    Custom Fee Rate
                </label>
            </div>
        </div>

        <!-- Custom Fee Input -->
        @if (UseCustomFee)
        {
            <div class="custom-fee-input">
                <div class="input-wrapper">
                    <input type="number" class="form-control @(CustomFeeRate < RecommendedMinFee ? "warning" : "")"
                        placeholder="Enter custom fee rate" @bind="CustomFeeRate" @bind:event="oninput"
                        @onblur="CustomFeeRateChanged" min="1" step="1" />
                    <span class="input-suffix">sats/byte</span>
                </div>

                @if (CustomFeeRate < RecommendedMinFee)
                {
                    <div class="validation-warning">
                         Low fees may cause delayed confirmation
                    </div>
                }
                else if (CustomFeeRate > 100)
                {
                    <div class="validation-info">
                         High fee rate - transaction will confirm quickly
                    </div>
                }
            </div>
        }
    </div>
</div>



@code {
    [Parameter]
    public decimal SendFee { get; set; }

    [Parameter]
    public string CoinTicker { get; set; } = string.Empty;

    [Parameter]
    public long FeeRate { get; set; }

    [Parameter]
    public int FeeBlockCount { get; set; }

    [Parameter]
    public int FeePosition { get; set; } = 2;

    [Parameter]
    public int FeeMin { get; set; } = 1;

    [Parameter]
    public int FeeMax { get; set; } = 3;

    [Parameter]
    public long RecommendedMinFee { get; set; } = 5;

    [Parameter]
    public EventCallback<FeeCalculation> OnFeeChanged { get; set; }

    private bool UseCustomFee { get; set; }
    private long CustomFeeRate { get; set; } = 10;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (FeePosition < FeeMin || FeePosition > FeeMax)
        {
            FeePosition = 2;
        }
    }

    private async Task RecalculateFee(FeeCalculation calc)
    {
        try
        {
            if (calc.UseCustomFee && calc.CustomFee.HasValue && calc.CustomFee.Value > 0)
            {
                UseCustomFee = true;
                CustomFeeRate = calc.CustomFee.Value;
            }
            else if (calc.Position.HasValue && calc.Position.Value >= FeeMin && calc.Position.Value <= FeeMax)
            {
                UseCustomFee = false;
                FeePosition = calc.Position.Value;
            }

            await OnFeeChanged.InvokeAsync(calc);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error recalculating fee");
        }
    }

    private Task SetFeePosition(int position)
    {
        if (UseCustomFee) return Task.CompletedTask;
        return RecalculateFee(new FeeCalculation { Position = position });
    }

    private Task CustomFeeRateChanged() =>
    RecalculateFee(new FeeCalculation { CustomFee = CustomFeeRate, UseCustomFee = true });

    private async Task HandleCustomFeeToggle(ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            UseCustomFee = isChecked;

            await RecalculateFee(new FeeCalculation
            {
                UseCustomFee = isChecked,
                CustomFee = isChecked ? CustomFeeRate : null,
                Position = isChecked ? null : FeePosition
            });
        }
    }
}
