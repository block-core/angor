@using Angor.Shared.Models
@using Angor.Shared.Services

@inject ILogger<NotificationComponent> Logger;
@inject INetworkService networkService;



@if (isLoading)
{
    <div class="row">
        <div class="col">
            <div class="loader-wrapper">
                <div class="loader"></div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="row notification-wrapper">
        <div class="col-12">
            <div class="alert alert-success angor-alert-success notification-alert" role="alert" data-cy="alert">
                <div class="notification-content">
                    <span class="notification-text text-truncate">@notificationMessage</span>
                    <button type="button" class="btn-close-custom" @onclick="closeAlert">
                        <Icon IconName="close-circle" Color="#fff" />
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="row z-index-notif">
        <div class="col">
            <div class="modal-wrapper">
                <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content bg-danger">
                            <div class="modal-header text-white">
                                <h5 class="modal-title">
                                    <i class="bi bi-exclamation-triangle-fill"></i>
                                    Error
                                </h5>
                                <span type="button" @onclick="ClearErrorMessage">
                                    <Icon IconName="close-circle" Color="var(--angor-primary)" />
                                </span>
                            </div>
                            <div class="modal-body modal-body-scroll">
                                <p class="text-white">@errorMessage</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string notificationMessage;
    private string errorMessage;
    private bool isLoading;

    public void ShowNotificationMessage(string message, int delaySeconds = 5)
    {
        Task.Run(async () =>
        {
            notificationMessage = message;
            StateHasChanged();

            await Task.Delay(TimeSpan.FromSeconds(delaySeconds));

            notificationMessage = null;
            StateHasChanged();
        });
    }
    
    public void ShowErrorMessage(string message, Exception exception = null)
    {
        if (string.IsNullOrEmpty(message) && exception == null)
        {
            return; // No error to handle
        }

        // Log the error with or without an exception
        if (exception != null)
        {
            Logger.LogError(exception, "An error occurred: {Message}", message ?? exception.Message);
        }
        else
        {
            Logger.LogError("An error occurred: {Message}", message);
        }
        errorMessage = message ?? exception?.Message ?? "An unexpected error occurred.";
        StateHasChanged();
    }


    private void ClearErrorMessage()
    {
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private void closeAlert()
    {
        notificationMessage = string.Empty;
        StateHasChanged();
    }

    public void StopLoading()
    {
        isLoading = false;
        StateHasChanged();
    }

    public async Task<OperationResult> LongOperation(Func<Task<OperationResult>> action)
    {
        OperationResult res = null;
        Exception failure = null;

        try
        {
            isLoading = true;
            StateHasChanged();
            await Task.Delay(10);

            res = await action();
        }
        catch (Exception ex)
        {
            failure = ex;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }

        if (failure != null)
        {
            Logger.LogError(failure, failure.Message);
            ShowErrorMessage(failure.Message);
            networkService.HandleException(failure);
        }
        else if (res != null && !res.Success)
        {
            Logger.LogError(res.Message);
            ShowErrorMessage($"Error: {res.Message}");
        }

        return res ?? new OperationResult { Success = false };
    }
}

