@using Angor.Client.Storage
@using System.Reflection
@using Angor.Client.Services
@using Angor.Shared.Services
@inject IWalletStorage _walletStorage;
@inject NavMenuState NavMenuState;
@inject INetworkService _networkService;
@inject IconService IconService;

<div class="sidenav-header">
    <div class="menu-text">
        <i class="cursor-pointer opacity-5 position-absolute end-0 top-0 d-xl-none" aria-hidden="true" id="iconSidenav" @onclick="ToggleSidenav">
           @((MarkupString)closeIcon)
        </i>
    </div>

    <a class="navbar-brand m-0" href="" @onclick="ToggleSidenav">
        @((MarkupString)logoIcon)
        <span class="ms-1 font-weight-bold menu-text">Angor App</span>
    </a>
</div>

<hr class="horizontal mt-0 mb-2" />

<div class="collapse navbar-collapse w-auto overflow-x-hidden" id="sidenav-collapse-main">
    <ul class="navbar-nav" @onclick="ToggleSidenav">
        <li class="nav-item">
            <NavLink class="nav-link menu-text" href="wallet">
                <i class="me-1">
                    @((MarkupString)walletIcon)
                </i>
                <span class="nav-link-text ms-1">Wallet</span>
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link menu-text" href="browse">
               <i class="me-1">
                    @((MarkupString)browseIcon)
               </i>
                <span class="nav-link-text ms-1">Browse</span>
            </NavLink>
        </li>



        @if (hasWallet)
        {
            <li class="nav-item">
                <NavLink class="nav-link menu-text" href="investor">
                    <i class="me-1">
                        @((MarkupString)portfolioIcon)
                    </i>
                    <span class="nav-link-text ms-1">Portfolio</span>
                </NavLink>
            </li>

            <li class="nav-item">
                <NavLink class="nav-link menu-text" href="founder">
                     <i class="me-1">
                        @((MarkupString)founderIcon)
                     </i>
                    <span class="nav-link-text ms-1">
                        Founder
                    </span>
                </NavLink>
            </li>

        }
        <hr class="horizontal mt-0">

        <li class="nav-item">
            <NavLink class="nav-link menu-text" href="settings">
                <i class="me-1">
                    @((MarkupString)settingsIcon)
                </i>
                <span class="nav-link-text ms-1">Settings</span>
            </NavLink>
        </li>



    </ul>
</div>

<div class="sidenav-footer position-absolute w-100 bottom-0">
    <ul class="navbar-nav">

        <li class="nav-item d-flex align-items-center justify-content-@betweenOrEnd">
            @if (!islockMenu)
            {
                <span class="nav-link menu-text" @onclick="ToggleSidenavText">
                    <i class="me-1">
                        @if (isSidenavHide)
                        {
                            @((MarkupString)menuOpenIcon)
                        }
                        else
                        {
                            @((MarkupString)menuCloseIcon)
                        }
                    </i>
                </span>
            }
            @if (!isSidenavHide)
            {
                <span class="nav-link menu-text" @onclick="ToggleLockMenu">
                    <i class="me-1">
                        @if (islockMenu)
                        {
                            @((MarkupString)lockIcon)

                        }
                        else
                        {
                            @((MarkupString)unlockIcon)

                        }
                    </i>
                </span>
            }

        </li>




        <hr class="horizontal light mt-0">

        <li class="nav-item">
            <a class="nav-link menu-text" href="https://browse.angor.io">
               <i class="me-1">
                    @((MarkupString)projectExplorerIcon)
               </i>
                <span class="nav-link-text ms-1">Project Explorer</span>
            </a>
        </li>
    </ul>
</div>



@code {

    [Parameter]
    public EventCallback ToggleSidenavCallback { get; set; }

    [Parameter]
    public EventCallback ToggleSidenavTextCallback { get; set; }

    [Parameter]
    public EventCallback ToggleleLockMenuCallback { get; set; }

    private bool hasWallet;
    private string betweenOrEnd = "between";


    private bool islockMenu = false;


    private bool isSidenavHide = true;
    private Timer? _timer;
    private int _elapsedCount = 0;


    private string closeIcon;
    private string logoIcon;
    private string walletIcon;
    private string browseIcon;
    private string portfolioIcon;
    private string founderIcon;
    private string settingsIcon;
    private string menuOpenIcon;
    private string menuCloseIcon;
    private string lockIcon;
    private string unlockIcon;
    private string projectExplorerIcon;

    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();
        NavMenuState.OnChange += NavMenuStateOnOnChange;

        var iconColor = "var(--bs-primary)";

        closeIcon = await IconService.GetIcon("close-circle", 32, 32, iconColor);
        logoIcon = await IconService.GetIcon("angor-logo", 32, 32, iconColor);
        walletIcon = await IconService.GetIcon("wallet", 32, 32, iconColor);
        browseIcon = await IconService.GetIcon("browse", 32, 32, iconColor);
        portfolioIcon = await IconService.GetIcon("portfolio", 32, 32, iconColor);
        founderIcon = await IconService.GetIcon("founder", 32, 32, iconColor);
        settingsIcon = await IconService.GetIcon("settings", 32, 32, iconColor);
        menuOpenIcon = await IconService.GetIcon("menu_open", 32, 32, iconColor);
        menuCloseIcon = await IconService.GetIcon("menu_close", 32, 32, iconColor);
        lockIcon = await IconService.GetIcon("lock", 32, 32, iconColor);
        unlockIcon = await IconService.GetIcon("unlock", 32, 32, iconColor);
        projectExplorerIcon = await IconService.GetIcon("project_explorer", 32, 32, iconColor);

        await base.OnInitializedAsync();
    }


    private async Task ToggleSidenav()
    {
        await ToggleSidenavCallback.InvokeAsync();
    }


    private async Task ToggleSidenavText()
    {
        await ToggleSidenavTextCallback.InvokeAsync();

        isSidenavHide = !isSidenavHide;
 
    }

    private async Task ToggleLockMenu()
    {
        await ToggleleLockMenuCallback.InvokeAsync();

        islockMenu = !islockMenu;
        UpdateLockMenuIcon(islockMenu);

    }
    private void UpdateLockMenuIcon(bool islockMenu)
    {
        betweenOrEnd = islockMenu ? "end" : "between";
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        hasWallet = _walletStorage.HasWallet();

        NavMenuState.OnChange += NavMenuStateOnOnChange;

    }

    private void NavMenuStateOnOnChange()
    {
        hasWallet = _walletStorage.HasWallet();
        StateHasChanged();
    }

    private void TimerElapsed(object state)
    {
        // for now we disable the timer because on each call to the indexer capture and update the sate on failures
        //_networkService.CheckServices();
    }

    /// <summary>
    /// Clean up the timer when the component is disposed
    /// </summary>
    public void Dispose()
    {
        _timer?.Dispose();
    }
}
