@using Angor.Client.Storage
@using System.Reflection
@using Angor.Client.Services
@using Angor.Shared.Services
@inject IWalletStorage WalletStorage;
@inject NavMenuState NavMenuState;
@inject INetworkService NetworkService;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Angor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
@*        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>*@
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="wallet">
                <span class="oi oi-bold" aria-hidden="true"></span> Wallet
            </NavLink>
        </div>
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="browse">
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Browse
            </NavLink>
        </div>
        
        @if (_hasWallet)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="investor">
                    <span class="oi oi-spreadsheet" aria-hidden="true"></span> Portfolio
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="founder">
                    <span class="oi oi-plus" aria-hidden="true"></span> Founder
                </NavLink>
            </div>
        }

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="settings">
                <span class="oi oi-cog" aria-hidden="true"></span> Settings
            </NavLink>
        </div>

        @*  <div class="nav-item px-3">
            <NavLink class="nav-link" href="CheckTransactionCode">
                <span class="oi oi-plus" aria-hidden="true"></span> CheckTransactionCode
            </NavLink>
        </div>*@
    </nav>
    
    <div class="nav-footer">
        <div class="text-muted small">Version: @_softwareVersion</div>
    </div>

</div>



@code {
    private bool _collapseNavMenu = true;
    private bool _hasWallet;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private string _softwareVersion = "0.0.0";

    private Timer _timer;
    private int _elapsedCount = 0;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        _hasWallet = WalletStorage.HasWallet();

        NavMenuState.OnChange += NavMenuStateOnOnChange;

        // Get the current assembly (the assembly of your Blazor app)
        Assembly assembly = Assembly.GetEntryAssembly();

        // Get the assembly's version information
        Version version = assembly.GetName().Version;

        // Convert the version to a string
        _softwareVersion = version.ToString();

        //_timer = new Timer(TimerElapsed, null, TimeSpan.Zero, TimeSpan.FromMinutes(5)); // Tick every 5 min
    }

    protected override async Task OnInitializedAsync()
    {
        NetworkService.AddSettingsIfNotExist();

        await NetworkService.CheckServices();

        await base.OnInitializedAsync();
    }

    private void NavMenuStateOnOnChange()
    {
        _hasWallet = WalletStorage.HasWallet();
        StateHasChanged();
    }

    private void TimerElapsed(object state)
    {
        // for now we disable the timer because on each call to the indexer capture and update the sate on failures
        //_networkService.CheckServices();
    }

    public void Dispose()
    {
         // Clean up the timer when the component is disposed
        _timer?.Dispose();
    }
}
