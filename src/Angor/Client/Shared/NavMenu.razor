@using Angor.Client.Components
@using Angor.Client.Storage
@using System.Reflection
@using Angor.Client.Services
@using Angor.Shared.Services
@inject IWalletStorage _walletStorage;
@inject NavMenuState NavMenuState;
@inject INetworkService _networkService;

<div class="sidenav-header">
    <a class="navbar-brand m-0" href="">
        <Icon IconName="angor-logo" />
        <span class="ms-1 font-weight-bold menu-text h5">Angor</span>
    </a>
</div>

<hr class="horizontal mt-0 mb-2" />

<div class="collapse navbar-collapse w-auto overflow-x-hidden" id="sidenav-collapse-main">
    <ul class="navbar-nav">
        <li class="nav-item">
            <NavLink class="@GetNavLinkClass("wallet")" href="wallet">
                <i class="me-1">
                    <Icon IconName="wallet" />
                </i>
                <span class="nav-link-text ms-1">Wallet</span>
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="@GetNavLinkClass("browse")" href="browse">
                <i class="me-1">
                    <Icon IconName="browse" />
                </i>
                <span class="nav-link-text ms-1">Browse</span>
            </NavLink>
        </li>

        @if (hasWallet)
        {
            <li class="nav-item">
                <NavLink class="@GetNavLinkClassForInvestor()" href="investor">
                    <i class="me-1">
                        <Icon IconName="portfolio" />
                    </i>
                    <span class="nav-link-text ms-1">Portfolio</span>
                </NavLink>
            </li>

            <li class="nav-item">
                <NavLink class="@GetNavLinkClass("founder")" href="founder">
                    <i class="me-1">
                        <Icon IconName="founder" />
                    </i>
                    <span class="nav-link-text ms-1">
                        Founder
                    </span>
                </NavLink>
            </li>
        }

        <li class="nav-item">
            <NavLink class="@GetNavLinkClass("settings")" href="settings">
                <i class="me-1">
                    <Icon IconName="settings" />
                </i>
                <span class="nav-link-text ms-1">Settings</span>
            </NavLink>
        </li>
    </ul>
</div>
<hr class="horizontal mt-0 mb-2" />

<div class="sidenav-footer position-absolute w-100 bottom-0">
    <ul class="navbar-nav">

        <li class="nav-item d-none d-xl-flex align-items-center justify-content-between">
                <span class="nav-link menu-text" @onclick="ToggleSidenav">
                    <i class="ms--4">
                        @if (isSidenavHide)
                        {
                            <Icon IconName="menu_open" Height="24" Width="24" />
                        }
                        else
                        {
                            <Icon IconName="menu_close" Height="24" Width="24" />
                        }
                    </i>
                </span>
        </li>

        <li class="nav-item">
            <a class="nav-link menu-text" href="https://hub.angor.io">
                <i class="me-1">
                    <Icon IconName="project_explorer" />
                </i>
                <span class="nav-link-text ms-1">Angor Hub</span>
            </a>
        </li>
    </ul>
</div>



@code {

    [Parameter]
    public EventCallback ToggleSidenavTextCallback { get; set; }

    private bool hasWallet;

    private bool isSidenavHide = true;
    private Timer? _timer;
    private int _elapsedCount = 0;


    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();
        NavMenuState.OnChange += NavMenuStateOnOnChange;
        await base.OnInitializedAsync();
    }


    private async Task ToggleSidenav()
    {
        await ToggleSidenavTextCallback.InvokeAsync();

        isSidenavHide = !isSidenavHide;
    }

    private bool IsInvestorPage(string page)
    {
        return page == "investor" || page == "invest" || page == "release" || page == "penalties";
    }

    private string GetNavLinkClass(string page)
    {
        return $"nav-link menu-text {(NavMenuState.ActivePage == page ? "active" : "")}";
    }

    private string GetNavLinkClassForInvestor()
    {
        return $"nav-link menu-text {(IsInvestorPage(NavMenuState.ActivePage) ? "active" : "")}";
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        hasWallet = _walletStorage.HasWallet();

        NavMenuState.OnChange += NavMenuStateOnOnChange;

    }

    private void NavMenuStateOnOnChange()
    {
        hasWallet = _walletStorage.HasWallet();
        StateHasChanged();
    }

    private void TimerElapsed(object state)
    {
        // for now we disable the timer because on each call to the indexer capture and update the sate on failures
        //_networkService.CheckServices();
    }

    /// <summary>
    /// Clean up the timer when the component is disposed
    /// </summary>
    public void Dispose()
    {
        _timer?.Dispose();
    }
}
