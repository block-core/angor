@using Angor.Client.Components
@using Angor.Client.Storage
@using Angor.Client.Services
@using Angor.Shared.Services
@inject IWalletStorage _walletStorage;
@inject NavMenuState NavMenuState;
@inject INetworkService _networkService;

<aside class="sidebar @(IsCollapsed ? "collapsed" : "") @(IsDarkTheme ? "" : "white")">
    <header class="sidebar-header">
        <a href="" class="header-logo">
            <Icon IconName="angor-logo" />
            <span class="angor-label">Angor</span>
        </a>
        <button class="toggler @(IsCollapsed ? "rotate" : "")" @onclick="ToggleCollapse">
            <span class="material-symbols-rounded">
                <Icon IconName="menu_close" Height="24" Width="24" />
            </span>
        </button>
    </header>

    <nav class="sidebar-nav">
        <ul class="nav-list primary-nav">
            <li class="nav-item">
                <NavLink class="@GetNavLinkClass("wallet")" href="wallet">
                    <span class="nav-icon"><Icon IconName="wallet" /></span>
                    <span class="nav-label">Wallet</span>
                </NavLink>
                <span class="nav-tooltip">Wallet</span>
            </li>
            <li class="nav-item">
                <NavLink class="@GetNavLinkClass("browse")" href="browse">
                    <span class="nav-icon"><Icon IconName="browse" /></span>
                    <span class="nav-label">Browse</span>
                </NavLink>
                <span class="nav-tooltip">Browse</span>
            </li>

            @if (hasWallet)
            {
                <li class="nav-item">
                    <NavLink class="@GetNavLinkClassForInvestor()" href="investor">
                        <span class="nav-icon"><Icon IconName="portfolio" /></span>
                        <span class="nav-label">Portfolio</span>
                    </NavLink>
                    <span class="nav-tooltip">Portfolio</span>
                </li>

                <li class="nav-item">
                    <NavLink class="@GetNavLinkClass("founder")" href="founder">
                        <span class="nav-icon"><Icon IconName="founder" /></span>
                        <span class="nav-label">Founder</span>
                    </NavLink>
                    <span class="nav-tooltip">Founder</span>
                </li>
            }

            <li class="nav-item">
                <NavLink class="@GetNavLinkClass("settings")" href="settings">
                    <span class="nav-icon"><Icon IconName="settings" /></span>
                    <span class="nav-label">Settings</span>
                </NavLink>
                <span class="nav-tooltip">Settings</span>
            </li>
        </ul>

        <ul class="nav-list secondary-nav">
            <li class="nav-item">
                <hr class="horizontal mt-0 mb-2" />
                <a class="nav-link" href="https://hub.angor.io">
                    <span class="nav-icon"><Icon IconName="project_explorer" /></span>
                    <span class="nav-label">Angor Hub</span>
                </a>
                <span class="nav-tooltip">Angor Hub</span>
            </li>
        </ul>
    </nav>
</aside>

@code {

    [Parameter]
    public EventCallback ToggleSidenavCallback { get; set; }

    [Parameter]
    public EventCallback ToggleSidenavTextCallback { get; set; }

    [Parameter]
    public EventCallback ToggleleLockMenuCallback { get; set; }

    [Parameter]
    public bool IsCollapsed { get; set; }

    [Parameter]
    public bool IsDarkTheme { get; set; }

    [Parameter]
    public EventCallback<bool> IsCollapsedChanged { get; set; }

    private bool hasWallet;
    private string betweenOrEnd = "between";
    private bool islockMenu = false;
    private bool isSidenavHide = true;
    private Timer? _timer;
    private int _elapsedCount = 0;

    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();
        NavMenuState.OnChange += NavMenuStateOnOnChange;
        await base.OnInitializedAsync();
    }

    private async Task ToggleSidenav()
    {
        await ToggleSidenavCallback.InvokeAsync();
    }

    private async Task ToggleSidenavText()
    {
        await ToggleSidenavTextCallback.InvokeAsync();
        isSidenavHide = !isSidenavHide;
    }

    private async Task ToggleLockMenu()
    {
        await ToggleleLockMenuCallback.InvokeAsync();
        islockMenu = !islockMenu;
        UpdateLockMenuIcon(islockMenu);
    }

    private void UpdateLockMenuIcon(bool islockMenu)
    {
        betweenOrEnd = islockMenu ? "end" : "between";
    }

    private bool IsInvestorPage(string page)
    {
        return page == "investor" || page == "invest" || page == "release" || page == "penalties";
    }

    private string GetNavLinkClass(string page)
    {
        return $"nav-link menu-text {(NavMenuState.ActivePage == page ? "active" : "")}";
    }

    private string GetNavLinkClassForInvestor()
    {
        return $"nav-link menu-text {(IsInvestorPage(NavMenuState.ActivePage) ? "active" : "")}";
    }

    private async Task ToggleCollapse()
    {
        IsCollapsed = !IsCollapsed;
        await IsCollapsedChanged.InvokeAsync(IsCollapsed);
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        hasWallet = _walletStorage.HasWallet();
        NavMenuState.OnChange += NavMenuStateOnOnChange;
    }

    private void NavMenuStateOnOnChange()
    {
        hasWallet = _walletStorage.HasWallet();
        StateHasChanged();
    }

    private void TimerElapsed(object state)
    {
        // for now we disable the timer because on each call to the indexer capture and update the sate on failures
        //_networkService.CheckServices();
    }

    /// <summary>
    /// Clean up the timer when the component is disposed
    /// </summary>
    public void Dispose()
    {
        _timer?.Dispose();
    }
}
