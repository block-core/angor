@using Angor.Client.Storage
@using System.Reflection
@using Angor.Client.Services
@using Angor.Shared.Services
@inject IWalletStorage _walletStorage;
@inject NavMenuState NavMenuState;
@inject INetworkService _networkService;

<div class="sidenav-header">
    <div class="text-white">
        <i class="material-icons p-3 cursor-pointer opacity-5 position-absolute end-0 top-0 d-xl-none" aria-hidden="true" id="iconSidenav" @onclick="ToggleSidenav">
            close
        </i>
    </div>

    <a class="navbar-brand m-0" href="" @onclick="ToggleSidenav">
        <img src="/assets/img/angor-logo.svg" class="navbar-brand-img h-100" alt="Angor" />
        <span class="ms-1 font-weight-bold text-white">Angor App</span>
    </a>
</div>

<hr class="horizontal light mt-0 mb-2" />

<div class="collapse navbar-collapse w-auto overflow-x-hidden" id="sidenav-collapse-main">
    <ul class="navbar-nav" @onclick="ToggleSidenav">
        <li class="nav-item">
            <NavLink class="nav-link text-white" href="wallet">
                <i class="material-icons opacity-10">wallet</i>
                <span class="nav-link-text ms-1">Wallet</span>
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link text-white" href="browse">
                <i class="material-icons opacity-10">search</i>
                <span class="nav-link-text ms-1">Browse</span>
            </NavLink>
        </li>



        @if (hasWallet)
        {
            <li class="nav-item">
                <NavLink class="nav-link text-white" href="investor">
                    <i class="material-icons opacity-10">badge</i>
                    <span class="nav-link-text ms-1">Portfolio</span>
                </NavLink>
            </li>

            <li class="nav-item">
                <NavLink class="nav-link text-white" href="founder">
                    <i class="material-icons opacity-10">add_circle</i>
                    <span class="nav-link-text ms-1">Founder</span>
                </NavLink>
            </li>

        }


        <hr class="horizontal light mt-0">

        <li class="nav-item">
            <NavLink class="nav-link text-white" href="settings">
                <i class="material-icons opacity-10">settings</i>
                <span class="nav-link-text ms-1">Settings</span>
            </NavLink>
        </li>



    </ul>
</div>

<div class="sidenav-footer position-absolute w-100 bottom-0">
    <ul class="navbar-nav">
        <li class="nav-item" @onclick="ToggleSidenavText">
            <span class="nav-link text-white">
                <i class="material-icons opacity-10">@hideTextIcon</i>
                <span class="nav-link-text ms-1"></span>
            </span>
        </li>
        <hr class="horizontal light mt-0">

        <li class="nav-item">
            <a class="nav-link text-white" href="https://browse.angor.io">
                <i class="material-icons opacity-10">search</i>
                <span class="nav-link-text ms-1">Project Explorer</span>
            </a>
        </li>
    </ul>
</div>



@code {

    [Parameter]
    public EventCallback ToggleSidenavCallback { get; set; }

    [Parameter]
    public EventCallback ToggleSidenavTextCallback { get; set; }

    private bool hasWallet;
    private string hideTextIcon = "chevron_left";
    private bool isSidenavHide = false;
    private Timer? _timer;
    private int _elapsedCount = 0;

    private async Task ToggleSidenav()
    {
        await ToggleSidenavCallback.InvokeAsync();
    }


    private async Task ToggleSidenavText()
    {
        await ToggleSidenavTextCallback.InvokeAsync();
       
        isSidenavHide = !isSidenavHide;
        UpdateHideTextIcon(isSidenavHide);

    }
    private void UpdateHideTextIcon(bool isHideText)
    {
        hideTextIcon = isHideText ? "chevron_left" : "chevron_right";
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        hasWallet = _walletStorage.HasWallet();

        NavMenuState.OnChange += NavMenuStateOnOnChange;

    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        _networkService.AddSettingsIfNotExist();

        await _networkService.CheckServices();

        await base.OnInitializedAsync();
    }

    private void NavMenuStateOnOnChange()
    {
        hasWallet = _walletStorage.HasWallet();
        StateHasChanged();
    }

    private void TimerElapsed(object state)
    {
        // for now we disable the timer because on each call to the indexer capture and update the sate on failures
        //_networkService.CheckServices();
    }

    /// <summary>
    /// Clean up the timer when the component is disposed
    /// </summary>
    public void Dispose()
    {
        _timer?.Dispose();
    }
}
