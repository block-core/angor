@using Angor.Client.Storage
@using System.Reflection
@using Angor.Shared
@using Angor.Shared.Networks
@using Angor.Shared.Services
@using Blockcore.Networks
@inherits LayoutComponentBase
@inject IJSRuntime Js;
@inject INetworkConfiguration _networkConfiguration
@inject INetworkService _networkService
@inject NavigationManager _navManager
@inject NavMenuState NavMenuState;

<div class="@($"{(isDarkTheme ? "dark" : "")}") sidenav-show bg-gray-100 @sidenavClass ">
    <aside class="sidenav navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-3 b-shadow overflow-x-hidden" id="sidenav-main">
        <NavMenu ToggleSidenavCallback="ToggleSidenavMobile" ToggleSidenavTextCallback="ToggleSidenav" ToggleleLockMenuCallback="ToggleLockMenu" />
    </aside>

    <main class="main-content d-flex flex-column min-vh-100">
        <!-- Navbar -->
        <nav class="navbar navbar-main navbar-expand-lg px-0 mx-3 border-radius-xl position-sticky mt-3 z-index-sticky left-auto" id="navbarBlur" data-scroll="true">
            <div class="container-fluid py-1 px-3">
                <nav>
                    <div class="mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
                        <div class="text-sm">
                            <h6 class="font-weight-bolder" title="Alpha app - only use test wallets.">Only use test wallets. @networkText</h6>
                        </div>
                    </div>
                </nav>
                <div class="collapse navbar-collapse" id="navbar">
                    <div class="ms-md-auto pe-md-3 d-flex align-items-center">
                    </div>
                    <ul class="navbar-nav justify-content-end user-select-none">
                        <li class="nav-item d-xl-none ps-3 d-flex align-items-center">
                            <span role="button" class="material-icons opacity-10 btn-angor fs-3" id="iconNavbarSidenav" @onclick="ToggleSidenav">menu</span>
                        </li>
                        <li class="nav-item ps-3 d-flex align-items-center" id="dark" @onclick="ToggleTheme">
                            <span role="button" class="material-icons opacity-10 btn-angor fs-3" id="theme-icon">@themeIcon</span>
                        </li>
                        <li class="nav-item ps-3 d-flex align-items-center d-none" id="installButton">
                            <span @onclick="InstallApp" role="button" class="material-icons opacity-10 btn-angor fs-3">install_desktop</span>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <!-- End Navbar -->

        <div class="container my-4">
            @Body
        </div>

        <footer class="footer mt-auto py-3 px-0 mx-3 left-auto">
            <div class="row">
                <div class="nav nav-footer justify-content-center">
                    <div class="card card-body border-radius-lg d-flex align-items-center flex-row p-3 ms-0 me-0">
                        <h6 class="mb-0">Version: @_softwareVersion</h6>
                        <a href="https://github.com/block-core/angor" class="ms-auto text-dark cursor-pointer" target="_blank">
                            <svg id="githubicon" width="30" _ngcontent-ng-c1539744558="" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 56 56">
                                <g _ngcontent-ng-c1539744558="" fill-rule="evenodd" clip-rule="evenodd">
                                    <circle _ngcontent-ng-c1539744558="" fill="none" cx="28" cy="28" r="28"></circle>
                                    <path _ngcontent-ng-c1539744558="" fill="#1f5d6a" d="M28 0C12.54 0 0 12.54 0 28c0 12.37 8.02 22.86 19.15 26.57 1.4.26 1.91-.61 1.91-1.35 0-.66-.02-2.43-.04-4.76-7.79 1.69-9.43-3.75-9.43-3.75-1.27-3.23-3.11-4.1-3.11-4.1-2.54-1.74.19-1.7.19-1.7 2.81.2 4.29 2.89 4.29 2.89 2.5 4.28 6.55 3.04 8.15 2.33.25-1.81.98-3.04 1.78-3.74-6.22-.71-12.75-3.11-12.75-13.84 0-3.06 1.09-5.56 2.88-7.51-.29-.71-1.25-3.56.27-7.41 0 0 2.35-.75 7.7 2.87 2.23-.62 4.63-.93 7.01-.94 2.38.01 4.77.32 7.01.94 5.35-3.62 7.69-2.87 7.69-2.87 1.53 3.85.57 6.7.28 7.41 1.79 1.96 2.88 4.46 2.88 7.51 0 10.76-6.55 13.12-12.78 13.82 1.01.86 1.9 2.57 1.9 5.19 0 3.74-.03 6.76-.03 7.68 0 .75.5 1.62 1.93 1.35C47.98 50.86 56 40.37 56 28 56 12.54 43.46 0 28 0z"></path>
                                </g>
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        </footer>
    </main>
</div>



@code {
    private string _softwareVersion = "0.0.0";
    private bool isDarkTheme = false;
    private bool isLockMenu = false;
    private string themeIcon = "light_mode";
    private string sidenavClass = "sidenav-hidden";

    private string networkText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        InitializeAppVersion();
        InitializeNetworkConfiguration();
        await LoadThemeFromStorage();

        NavMenuState.OnChange += NavMenuStateOnOnChange;
    }

    private void InitializeAppVersion()
    {
        var assembly = Assembly.GetEntryAssembly();
        var version = assembly?.GetName().Version;

        if (version != null)
            _softwareVersion = version.ToString();
    }

    private void InitializeNetworkConfiguration()
    {
        _networkService.CheckAndSetNetwork(_navManager.Uri.ToLower());

        SetNetworkText();
    }

    private void SetNetworkText()
    {
        if (_networkConfiguration.GetNetwork().NetworkType != NetworkType.Mainnet)
            networkText = "(testnet)";
        else
            networkText = "(mainnet)";
    }

    private void NavMenuStateOnOnChange()
    {
        SetNetworkText();
        StateHasChanged();
    }

    private async Task LoadThemeFromStorage()
    {
        var storedTheme = await Js.InvokeAsync<string>("localStorage.getItem", "theme");
        if (!string.IsNullOrEmpty(storedTheme))
        {
            isDarkTheme = storedTheme == "dark";
            await UpdateThemeIcon(isDarkTheme);
        }
    }

    private async Task InstallApp()
    {
        try
        {
            await Js.InvokeVoidAsync("angor.installApp");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling installApp: {ex.Message}");
            // Log the error or provide a user-friendly error message
        }
    }

    private async void ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        await UpdateThemeIcon(isDarkTheme);
        await SaveThemeToStorage(isDarkTheme);
    }

    private async Task UpdateThemeIcon(bool isDark)
    {
        themeIcon = isDark ? "light_mode" : "dark_mode";
        if (isDark)
        {
            await Js.InvokeVoidAsync("angor.addDarkBackground");
        }
        else
        {
            await Js.InvokeVoidAsync("angor.addLightBackground");
        }
    }

    private async Task SaveThemeToStorage(bool isDark)
    {
        await Js.InvokeVoidAsync("localStorage.setItem", "theme", isDark ? "dark" : "light");
    }

    private void ToggleSidenavMobile()
    {
        if (isLockMenu)
        {
            sidenavClass = "";
        }
        else
        {
            sidenavClass = "sidenav-hidden";
        }
    }

    private void ToggleSidenav()
    {
        if (isLockMenu)
        {
            sidenavClass = (sidenavClass == "sidenav-pinned") ? "" : "sidenav-pinned";
        }
        else
        {
            sidenavClass = (sidenavClass == "sidenav-hidden") ? "sidenav-pinned" : "sidenav-hidden";
        }
    }

    private void ToggleLockMenu()
    {
        isLockMenu = !isLockMenu;

        if (isLockMenu)
        {
            sidenavClass = "";
        }
    }


}