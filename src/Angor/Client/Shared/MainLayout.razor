@using Angor.Client.Storage
@using System.Reflection
@using Angor.Shared
@using Angor.Shared.Networks
@using Angor.Shared.Services
@using Blockcore.Networks
@inherits LayoutComponentBase
@inject IJSRuntime Js;
@inject INetworkConfiguration _networkConfiguration
@inject INetworkService _networkService
@inject NavigationManager _navManager
@inject NavMenuState NavMenuState;

<div class="@($"{(isDarkTheme ? "dark" : "")}") sidenav-show bg-gray-100 @sidenavClass ">
    <aside class="sidenav navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-3 b-shadow overflow-x-hidden" id="sidenav-main">
        <NavMenu ToggleSidenavCallback="ToggleSidenavMobile" ToggleSidenavTextCallback="ToggleSidenav" ToggleleLockMenuCallback="ToggleLockMenu" />
    </aside>

    <main class="main-content d-flex flex-column min-vh-100">
        <!-- Navbar -->
        <nav class="navbar navbar-main navbar-expand-lg px-0 mx-3 border-radius-xl position-sticky mt-3 z-index-sticky left-auto" id="navbarBlur" data-scroll="true">
            <div class="container-fluid py-1 px-3">
                <nav>
                    <div class="mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
                        <div class="text-sm">
                            <h6 class="font-weight-bolder" title="Alpha app - only use test wallets.">Only use test wallets. @networkText</h6>
                        </div>
                    </div>
                </nav>
                <div class="collapse navbar-collapse" id="navbar">
                    <div class="ms-md-auto pe-md-3 d-flex align-items-center">
                    </div>
                    <ul class="navbar-nav justify-content-end user-select-none">
                        <li class="nav-item d-xl-none ps-3 d-flex align-items-center">
                            <span role="button" class="material-icons opacity-10 btn-angor fs-3" id="iconNavbarSidenav" @onclick="ToggleSidenav">menu</span>
                        </li>
                        <li class="nav-item ps-3 d-flex align-items-center" id="dark" @onclick="ToggleTheme">
                            <span role="button" id="theme-icon">
                                @if (themeIcon == "light_mode")
                                {
                                    <svg width="32px" height="32px" viewBox="0 0 24 24" fill="none">
                                        <path d="M13.5 8H16.5L13.5 11H16.5" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                        <path d="M18 2H22L18 6H22" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                        <path d="M21.0672 11.8568L20.4253 11.469L21.0672 11.8568ZM12.1432 2.93276L11.7553 2.29085V2.29085L12.1432 2.93276ZM21.25 12C21.25 17.1086 17.1086 21.25 12 21.25V22.75C17.9371 22.75 22.75 17.9371 22.75 12H21.25ZM12 21.25C6.89137 21.25 2.75 17.1086 2.75 12H1.25C1.25 17.9371 6.06294 22.75 12 22.75V21.25ZM2.75 12C2.75 6.89137 6.89137 2.75 12 2.75V1.25C6.06294 1.25 1.25 6.06294 1.25 12H2.75ZM15.5 14.25C12.3244 14.25 9.75 11.6756 9.75 8.5H8.25C8.25 12.5041 11.4959 15.75 15.5 15.75V14.25ZM20.4253 11.469C19.4172 13.1373 17.5882 14.25 15.5 14.25V15.75C18.1349 15.75 20.4407 14.3439 21.7092 12.2447L20.4253 11.469ZM9.75 8.5C9.75 6.41182 10.8627 4.5828 12.531 3.57467L11.7553 2.29085C9.65609 3.5593 8.25 5.86509 8.25 8.5H9.75ZM12 2.75C11.9115 2.75 11.8077 2.71008 11.7324 2.63168C11.6686 2.56527 11.6538 2.50244 11.6503 2.47703C11.6461 2.44587 11.6482 2.35557 11.7553 2.29085L12.531 3.57467C13.0342 3.27065 13.196 2.71398 13.1368 2.27627C13.0754 1.82126 12.7166 1.25 12 1.25V2.75ZM21.7092 12.2447C21.6444 12.3518 21.5541 12.3539 21.523 12.3497C21.4976 12.3462 21.4347 12.3314 21.3683 12.2676C21.2899 12.1923 21.25 12.0885 21.25 12H22.75C22.75 11.2834 22.1787 10.9246 21.7237 10.8632C21.286 10.804 20.7293 10.9658 20.4253 11.469L21.7092 12.2447Z" fill="var(--bs-primary)" />
                                    </svg>
                                }
                                else
                                {
                                    <svg width="32px" height="32px" viewBox="0 0 24 24" fill="none">
                                        <circle cx="12" cy="12" r="5" stroke="var(--bs-primary)" stroke-width="1.5" />
                                        <path d="M12 2V4" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" />
                                        <path d="M12 20V22" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" />
                                        <path d="M4 12L2 12" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" />
                                        <path d="M22 12L20 12" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" />
                                        <path d="M19.7778 4.22266L17.5558 6.25424" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" />
                                        <path d="M4.22217 4.22266L6.44418 6.25424" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" />
                                        <path d="M6.44434 17.5557L4.22211 19.7779" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" />
                                        <path d="M19.7778 19.7773L17.5558 17.5551" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" />
                                    </svg>
                                }
                            </span>
                        </li>
                        <li class="nav-item ps-3 d-flex align-items-center d-none" id="installButton">
                            <span @onclick="InstallApp" role="button">

                                <svg width="32px" height="32px" viewBox="0 0 24 24" fill="none">
                                    <path d="M3 15C3 17.8284 3 19.2426 3.87868 20.1213C4.75736 21 6.17157 21 9 21H15C17.8284 21 19.2426 21 20.1213 20.1213C21 19.2426 21 17.8284 21 15" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M12 3V16M12 16L16 11.625M12 16L8 11.625" stroke="var(--bs-primary)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                            </span>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <!-- End Navbar -->

        <div class="container my-4">
            @Body
        </div>

        <footer class="footer mt-auto py-3 px-0 mx-3 left-auto">
            <div class="row">
                <div class="nav nav-footer justify-content-center">
                    <div class="card card-body border-radius-lg d-flex align-items-center flex-row p-3 ms-0 me-0">
                        <h6 class="mb-0">Version: @_softwareVersion</h6>
                        <a href="https://github.com/block-core/angor" class="ms-auto text-dark cursor-pointer" target="_blank">
                            <svg width="32px" height="32px" viewBox="0 0 192 192" xmlns="http://www.w3.org/2000/svg" fill="none">

                                <path stroke="var(--bs-primary)" stroke-linecap="round" stroke-linejoin="round" stroke-width="12" d="M120.755 170c.03-4.669.059-20.874.059-27.29 0-9.272-3.167-15.339-6.719-18.41 22.051-2.464 45.201-10.863 45.201-49.067 0-10.855-3.824-19.735-10.175-26.683 1.017-2.516 4.413-12.63-.987-26.32 0 0-8.296-2.672-27.202 10.204-7.912-2.213-16.371-3.308-24.784-3.352-8.414.044-16.872 1.14-24.785 3.352C52.457 19.558 44.162 22.23 44.162 22.23c-5.4 13.69-2.004 23.804-.987 26.32C36.824 55.498 33 64.378 33 75.233c0 38.204 23.149 46.603 45.2 49.067-3.551 3.071-6.719 9.138-6.719 18.41 0 6.416.03 22.621.059 27.29M27 130c9.939.703 15.67 9.735 15.67 9.735 8.834 15.199 23.178 10.803 28.815 8.265"></path>
                                
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        </footer>
    </main>
</div>



@code {
    private string _softwareVersion = "0.0.0";
    private bool isDarkTheme = false;
    private bool isLockMenu = false;
    private string themeIcon = "light_mode";
    private string sidenavClass = "sidenav-hidden";

    private string networkText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        InitializeAppVersion();
        InitializeNetworkConfiguration();
        await LoadThemeFromStorage();

        NavMenuState.OnChange += NavMenuStateOnOnChange;
    }

    private void InitializeAppVersion()
    {
        var assembly = Assembly.GetEntryAssembly();
        var version = assembly?.GetName().Version;

        if (version != null)
            _softwareVersion = version.ToString();
    }

    private void InitializeNetworkConfiguration()
    {
        _networkService.CheckAndSetNetwork(_navManager.Uri.ToLower());

        SetNetworkText();
    }

    private void SetNetworkText()
    {
        if (_networkConfiguration.GetNetwork().NetworkType != NetworkType.Mainnet)
            networkText = "(testnet)";
        else
            networkText = "(mainnet)";
    }

    private void NavMenuStateOnOnChange()
    {
        SetNetworkText();
        StateHasChanged();
    }

    private async Task LoadThemeFromStorage()
    {
        var storedTheme = await Js.InvokeAsync<string>("localStorage.getItem", "theme");
        if (!string.IsNullOrEmpty(storedTheme))
        {
            isDarkTheme = storedTheme == "dark";
            await UpdateThemeIcon(isDarkTheme);
        }
    }

    private async Task InstallApp()
    {
        try
        {
            await Js.InvokeVoidAsync("angor.installApp");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling installApp: {ex.Message}");
            // Log the error or provide a user-friendly error message
        }
    }

    private async void ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        await UpdateThemeIcon(isDarkTheme);
        await SaveThemeToStorage(isDarkTheme);
    }

    private async Task UpdateThemeIcon(bool isDark)
    {
        themeIcon = isDark ? "light_mode" : "dark_mode";
        if (isDark)
        {
            await Js.InvokeVoidAsync("angor.addDarkBackground");
        }
        else
        {
            await Js.InvokeVoidAsync("angor.addLightBackground");
        }
    }

    private async Task SaveThemeToStorage(bool isDark)
    {
        await Js.InvokeVoidAsync("localStorage.setItem", "theme", isDark ? "dark" : "light");
    }

    private void ToggleSidenavMobile()
    {
        if (isLockMenu)
        {
            sidenavClass = "";
        }
        else
        {
            sidenavClass = "sidenav-hidden";
        }
    }

    private void ToggleSidenav()
    {
        if (isLockMenu)
        {
            sidenavClass = (sidenavClass == "sidenav-pinned") ? "" : "sidenav-pinned";
        }
        else
        {
            sidenavClass = (sidenavClass == "sidenav-hidden") ? "sidenav-pinned" : "sidenav-hidden";
        }
    }

    private void ToggleLockMenu()
    {
        isLockMenu = !isLockMenu;

        if (isLockMenu)
        {
            sidenavClass = "";
        }
    }


}