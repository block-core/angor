@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Client.Services
@using Angor.Client.Storage

@inject ILogger<PasswordComponent> Logger;
@inject INetworkService networkService;

@inject IEncryptionService _encryptionService
@inject IWalletStorage _walletStorage;

<div class="row mt-4">
    <div class="col">

        @if (walletPasswordConfirmModal)
        {
            <div class="modal fade show d-block" >
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="coinControlModalLabel">Confirm Password</h5>
                            <button type="button" class="btn-close" @onclick="HidePasswordAndWipe" aria-label="Close"></button>
                        </div>
                        <div class="input-group mb-3 modal-body modal-body-scroll">
                            <input type="@passwordInputType" class="form-control" placeholder="Password" @bind="WalletPassword" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">@passwordToggleText</button>
                        </div>

                        @if (!string.IsNullOrEmpty(walletPasswordError))
                        {
                            <div class="text-danger-emphasis">@walletPasswordError</div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HidePasswordAndWipe">Close</button>
                            <button class="btn btn-primary" @onclick="SubmitInternal">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>

@code {
    private bool walletPasswordConfirmModal;
    private string passwordInputType = "password";
    private string passwordToggleText = "Show";
    private string? walletPasswordError = string.Empty;

    public Func<Task> Submit { get; set; }

    public string? WalletPassword;

    public async Task SubmitInternal()
    {
        if (!await CheckPassword())
        {
            return;
        }

        HidePassword();
        
        await Submit();
    }

    public void ShowPassword(Func<Task> submit)
    {
        walletPasswordConfirmModal = true;
        Submit = submit;

        StateHasChanged();
    }

    public bool HasPassword()
    {
        return !string.IsNullOrEmpty(WalletPassword);
    }

    public void HidePassword()
    {
        walletPasswordConfirmModal = false;
        walletPasswordError = null;
        StateHasChanged();
    }

    public void ClearPassword()
    {
        WalletPassword = null;
        walletPasswordConfirmModal = false;
        walletPasswordError = null;
    }

    public void HidePasswordAndWipe()
    {
        walletPasswordConfirmModal = false;
        WalletPassword = null;
    }

    public async Task<bool> CheckPassword()
    {
        if (!HasPassword())
        {
            walletPasswordError = "Specify the password";
            StateHasChanged();
            return false;
        }

        if (!(await IsPasswordValid()))
        {
            walletPasswordError = "Invalid password";
            StateHasChanged();
            return false;
        }

        return true;
    }

    public async Task<bool> IsPasswordValid()
    {
        if (string.IsNullOrEmpty(WalletPassword))
        {
            return false;
        }

        var wallet = _walletStorage.GetWallet();
        var walletData = await _encryptionService.DecryptData(wallet.EncryptedData, WalletPassword);

        if (string.IsNullOrEmpty(walletData))
        {
            return false;
        }

        walletData = null;
        return true;
    }

    private void TogglePasswordVisibility()
    {
        if (passwordInputType == "password")
        {
            passwordInputType = "text";
            passwordToggleText = "Hide";
        }
        else
        {
            passwordInputType = "password";
            passwordToggleText = "Show";
        }
    }

    public async Task<WalletWords> GetWallet()
    {
        if (string.IsNullOrEmpty(WalletPassword)) throw new ArgumentNullException();

        var wallet = _walletStorage.GetWallet();
        var walletData = await _encryptionService.DecryptData(wallet.EncryptedData, WalletPassword);
        var words = WalletWords.ConvertFromString(walletData);
        return words;
    }
}

