@using Angor.Shared.Models
@using Angor.Shared.Services
@using Angor.Client.Services
@using Angor.Client.Storage

@inject ILogger<PasswordComponent> Logger;
@inject INetworkService networkService;

@inject IEncryptionService _encryptionService
@inject IWalletStorage _walletStorage;
@inject IPasswordCacheService _passwordCacheService;



@if (walletPasswordConfirmModal)
{
    <div class="row mt-4">
        <div class="col">
            <div class="modal fade show d-block">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="coinControlModalLabel">Confirm Password</h5>
                            <button type="button" class="btn-close" @onclick="HidePassword" aria-label="Close"></button>
                        </div>
                        <div class="input-group mb-3 modal-body modal-body-scroll">
                            <input type="@passwordInputType" class="form-control" placeholder="Password" data-cy="password-enter-for-send" @bind="_passwordCacheService.Data" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">@passwordToggleText</button>
                        </div>

                        <div class="flex-container">
                            <label for="cacheDuration" class="form-label">Remember password for:</label>
                            <select class="form-select" id="cacheDuration" @bind="SelectedCacheDuration">
                                <option value="1">1 Minute</option>
                                <option value="5">5 Minutes</option>
                                <option value="10">10 Minutes</option>
                            </select>
                        </div>

                        @if (!string.IsNullOrEmpty(walletPasswordError))
                        {
                            <div class="text-danger-emphasis">@walletPasswordError</div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HidePassword">Close</button>
                            <button class="btn btn-primary" @onclick="SubmitInternal">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}




<style>
    .flex-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .flex-container .form-label {
            margin-right: 10px; /* Adjust space between label and dropdown as needed */
        }

        .flex-container .form-select {
            width: auto; /* Adjust as needed */
            margin-bottom: 15px; /* Adds space at the bottom of the dropdown */
        }
</style>

@code {
    private bool walletPasswordConfirmModal;
    private string passwordInputType = "password";
    private string passwordToggleText = "Show";
    private string? walletPasswordError = string.Empty;

    private int SelectedCacheDuration { get; set; } = 1; // Default value is 1 minute

    public Func<Task> Submit { get; set; }

    public string? WalletPasswordBind;

    public async Task SubmitInternal()
    {
        if (!await CheckPassword())
        {
            return;
        }

        HidePassword();

        _passwordCacheService.SetTimer(TimeSpan.FromMinutes(SelectedCacheDuration));


        await Submit();
    }

    public void ShowPassword(Func<Task> submit)
    {
        walletPasswordConfirmModal = true;
        Submit = submit;

        StateHasChanged();
    }

    public bool HasPassword()
    {
        return !string.IsNullOrEmpty(_passwordCacheService.Data);
    }

    public void HidePassword()
    {
        walletPasswordConfirmModal = false;
        walletPasswordError = null;
        StateHasChanged();
    }

    public void ClearPassword()
    {
        _passwordCacheService.TryClear();
        walletPasswordConfirmModal = false;
        walletPasswordError = null;
    }

    public async Task<bool> CheckPassword()
    {
        if (!HasPassword())
        {
            walletPasswordError = "Specify the password";
            StateHasChanged();
            return false;
        }

        if (!(await IsPasswordValid()))
        {
            walletPasswordError = "Invalid password";
            StateHasChanged();
            return false;
        }

        return true;
    }

    public async Task<bool> IsPasswordValid()
    {
        if (string.IsNullOrEmpty(_passwordCacheService.Data))
        {
            return false;
        }

        var wallet = _walletStorage.GetWallet();
        var walletData = await _encryptionService.DecryptData(wallet.EncryptedData, _passwordCacheService.Data);

        if (string.IsNullOrEmpty(walletData))
        {
            return false;
        }

        walletData = null;
        return true;
    }

    private void TogglePasswordVisibility()
    {
        if (passwordInputType == "password")
        {
            passwordInputType = "text";
            passwordToggleText = "Hide";
        }
        else
        {
            passwordInputType = "password";
            passwordToggleText = "Show";
        }
    }

    public async Task<WalletWords?> TryGetWalletAsync()
    {
        if (string.IsNullOrEmpty(_passwordCacheService.Data))
        {
            return null;
        }

        return await GetWalletAsync();
    }

    public async Task<WalletWords> GetWalletAsync()
    {
        if (string.IsNullOrEmpty(_passwordCacheService.Data)) throw new ArgumentNullException();

        var wallet = _walletStorage.GetWallet();
        var walletData = await _encryptionService.DecryptData(wallet.EncryptedData, _passwordCacheService.Data);
        var words = WalletWords.ConvertFromString(walletData);
        return words;
    }
}

